drop program maur_tn_pmmc_adj_ext:dba go
create program maur_tn_pmmc_adj_ext:dba
 
 
/**************************************************************
; DVDev DECLARED SUBROUTINES
**************************************************************/
declare LoadOutAlias (s_code_set = vc, f_contrib_sys_cd = f8 ) = i2
declare GetAlias (f_cv = f8, f_contrib_sys_cd = f8 ) = vc
/**************************************************************
; DVDev DECLARED VARIABLES
**************************************************************/
declare ms_file_path = vc with protect, noconstant(cnvtlower(trim($1,3)))
declare ms_dt = vc with protect, constant(trim(format(cnvtdatetime(curdate,curtime3),'YYYYMMDD;;q'),3))
 
declare mf_cs73_HL7STDSRC_CD = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",73,"HL7STDSRC"))
declare mf_cs319_FIN_CD = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!2930'))
declare mf_cs18649_CHARGE_CD = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!29774'))
declare mf_cs18649_ADJUSTMENT_CD = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!29688'))
declare mf_cs18649_PAYMENT_CD = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!30346'))
 
declare mf_cs27121_HEALTHPLANALIAS_CD = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!2961173'))
declare mf_cs71_INPATIENT_CD = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!3958'))
declare mf_cs71_SWINGBED_CD  = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",71,"SWINGBED"))
declare mf_cs71_PREREG_CD  = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",71,"PREREG"))
declare mf_cs71_CLIENT_CD  = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",71,"CLIENT"))
declare mf_cs354_CLIENT_CD  = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",354,"CLIENT"))
 
declare mf_cs20549_BADDEBTRECOVERY_CD    = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!2780968'))
declare mf_cs20549_BADDEBTREVERSAL_CD    = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!2780969'))
declare mf_cs20549_BADDEBTWRITEOFF_CD    = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!2780967'))
declare mf_cs20549_BANKRUPTCY_CD         = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!2944632'))
declare mf_cs20549_BANKRUPTCYREVERSAL_CD = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!2989543'))
declare mf_cs20549_CALCONTRACTADJ_CD     = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!4201431864'))
declare mf_cs20549_CHARITYADJUSTMENT_CD  = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!2596122'))
declare mf_cs20549_COURTESYADJUSTMENT_CD = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!146710'))
declare mf_cs20549_EXPREIMBURSEMENT_CD   = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!146707'))
declare mf_cs20549_PAYMENTADJUSTMENT_CD  = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!146715'))
declare mf_cs20549_NONARGLONLYPAYMENT_CD = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!3153229'))
 
 
declare mf_cs20549_CONTRACALLOWADJ_CD    = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!2596123'))
declare mf_cs20549_DISCOUNTADJUSTMENT_CD = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!146706'))
 
declare mf_cs18937_LABCAPITATION_CD = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",18937,"LABCAPITATION"))
declare mf_cs18937_ADMINADJ_CD      = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",18937,"ADMINISTRATIVEADJUSTMENT"))
 
declare mf_cs354_BCBS_CD = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",354,"BCBS"))
declare mf_cs354_COMMERCIALCONTRACT_CD = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",354,"COMMERCIALCONTRACT"))
declare mf_cs354_MEDICAREREPLACEMENT_CD = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",354,"MEDICAREREPLACEMENT"))
declare mf_cs354_MEDICAID_CD = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",354,"MEDICAID"))
declare mf_cs354_MRHEMPLOYEES_CD = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",354,"MRHEMPLOYEES"))
declare mf_cs354_WORKERSCOMPENSATION_CD = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",354,"WORKERSCOMPENSATION"))
declare mf_cs354_MEDICARE_CD = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",354,"MEDICARE"))
declare mf_cs354_COMMERCIALNONCONTRACT_CD = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",354,"COMMERCIALNONCONTRACT"))
 
 
;declare mf_cs354_CLIENT_CD = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",354,"CLIENT"))
declare mf_cs354_SELFPAY_CD = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",354,"SELFPAY"))
declare mf_cs20849_CLIENT_CD = f8 with protect, constant(uar_get_code_by_cki('CKI.CODEVALUE!142832'))
 
 
 
declare ml_idx1 = i4 with protect, noconstant(0)
declare ml_idx2 = i4 with protect, noconstant(0)
 
/**************************************************************
; DVDev Start Coding
**************************************************************/
 
 
free record m_out_alias
record m_out_alias(
  1 l_cs_cnt = i4
  1 qual[*]
    2 f_code_set = f8
    2 l_cv_cnt = i4
    2 qual[*]
     3 f_code_value = f8
     3 s_alias = vc
     3 f_contrib_sys_cd = f8) with protect
 
free record m_rec
record m_rec(
  1 l_cnt = i4
  1 qual[*]
    2 f_person_id = f8
    2 f_encntr_id = f8
    2 f_pft_encntr_id = f8
    2 s_fin = vc
    2 s_med_service = vc
    2 s_bill_entity = vc
    2 l_pmt_cnt = i4
    2 pmt[*]
      3 f_activity_id = f8
      3 s_trans_alias = vc
      3 s_amount = vc
      3 s_post_date = vc
      3 s_payor_id = vc
) with protect
 
 
free record frec
record frec(
  1 file_desc = i4
  1 file_offset = i4
  1 file_dir = i4
  1 file_name = vc
  1 file_buf = vc) with protect
 
;call LoadOutAlias("34", mf_cs73_HL7STDSRC_CD)
 
;call echorecord(m_out_alias)
 
set frec->file_name = concat(ms_file_path,"c_mrmc_adjs_pmts_",ms_dt,".txt")
set frec->file_buf = "w"
 
 
select into 'nl:'
  from pft_trans_reltn ptr,
       trans_log tl,
       pft_trans_alias pta,
       pft_encntr pe,
       billing_entity be,
       encounter e,
       encntr_alias ea,
       bo_hp_reltn bhr,
       health_plan_alias hpa
plan ptr
  where ptr.beg_effective_dt_tm between cnvtdatetime(curdate-1,0) and cnvtdatetime(curdate-1,235959)
    and ptr.parent_entity_name = 'PFTENCNTR'
    ;and ptr.amount > 0.00
    and ptr.trans_type_cd != mf_cs18649_CHARGE_CD
join tl
  where tl.activity_id = ptr.activity_id
    and tl.trans_type_cd != mf_cs18649_CHARGE_CD
    and  ((tl.trans_sub_type_cd not in (mf_cs20549_BADDEBTRECOVERY_CD, mf_cs20549_BADDEBTREVERSAL_CD,mf_cs20549_BADDEBTWRITEOFF_CD,
                                       mf_cs20549_BANKRUPTCY_CD, mf_cs20549_BANKRUPTCYREVERSAL_CD, mf_cs20549_CALCONTRACTADJ_CD,
                                       mf_cs20549_CHARITYADJUSTMENT_CD, mf_cs20549_COURTESYADJUSTMENT_CD,
                                       mf_cs20549_EXPREIMBURSEMENT_CD, mf_cs20549_PAYMENTADJUSTMENT_CD,
                                       mf_cs20549_NONARGLONLYPAYMENT_CD))
          or (tl.trans_sub_type_cd != mf_cs20549_CONTRACALLOWADJ_CD and tl.trans_reason_cd != mf_cs18937_LABCAPITATION_CD)
          or (tl.trans_sub_type_cd != mf_cs20549_DISCOUNTADJUSTMENT_CD and tl.trans_reason_cd != mf_cs18937_ADMINADJ_CD)
         )
join pta
  where pta.pft_trans_alias_id = outerjoin(tl.trans_alias_id)
;    and pta.active_ind = outerjoin(1)
;    and pta.end_effective_dt_tm > outerjoin(cnvtdatetime(curdate,curtime3))
join pe
  where pe.pft_encntr_id = ptr.parent_entity_id
    and pe.active_ind = 1
    ;and pe.fin_class_cd in (mf_cs354_BCBS_CD, mf_cs354_COMMERCIALCONTRACT_CD, mf_cs354_MEDICAREREPLACEMENT_CD,
    ;                        mf_cs354_MEDICAID_CD, mf_cs354_MRHEMPLOYEES_CD,mf_cs354_WORKERSCOMPENSATION_CD,
    ;                        mf_cs354_MEDICARE_CD,mf_cs354_COMMERCIALNONCONTRACT_CD)
    and pe.fin_class_cd not in (mf_cs354_CLIENT_CD, mf_cs354_SELFPAY_CD)
    and exists (select a.acct_id from account a where a.acct_id = pe.acct_id
                   and a.active_ind = 1
                   and a.end_effective_dt_tm > cnvtdatetime(curdate,curtime3)
                   and a.acct_sub_type_cd != mf_cs20849_CLIENT_CD
                   )
join be
  where be.billing_entity_id = pe.billing_entity_id
    and be.active_ind = 1
    and be.end_effective_dt_tm > cnvtdatetime(curdate,curtime3)
    and be.be_name_key in ('MAURYREGIONALMEDICALCENTER','MARSHALLMEDICALCENTER','WAYNEMEDICALCENTER')
join e
  where e.encntr_id = pe.encntr_id
    and e.encntr_type_cd not in (mf_cs71_PREREG_CD, mf_cs71_CLIENT_CD)
join ea
  where ea.encntr_id = e.encntr_id
    and ea.active_ind = 1
    and ea.end_effective_dt_tm > cnvtdatetime(curdate,curtime3)
    and ea.encntr_alias_type_cd = mf_cs319_FIN_CD
join bhr
  where bhr.bo_hp_reltn_id = outerjoin(ptr.benefit_order_id)
join hpa
  where hpa.health_plan_id = outerjoin(bhr.health_plan_id)
    and hpa.active_ind = outerjoin(1)
    and hpa.end_effective_dt_tm > outerjoin(cnvtdatetime(curdate,curtime3))
    and hpa.plan_alias_type_cd = outerjoin(mf_cs27121_HEALTHPLANALIAS_CD)
order by pe.pft_encntr_id, tl.activity_id
head report
  m_rec->l_cnt = 0
head pe.pft_encntr_id
 
  m_rec->l_cnt = m_rec->l_cnt + 1
  stat = alterlist(m_rec->qual,m_rec->l_cnt)
  m_rec->qual[m_rec->l_cnt].f_encntr_id = e.encntr_id
  m_rec->qual[m_rec->l_cnt].f_pft_encntr_id = pe.pft_encntr_id
  m_rec->qual[m_rec->l_cnt].f_person_id = e.person_id
 
  if (pe.recur_ind = 1)
    m_rec->qual[m_rec->l_cnt].s_fin = concat(trim(cnvtalias(ea.alias,ea.alias_pool_cd),3),'-',trim(cnvtstring(pe.recur_seq),3))
  else
    m_rec->qual[m_rec->l_cnt].s_fin = trim(cnvtalias(ea.alias,ea.alias_pool_cd),3)
  endif
  if (e.encntr_type_cd in (mf_cs71_INPATIENT_CD, mf_cs71_SWINGBED_CD))
    m_rec->qual[m_rec->l_cnt].s_med_service = 'I'
  else
    m_rec->qual[m_rec->l_cnt].s_med_service = 'O'
  endif
  if (be.be_name_key = 'MAURYREGIONALMEDICALCENTER')
    m_rec->qual[m_rec->l_cnt].s_bill_entity = 'MRH'
  elseif (be.be_name_key = 'MARSHALLMEDICALCENTER')
    m_rec->qual[m_rec->l_cnt].s_bill_entity = 'MMC'
  elseif (be.be_name_key = 'WAYNEMEDICALCENTER')
    m_rec->qual[m_rec->l_cnt].s_bill_entity = 'WMC'
  endif
  m_rec->qual[m_rec->l_cnt].l_pmt_cnt = 0
head tl.activity_id
  m_rec->qual[m_rec->l_cnt].l_pmt_cnt = m_rec->qual[m_rec->l_cnt].l_pmt_cnt + 1
  stat = alterlist(m_rec->qual[m_rec->l_cnt].pmt,m_rec->qual[m_rec->l_cnt].l_pmt_cnt)
  m_rec->qual[m_rec->l_cnt].pmt[m_rec->qual[m_rec->l_cnt].l_pmt_cnt].f_activity_id = tl.activity_id
  m_rec->qual[m_rec->l_cnt].pmt[m_rec->qual[m_rec->l_cnt].l_pmt_cnt].s_trans_alias = trim(pta.pft_trans_alias)
 
  if (size(trim(m_rec->qual[m_rec->l_cnt].pmt[m_rec->qual[m_rec->l_cnt].l_pmt_cnt].s_trans_alias,3)) = 0)
    if (ptr.trans_type_cd = mf_cs18649_ADJUSTMENT_CD)
      m_rec->qual[m_rec->l_cnt].pmt[m_rec->qual[m_rec->l_cnt].l_pmt_cnt].s_trans_alias = 'ADJ'
    elseif (ptr.trans_type_cd = mf_cs18649_PAYMENT_CD)
      m_rec->qual[m_rec->l_cnt].pmt[m_rec->qual[m_rec->l_cnt].l_pmt_cnt].s_trans_alias = 'PAY'
    endif
  endif
 
  m_rec->qual[m_rec->l_cnt].pmt[m_rec->qual[m_rec->l_cnt].l_pmt_cnt].s_post_date = trim(format(tl.post_dt_tm,'MM/DD/YYYY;;q'),3)
  m_rec->qual[m_rec->l_cnt].pmt[m_rec->qual[m_rec->l_cnt].l_pmt_cnt].s_amount =
                                                    trim(cnvtstring(evaluate(ptr.dr_cr_flag,2,ptr.amount,-1*ptr.amount),20,2),3)
  if (size(trim(hpa.alias,3)) > 0)
    m_rec->qual[m_rec->l_cnt].pmt[m_rec->qual[m_rec->l_cnt].l_pmt_cnt].s_payor_id = trim(hpa.alias,3)
  else
    m_rec->qual[m_rec->l_cnt].pmt[m_rec->qual[m_rec->l_cnt].l_pmt_cnt].s_payor_id = trim(cnvtstring(bhr.health_plan_id,20),3)
  endif
with nocounter
;call echorecord(m_rec)
 
;open file
set stat = cclio("OPEN",frec)
 
;write header row
 
set frec->file_buf = build('"Patient ID",'
                        ,'"Adjustment Posting Code",'
                        ,'"Adjustment Amount",'
                        ,'"Adjustment Posting Date",'
                        ,'"Identify Payer ID for Adjustment",'
                        ,'"",'
                        ,'"Provider Org/Group Code",'
                        ,'"Service Category"'
                        ,char(13),char(10))
set stat = cclio("WRITE",frec)
 
 
;write data
 
for (ml_idx1 = 1 to m_rec->l_cnt)
  for (ml_idx2 = 1 to m_rec->qual[ml_idx1].l_pmt_cnt)
    set frec->file_buf = build('"',m_rec->qual[ml_idx1].s_fin
                              ,'","',m_rec->qual[ml_idx1].pmt[ml_idx2].s_trans_alias
                              ,'","',m_rec->qual[ml_idx1].pmt[ml_idx2].s_amount
                              ,'","',m_rec->qual[ml_idx1].pmt[ml_idx2].s_post_date
                              ,'","',m_rec->qual[ml_idx1].pmt[ml_idx2].s_payor_id
                              ,'","'
                              ,'","',m_rec->qual[ml_idx1].s_bill_entity
                              ,'","',m_rec->qual[ml_idx1].s_med_service
                              ,'"',char(13),char(10))
    set stat = cclio("WRITE",frec)
  endfor
endfor
 
;close file
set stat = cclio("CLOSE",frec)
 
/**************************************************************
; DVDev DEFINED SUBROUTINES
**************************************************************/
subroutine GetAlias(f_cv, f_contrib_sys_cd)
  declare ml_cv_pos = i4 with noconstant(0)
  declare ml_cs_pos = i4 with noconstant(0)
  declare ml_idx = i4 with noconstant(0)
  declare mf_code_set = f8 with noconstant(0)
  declare s_ret_val = vc with noconstant(concat("CD::",trim(cnvtstring(f_cv,20),3)))
 
  set mf_code_set = uar_get_code_set(f_cv)
 
  if(mf_code_set > 0)
    set ml_cs_pos = locatevalsort(ml_idx,1,m_out_alias->l_cs_cnt,mf_code_set,m_out_alias->qual[ml_idx].f_code_set)
  else
    return(s_ret_val)
  endif
 
  set ml_cv_pos = locatevalsort(ml_idx,1,m_out_alias->qual[ml_cs_pos].l_cv_cnt, f_cv,
                  m_out_alias->qual[ml_cs_pos].qual[ml_idx].f_code_value, f_contrib_sys_cd,
                  m_out_alias->qual[ml_cs_pos].qual[ml_idx].f_contrib_sys_cd)
 
  if(ml_cv_pos > 0)
    set s_ret_val = trim(m_out_alias->qual[ml_cs_pos].qual[ml_cv_pos].s_alias,3)
  endif
 
  return(s_ret_val)
end
 
subroutine LoadOutAlias(s_code_set, f_contrib_sys_cd)
  declare l_ret_val = i2 with protect, noconstant(0)
  ;declare l_cs_cnt = i4 with protect, noconstant(0)
  declare l_cv_cnt = i4 with protect, noconstant(0)
 
  if(f_contrib_sys_cd > 0.0)
    select into "nl:"
      from code_value_outbound cvo
     where parser(build("cvo.code_set in (",s_code_set,")"))
       and cvo.contributor_source_cd = f_contrib_sys_cd
    order by cvo.code_set, cvo.code_value
   ; head report
   ;   m_out_alias->l_cs_cnt = 0
    head cvo.code_set
      m_out_alias->l_cs_cnt = m_out_alias->l_cs_cnt + 1
      stat = alterlist(m_out_alias->qual,m_out_alias->l_cs_cnt)
      m_out_alias->qual[m_out_alias->l_cs_cnt].f_code_set = cvo.code_set
      m_out_alias->qual[m_out_alias->l_cs_cnt].l_cv_cnt = 0
    detail
      m_out_alias->qual[m_out_alias->l_cs_cnt].l_cv_cnt = m_out_alias->qual[m_out_alias->l_cs_cnt].l_cv_cnt  + 1
      stat = alterlist(m_out_alias->qual[m_out_alias->l_cs_cnt]->qual,m_out_alias->qual[m_out_alias->l_cs_cnt].l_cv_cnt)
      m_out_alias->qual[m_out_alias->l_cs_cnt].qual[m_out_alias->qual[m_out_alias->l_cs_cnt].l_cv_cnt].f_code_value = cvo.code_value
      m_out_alias->qual[m_out_alias->l_cs_cnt].qual[m_out_alias->qual[m_out_alias->l_cs_cnt].l_cv_cnt].s_alias = cvo.alias
      m_out_alias->qual[m_out_alias->l_cs_cnt].qual[m_out_alias->qual[m_out_alias->l_cs_cnt].l_cv_cnt].f_contrib_sys_cd =
                                                                                                           cvo.contributor_source_cd
    with nocounter
 
    if(m_out_alias->l_cs_cnt > 0)
      set l_ret_val = 1
    endif
  endif
  return(l_ret_val)
end
 
 
#EXIT_SCRIPT
 
end
go
