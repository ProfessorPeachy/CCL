  DROP PROGRAM 1_amj_tn_tha_extract_revised:dba GO
CREATE PROGRAM 1_amj_tn_tha_extract_revised:dba
 
/***********************************************************************************************************************
*                   GENERATED MODIFICATION CONTROL LOG                                                                 *
************************************************************************************************************************
*                                                                                                                      *
*  Mod Date       Engineer      Comment                                                                                *
*  --- ---------- ----------  -----------------------------------------------------------------------------------------*
*  000 09/10/2018 M Miraftab  Initial release - based on AHS_SHAWNEE_KS_UB04_DX.PRG
*  000 04/06/2019 M Miraftab  Changes for Recurring encounter logic
*  000 04/17/2019 M Miraftab  Changes for ED->IP claim merges
*  000 05/01/2019 M Miraftab  Added Self-Pay logic
************************* END OF ALL MODCONTROL BLOCKS ****************************************************************/
 
prompt
	"Output to File/Printer/MINE" = "MINE"   ;* Enter or select the printer or file name to send this report to.
	, "Select IP or OP" = "IP"
	, "Select Quarter" = "Q1"
	, "Select Year" = 2019
	, "Facility" = "MRMC"
 
with OUTDEV, FILE_TYPE, QTR_VAR, YEAR_VAR, FACILITY
 
 
/***************************************************************************************
* Prompt Evaluation																   *
***************************************************************************************/
 
set file_type = cnvtupper($file_type)
set qtr_var = $qtr_var
set year_var = $year_var
 
SET TEST_FIN = "";201077858"201164223";200266916";200269124";200266954" ;200548230" ;200646376" ;200556187" ;200462229"
 
if (cnvtupper(qtr_var) = "Q1")
  set beg_dt_tm = cnvtdatetime(concat("01-JAN-", trim(cnvtstring(year_var)), " 00:00:00"))
  set end_dt_tm = cnvtdatetime(concat("01-APR-", trim(cnvtstring(year_var)), " 00:00:00"))
  set beg_month = 1
  set end_month = 3
elseif (cnvtupper(qtr_var) = "Q2")
  set beg_dt_tm = cnvtdatetime(concat("01-APR-", trim(cnvtstring(year_var)), " 00:00:00"))
  set end_dt_tm = cnvtdatetime(concat("01-JUL-", trim(cnvtstring(year_var)), " 00:00:00"))
  set beg_month = 4
  set end_month = 6
elseif (cnvtupper(qtr_var) = "Q3")
  set beg_dt_tm = cnvtdatetime(concat("01-JUL-", trim(cnvtstring(year_var)), " 00:00:00"))
  set end_dt_tm = cnvtdatetime(concat("01-OCT-", trim(cnvtstring(year_var)), " 00:00:00"))
  set beg_month = 7
  set end_month = 9
elseif (cnvtupper(qtr_var) = "Q4")
  set beg_dt_tm = cnvtdatetime(concat("01-OCT-", trim(cnvtstring(year_var)),   " 00:00:00"))
  set end_dt_tm = cnvtdatetime(concat("01-JAN-", trim(cnvtstring(year_var+1)), " 00:00:00"))
  set beg_month = 10
  set end_month = 12
endif
 
SET MAURY_LOC_CD = 21250403.00
SET MAURY_CANCER_LOC_CD = 2553742717.00
SET WAYNE_LOC_CD = 21250831.00
SET MARSHAL_LOC_CD = 21304872.00
 
if (cnvtupper($facility) = "MRMC")
  set facility1_cd = maury_loc_cd
  set facility2_cd = maury_cancer_loc_cd
elseif (cnvtupper($facility) = "WMC")
  set facility1_cd = wayne_loc_cd
  set facility2_cd = wayne_loc_cd
elseif (cnvtupper($facility) = "MMC")
  set facility1_cd = marshal_loc_cd
  set facility2_cd = marshal_loc_cd
endif
 
 
/***************************************************************************************
* Variable and Record Definition													   *
***************************************************************************************/
 
SET REV_LEN = 4
SET RATE_LEN = 14
SET DOS_LEN = 8
SET UOS_LEN = 7
SET CHG_LEN = 10
 
;-------------------------------------------------------------------------------------------
 
DECLARE FINNBR_CD  		= F8 WITH CONSTANT(UAR_GET_CODE_BY("MEANING",319,"FIN NBR"))
DECLARE MRN_CD  		= F8 WITH CONSTANT(UAR_GET_CODE_BY("MEANING",4,"MRN"))
DECLARE SSN_CD  		= F8 WITH CONSTANT(UAR_GET_CODE_BY("MEANING",4,"SSN"))
DECLARE HOME_CD  		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",212,"HOME"))
DECLARE THA_SOURCE_CD	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",73,"MAURTNTHADATA"))
DECLARE ATTENDING_CD  	= F8 WITH CONSTANT(UAR_GET_CODE_BY("MEANING",333,"ATTENDDOC"))
DECLARE ADMITTING_CD  	= F8 WITH CONSTANT(UAR_GET_CODE_BY("MEANING",333,"ADMITDOC"))
DECLARE CONSULT_CD  	= F8 WITH CONSTANT(UAR_GET_CODE_BY("MEANING",333,"CONSULTDOC"))
DECLARE SURGEON_CD  	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",333,"SURGEON"))
DECLARE TRANSMITTED_CD	= F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',18935,'TRANSMITTED'))   ;19435054.00
DECLARE TRANSMITTEDX_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',18935,'TRANSMITTEDBYCROSSOVER'))
DECLARE SUBMITTED_CD	= F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',18935,'SUBMITTED'))
DECLARE NPI_ALIAS_CD	= F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',320,'NATIONALPROVIDERIDENTIFIER'))
DECLARE LIC_ALIAS_CD	= F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',320,'LICENSENBR'))
DECLARE ORG_NPI_ALIAS_CD= F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',334,'NATIONALPROVIDERIDENTIFIER'));247806662.00
DECLARE CLAIM_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',21849,'CLAIM'))
DECLARE STATEMENT_CD	= F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',21849,'PATIENTSTATEMENT'))
DECLARE MEDIA_SUB_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",21753,"837I5010"));508410352
DECLARE COBBILLING_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",4002034,"COBBILLING"));247817983
 
DECLARE SELF_PAY_CD	    = F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',354, 'SELFPAY'))
DECLARE SWING_BED_CD    = F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',34, 'SWINGBED'))
 
DECLARE INPATIENT_CD  	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",71,"INPATIENT"))
DECLARE PREADMIT_CD  	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",71,"PREADMIT"))
DECLARE OUTPATIENT_CD  	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",71,"OUTPATIENT"))
DECLARE RECURRING_CD  	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",71,"RECURRING"))
 
DECLARE DNR_CD	 		  = F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',200,'RESUSCITATIONSTATUS'))
DECLARE DNR_DNI_DETAIL_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',254914,'DONOTRESUSCITATEANDDONOTINTUBATE'))
DECLARE DNR_DETAIL_CD	  = F8 WITH CONSTANT(UAR_GET_CODE_BY('DISPLAYKEY',254914,'DONOTRESUSCITATE'))
DECLARE DELETED_CD 		  = F8 WITH CONSTANT(UAR_GET_CODE_BY('MEANING',6004,'DELETED'))
 
DECLARE EMPLOYER_CD 	  = F8 WITH CONSTANT(UAR_GET_CODE_BY('MEANING',338,'EMPLOYER'))
DECLARE INSURED_CD 	      = F8 WITH CONSTANT(UAR_GET_CODE_BY('MEANING',351,'INSURED'))
 
SET ADM_DX_CD             = UAR_GET_CODE_BY('DISPLAYKEY',17,'ADMITTING')
SET RFV_DX_CD             = UAR_GET_CODE_BY('DISPLAYKEY',17,'REASONFORVISIT')
SET FINAL_DX_CD           = UAR_GET_CODE_BY('DISPLAYKEY',17,'FINAL')
 
SET ICD10CM_SOURCE_CD     = UAR_GET_CODE_BY('DISPLAYKEY',400,'ICD10CM')
SET ICD10PCS_SOURCE_CD    = UAR_GET_CODE_BY('DISPLAYKEY',400,'ICD10PCS')
SET PROC_CD               = UAR_GET_CODE_BY('DISPLAYKEY',401,'PROCEDURE')
SET CANCELED_CD           = UAR_GET_CODE_BY('DISPLAYKEY',24451,'CANCELLED')
SET INVALID_CD            = UAR_GET_CODE_BY('DISPLAYKEY',24451,'INVALID')
 
;XML Handless
DECLARE  hELEMENT  		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hXMLFILE  		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hROOT  		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hCONTEXT  		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hCOMMON  		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hCLAIM  		= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  hPAYERS  		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hPAYER  		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hSUBSCRIBER  	= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hADDRESSES  	= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hADDRESS	  	= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  hORGANIZATION 	= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hTYPES	 		= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  hPRS     	    = I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hPR     	    = I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hPRSNLS     	= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hPRSNL     	= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  hDXCODES  		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hDXCODE  		= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  hLINEITEMS  	= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hLINEITEM  	= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  hCHG_PROCS		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hCHG_PROC		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hLINE_PROC 	= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  hPERSONS  		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hENCOUNTER 	= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  hACCIDENTS		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hACCIDENT		= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  hHEALTHPLANS  	= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hHEALTHPLAN 	= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  hCHARGEITEMS  	= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hCHARGE  		= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  hTEMP_ITEM		= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  hDRG			= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hDRGS			= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  hPROCEDURE     = I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  ITEM_IDX  		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  PROC_IDX		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  ORG_IDX		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  PLAN_IDX		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  DX_CNT  		= I4 WITH PROTECT,NOCONSTANT(0)
DECLARE  PROC_CNT  		= I4 WITH PROTECT,NOCONSTANT(0)
 
DECLARE  TEMP_DX_STR	= C8 WITH PROTECT,NOCONSTANT(FILLSTRING(8," "))
 
SET MODIFY MAXVARLEN 5000000
 
/***************************************************************************************
* Data Gathering Quries																   *
***************************************************************************************/
%i CUST_SCRIPT:AHS_PFT_CLM_COMMON_SUBS.INC
 
set file_name = concat(trim($facility), qtr_var, file_type, substring(3, 2, trim(cnvtstring(year_var))),
 						format(sysdate, "mmddyyyyhhmm;;d"), ".txt")
 
SET TEMP_BEG_DT_TM = BEG_DT_TM
FOR (TEMP_INX = 1 to 14)
  SET CNT = 0
FREE SET UB04_ARR
	RECORD UB04_ARR(
	1 QUAL[*]
	    2 DEL_IND           = I2
	    2 OBS_IND           = I2
	    2 FLU_IND           = I2
	    2 CHG_CNT           = I2
	    2 SELF_IND          = I2
		2 XML               = GVC
		2 PFT_ENCNTR_ID		= F8
		2 BO_HP_RELTN_ID	= F8
		2 ENCNTR_ID			= F8
		2 PERSON_ID			= F8
		2 CORSP_ACTIVITY_ID	= F8
		2 BILL_STATUS       = C40
		2 NPI				= C15
	 	2 FIN			 	= C24
	 	2 MRN				= C24
	 	2 BILL_TYPE			= C4
	 	2 JAR_ID      	    = C12
	 	2 FED_TAX_ID		= C10
	 	2 RPT_START_DATE	= C8
	 	2 RPT_END_DATE		= C8
	 	2 RPT_START_DT_TM	= DQ8
	 	2 RPT_END_DT_TM		= DQ8
	 	2 LAST_NAME			= C30
	 	2 FIRST_NAME		= C20
	 	2 STREET			= C40
	 	2 CITY				= C30
	 	2 STATE				= C2
	 	2 ZIP				= C9
	 	2 COUNTRY_CODE		= C4
	 	2 SSN				= C9
	 	2 BIRTH_DATE		= C8
	 	2 SEX				= C1
	 	2 ADMIT_DATE		= C8
	 	2 ADMIT_HOUR		= C2
	 	2 ADMIT_TYPE		= C2
	 	2 ADMIT_SOURCE		= C2
	 	2 DISCH_STATUS		= C2
	 	2 ADMIT_TYPE_CD		= F8
	 	2 ADMIT_SOURCE_CD	= F8
	 	2 DISCH_STATUS_CD	= F8
	 	2 DISCH_DT_TM   	= DQ8
	 	2 REG_DT_TM		   	= DQ8
	 	2 DNR				= C1
        2 ED_IND            = I2
        2 LAB_IND           = I2
	 	2 TOTAL_CHARGES     = F8
	 	2 TOTAL_NON_CHARGES = F8
	 	2 PPS_CODE			= C4
	 	2 ATTENDING_PHYS_NPI= C13
	 	2 ATTENDING_PHYS_ID	= F8
	 	2 ATTENDING_PHYS_CD	= C2
	 	2 ATTENDING_PHYS_LIC= C12
	 	2 OPERATING_PHYS_NPI= C13
	 	2 OPERATING_PHYS_ID	= F8
	 	2 OPERATING_PHYS_CD	= C2
	 	2 OPERATING_PHYS_LIC= C12
	 	2 OTHER1_PHYS_NPI	= C13
	 	2 OTHER1_PHYS_ID	= F8
	 	2 OTHER1_PHYS_CD	= C2
	 	2 OTHER1_PHYS_LIC	= C12
	 	2 OTHER2_PHYS_NPI	= C13
	 	2 OTHER2_PHYS_ID	= F8
	 	2 OTHER2_PHYS_CD	= C2
	 	2 OTHER2_PHYS_LIC	= C12
	 	2 RACE				= C2
		2 EMPLOYER_NAME		= C25
 
	 	2 P_PAYER_ID	    = C4
	 	2 S_PAYER_ID	    = C4
	 	2 T_PAYER_ID	    = C4
 
		2 CREATE_DATE		= C8
		2 ACCIDENT_DATE		= C8
		2 ACCIDENT_CODE     = C2
	 	2 ACCIDENT_STATE	= C2
	 	2 ACCIDENT_STATE_CD	= F8
 
		2 P_HEALTH_PLAN_ID		= C15
		2 P_INSURED_NAME_ID		= F8
		2 P_INSURED_NAME		= C50
		2 P_PAT_RELATIONSHIP	= C2
		2 P_PAT_RELATIONSHIP_CD	= F8
		2 P_INSURED_UNIQUE_ID	= C20
		2 S_HEALTH_PLAN_ID		= C15
		2 S_INSURED_NAME_ID		= F8
		2 S_INSURED_NAME		= C50
		2 S_PAT_RELATIONSHIP	= C2
		2 S_PAT_RELATIONSHIP_CD	= F8
		2 S_INSURED_UNIQUE_ID	= C20
		2 T_HEALTH_PLAN_ID		= C15
		2 T_INSURED_NAME_ID		= F8
		2 T_INSURED_NAME		= C50
		2 T_PAT_RELATIONSHIP	= C2
		2 T_PAT_RELATIONSHIP_CD	= F8
		2 T_INSURED_UNIQUE_ID	= C20
 
		2 P_INSURANCE_GRP_NBR	= C17
		2 S_INSURANCE_GRP_NBR	= C17
		2 T_INSURANCE_GRP_NBR	= C17
 
	 	2 DX_QUALIFIER		= C2
	 	2 DX_CNT            = I2
	 	2 ADMIT_DX_CD		= C7
	 	2 VISIT_REASON_CD	= C21
	 	2 CAUSE_OF_INJURY   = C24
	 	2 PRNPL_DX_CD		= C8
	 	2 OTHER_DX1			= C8
	 	2 OTHER_DX2			= C8
	 	2 OTHER_DX3			= C8
	 	2 OTHER_DX4			= C8
	 	2 OTHER_DX5			= C8
	 	2 OTHER_DX6			= C8
	 	2 OTHER_DX7			= C8
	 	2 OTHER_DX8			= C8
	 	2 OTHER_DX9			= C8
	 	2 OTHER_DX10		= C8
	 	2 OTHER_DX11		= C8
	 	2 OTHER_DX12		= C8
	 	2 OTHER_DX13		= C8
	 	2 OTHER_DX14		= C8
	 	2 OTHER_DX15		= C8
	 	2 OTHER_DX16		= C8
	 	2 OTHER_DX17		= C8
	 	2 PRNPL_PROC_CD_DT	= C15
	 	2 OTHER_PROC_CD_DT1	= C15
	 	2 OTHER_PROC_CD_DT2	= C15
	 	2 OTHER_PROC_CD_DT3	= C15
	 	2 OTHER_PROC_CD_DT4	= C15
	 	2 OTHER_PROC_CD_DT5	= C15
 
		2 LINES[*] ;REVENUE CODE DATA
		 	3 REVENUE_CODE	   = c92
		 	3 RATE_CODES	   = c322
		 	3 SERVICE_DATE	   = c184
		 	3 UNITS_OF_SERVICE = c161
		 	3 CHARGES		   = c230
		 	3 NON_CHARGES	   = c230
 
)WITH PROTECT
 
SET ED_IP_IND = 0
  SET hELEMENT = 0
  SET hXMLFILE = 0
  SET hROOT = 0
  SET hCONTEXT = 0
  SET hCOMMON = 0
  SET hCLAIM = 0
  SET hPAYERS = 0
  SET hPAYER = 0
  SET hSUBSCRIBER = 0
  SET hADDRESSES = 0
  SET hADDRESS = 0
  SET hORGANIZATION = 0
  SET hTYPES	= 0
  SET hPRS = 0
  SET hPR = 0
  SET hPRSNLS = 0
  SET hPRSNL = 0
  SET hDXCODES = 0
  SET hDXCODE = 0
  SET hLINEITEMS = 0
  SET hLINEITEM = 0
  SET hCHG_PROCS = 0
  SET hCHG_PROC = 0
  SET hLINE_PROC = 0
  SET hPERSONS = 0
  SET hENCOUNTER = 0
  SET hACCIDENTS = 0
  SET hACCIDENT = 0
  SET hHEALTHPLANS = 0
  SET hHEALTHPLAN = 0
  SET hCHARGEITEMS = 0
  SET hCHARGE = 0
  SET hTEMP_ITEM = 0
  SET hDRG = 0
  SET hDRGS = 0
  SET hPROCEDURE = 0
  SET ITEM_IDX = 0
  SET PROC_IDX = 0
  SET ORG_IDX = 0
  SET PLAN_IDX = 0
  SET DX_CNT = 0
  SET PROC_CNT = 0
 
  SET TEMP_END_DT_TM = CNVTLOOKAHEAD("7,D", CNVTDATETIME(TEMP_BEG_DT_TM))
 
SELECT INTO "NL:"
FROM PFT_ENCNTR PFE
	,ENCOUNTER E
	,BILLING_ENTITY BE
	,ORGANIZATION_ALIAS OA
	,BENEFIT_ORDER BO
	,BILL_RELTN BRR
	,BILL_REC BR
	,BR_LONG_BLOB_RELTN LBR
	,BO_HP_RELTN BHR
	,LONG_BLOB LB
	,ENCNTR_ALIAS EA
PLAN E
    WHERE E.DISCH_DT_TM >= CNVTDATETIME(TEMP_BEG_DT_TM)
     AND E.DISCH_DT_TM <  CNVTDATETIME(TEMP_END_DT_TM)
 	 AND E.DISCH_DT_TM <  CNVTDATETIME(END_DT_TM)
     AND E.ACTIVE_IND = 1
     AND E.LOC_FACILITY_CD IN (FACILITY1_CD, FACILITY2_CD)
     AND (
         (
          E.ENCNTR_TYPE_CD IN (INPATIENT_CD, PREADMIT_CD) AND FILE_TYPE = "IP"
         )
         OR
         (
          E.ENCNTR_TYPE_CD NOT IN (INPATIENT_CD, PREADMIT_CD) AND FILE_TYPE = "OP"
         )
         )
JOIN EA
    WHERE EA.ENCNTR_ID = E.ENCNTR_ID
      AND EA.ENCNTR_ALIAS_TYPE_CD = FINNBR_CD
      AND EA.END_EFFECTIVE_DT_TM > SYSDATE
      AND EA.ACTIVE_IND = 1
      and (
          ea.ALIAS = test_fin
          or
          test_fin = ""
          )
;;stop-here
JOIN PFE
	WHERE PFE.ENCNTR_ID = E.ENCNTR_ID
  	  AND PFE.ACTIVE_IND = 1
	  AND PFE.ACTIVE_STATUS_DT_TM <= CNVTDATETIME(CURDATE,CURTIME3)
JOIN BO
	WHERE BO.PFT_ENCNTR_ID = PFE.PFT_ENCNTR_ID
	  AND BO.ACTIVE_IND = 1
	  AND BO.BO_STATUS_CD != CANCELED_CD
	  AND BO.BO_STATUS_CD != INVALID_CD
JOIN BHR
	WHERE BHR.BENEFIT_ORDER_ID = BO.BENEFIT_ORDER_ID
	  AND BHR.ACTIVE_IND = 1
  	  AND BHR.PRIORITY_SEQ = 1
	  AND BHR.RELTN_TYPE_CD = COBBILLING_CD ;Exclude IME claims
JOIN BRR
    WHERE BRR.PARENT_ENTITY_ID = BHR.BO_HP_RELTN_ID
      AND BRR.PARENT_ENTITY_NAME = "BO_HP_RELTN"
      AND BRR.ACTIVE_IND = 1
JOIN BR
	WHERE BR.CORSP_ACTIVITY_ID = BRR.CORSP_ACTIVITY_ID
 	  AND BR.BILL_CLASS_CD = CLAIM_CD ; 627732.00
 	  AND BR.ACTIVE_IND = 1
	  AND BR.MEDIA_SUB_TYPE_CD = MEDIA_SUB_CD ;508410352.00;837i_5010<-WHAT IS USED
	  AND BR.BILL_STATUS_CD = TRANSMITTED_CD
;	  AND BR.BILL_STATUS_CD in (TRANSMITTEDX_CD, TRANSMITTED_CD)
;stop-here
;and br.BILL_NBR_DISP = "3000665726"
JOIN BE
	WHERE BE.BILLING_ENTITY_ID = BR.BILLING_ENTITY_ID
  	  AND BE.ACTIVE_IND = 1
      AND BE.BE_NAME_KEY IN ("MAURYREGIONALMEDICALCENTER", "WAYNEMEDICALCENTER", "MARSHALLMEDICALCENTER")
JOIN OA
	WHERE OA.ORGANIZATION_ID = outerjoin(BE.ORGANIZATION_ID)
	  AND OA.ORG_ALIAS_TYPE_CD = outerjoin(ORG_NPI_ALIAS_CD)
	  AND OA.ACTIVE_IND = OUTERJOIN(1)
	  AND OA.END_EFFECTIVE_DT_TM > OUTERJOIN(SYSDATE)
JOIN LBR
	WHERE LBR.CORSP_ACTIVITY_ID = BR.CORSP_ACTIVITY_ID
	  AND LBR.DATA_TYPE_FLAG = 1
	  AND LBR.ACTIVE_IND = 1
JOIN LB
	WHERE LB.LONG_BLOB_ID = LBR.LONG_BLOB_ID
ORDER BY PFE.ENCNTR_ID, BR.CORSP_ACTIVITY_ID, LB.LONG_BLOB_ID
HEAD PFE.ENCNTR_ID
	PREV_SEQ = 0
 	E_CNT = 0
HEAD BR.CORSP_ACTIVITY_ID
	;Some encounters have multiple claims that need to be submitted.  For non-recurring encounters, the counter appended to the FIN
	;is set to 001 and any and any additional claims increments the 100s column of three digits (e.g. 101, 201, etc)
    IF (PREV_SEQ = 0)
		E_CNT = E_CNT + 1
		PREV_SEQ = E_CNT
	ELSE
		E_CNT = E_CNT + 100
	ENDIF
 
	CNT = CNT + 1
	IF (MOD(CNT,100) = 1)
		STAT = ALTERLIST(UB04_ARR->QUAL,CNT+100)
 	ENDIF
 
	STAT = InitializeATypeList(CNT)
 
	UB04_ARR->QUAL[CNT].BILL_STATUS 	  = UAR_GET_CODE_DISPLAY(BR.BILL_STATUS_CD)
	UB04_ARR->QUAL[CNT].BO_HP_RELTN_ID 	  = BHR.BO_HP_RELTN_ID
	UB04_ARR->QUAL[CNT].PFT_ENCNTR_ID 	  = PFE.PFT_ENCNTR_ID
 	UB04_ARR->QUAL[CNT].ENCNTR_ID		  = E.ENCNTR_ID
 	UB04_ARR->QUAL[CNT].DISCH_DT_TM       = E.DISCH_DT_TM
	UB04_ARR->QUAL[CNT].DISCH_STATUS_CD   = E.DISCH_DISPOSITION_CD
	UB04_ARR->QUAL[CNT].REG_DT_TM		  = E.REG_DT_TM
	UB04_ARR->QUAL[CNT].CORSP_ACTIVITY_ID = LBR.CORSP_ACTIVITY_ID
	UB04_ARR->QUAL[CNT].NPI				  = SUBSTRING(1,15,CNVTALIAS(OA.ALIAS,OA.ALIAS_POOL_CD))
;	UB04_ARR->QUAL[CNT].FIN				  = TRIM(SUBSTRING(1,24,CNVTALIAS(EA.ALIAS,EA.ALIAS_POOL_CD)))
	UB04_ARR->QUAL[CNT].FIN				  = CONCAT(TRIM(SUBSTRING(1,21,CNVTALIAS(EA.ALIAS,EA.ALIAS_POOL_CD))),
	                                               FORMAT(CNVTSTRING(E_CNT),"###;rp0"))
;stop-here
	if (BE.BE_NAME_KEY = "MAURYREGIONALMEDICALCENTER")
	  UB04_ARR->QUAL[CNT].FED_TAX_ID = "626002623"
  	  UB04_ARR->QUAL[CNT].JAR_ID	 = "60224"
	elseif (BE.BE_NAME_KEY = "WAYNEMEDICALCENTER")
	  UB04_ARR->QUAL[CNT].FED_TAX_ID = "621605071"
  	  UB04_ARR->QUAL[CNT].JAR_ID	 = "91214"
	elseif (BE.BE_NAME_KEY = "MARSHALLMEDICALCENTER")
	  UB04_ARR->QUAL[CNT].FED_TAX_ID = "621590713"
  	  UB04_ARR->QUAL[CNT].JAR_ID	 =  "59244"
	endif
 
HEAD LB.LONG_BLOB_ID
	OUTBUF = FILLSTRING (32767 , " " )
 
	;BUFFGET() logic is needed because some of the XML is greater than 36k
	;OUTBUF = " "
    ;IMAGEDATASIZE = BLOBGETLEN(LB.LONG_BLOB)  ;fetch full length of blob
    ;STAT = MEMREALLOC(OUTBUF,1,BUILD("C",IMAGEDATASIZE)) ;resize using full length to fetch with one blobget call
    ;TOTLEN = BLOBGET(OUTBUF,0,LB.LONG_BLOB)
 
DETAIL
	RETLEN = 1
 	OFFSET = 0
 
	WHILE(RETLEN > 0)
 		RETLEN = BLOBGET (OUTBUF,OFFSET,LB.LONG_BLOB)
 		OFFSET = OFFSET + RETLEN
 		UB04_ARR->QUAL[CNT].XML = NOTRIM(CONCAT(NOTRIM(UB04_ARR->QUAL[CNT].XML),NOTRIM(SUBSTRING(1,RETLEN,OUTBUF ))))
	ENDWHILE
WITH COUNTER, RDBARRAYFETCH = 1
 
;;Recurring encounters
/*
IF (FILE_TYPE = "OP")
  SET YEAR_STR = SUBSTRING(3,2,TRIM(CNVTSTRING(YEAR_VAR)))
 
  SELECT INTO "NL:"
  FROM PFT_ENCNTR PFE
	,ENCOUNTER E
	,BILLING_ENTITY BE
	,ORGANIZATION_ALIAS OA
	,BENEFIT_ORDER BO
	,BILL_RELTN BRR
	,BILL_REC BR
	,BR_LONG_BLOB_RELTN LBR
	,BO_HP_RELTN BHR
	,LONG_BLOB LB
  PLAN E
    WHERE E.ACTIVE_IND = 1
      AND E.LOC_FACILITY_CD IN (FACILITY1_CD, FACILITY2_CD)
      AND E.ENCNTR_TYPE_CD = RECURRING_CD
      AND E.REG_DT_TM <= CNVTDATETIME(END_DT_TM)
  JOIN PFE
	WHERE PFE.ENCNTR_ID = E.ENCNTR_ID
  	  AND PFE.ACTIVE_IND = 1
	  AND PFE.ACTIVE_STATUS_DT_TM <= CNVTDATETIME(CURDATE,CURTIME3)
	  AND PFE.RECUR_CURRENT_YEAR = YEAR_VAR
	  AND PFE.RECUR_CURRENT_MONTH >= BEG_MONTH
	  AND PFE.RECUR_CURRENT_MONTH <= END_MONTH
  JOIN BO
	WHERE BO.PFT_ENCNTR_ID = PFE.PFT_ENCNTR_ID
	  AND BO.ACTIVE_IND = 1
  JOIN BHR
	WHERE BHR.BENEFIT_ORDER_ID = BO.BENEFIT_ORDER_ID
	  AND BHR.ACTIVE_IND = 1
  	  AND BHR.PRIORITY_SEQ = 1
	  AND BHR.RELTN_TYPE_CD = COBBILLING_CD ;Exclude IME claims
  JOIN BRR
    WHERE BRR.PARENT_ENTITY_ID = BHR.BO_HP_RELTN_ID
      AND BRR.PARENT_ENTITY_NAME = "BO_HP_RELTN"
  	  AND BRR.ACTIVE_IND = 1
  JOIN BR
	WHERE BR.CORSP_ACTIVITY_ID = BRR.CORSP_ACTIVITY_ID
 	  AND BR.BILL_CLASS_CD = CLAIM_CD ; 627732.00
 	  AND BR.ACTIVE_IND = 1
	  AND BR.MEDIA_SUB_TYPE_CD = MEDIA_SUB_CD ;508410352.00;837i_5010<-WHAT IS USED
	  AND BR.BILL_STATUS_CD = TRANSMITTED_CD
;	  AND BR.BILL_STATUS_CD in (TRANSMITTEDX_CD, TRANSMITTED_CD)
  JOIN BE
	WHERE BE.BILLING_ENTITY_ID = BR.BILLING_ENTITY_ID
  	  AND BE.ACTIVE_IND = 1
      AND BE.BE_NAME_KEY IN ("MAURYREGIONALMEDICALCENTER", "WAYNEMEDICALCENTER", "MARSHALLMEDICALCENTER")
  JOIN OA
	WHERE OA.ORGANIZATION_ID = outerjoin(BE.ORGANIZATION_ID)
	  AND OA.ORG_ALIAS_TYPE_CD = outerjoin(ORG_NPI_ALIAS_CD)
	  AND OA.ACTIVE_IND = OUTERJOIN(1)
	  AND OA.END_EFFECTIVE_DT_TM > OUTERJOIN(SYSDATE)
  JOIN LBR
	WHERE LBR.CORSP_ACTIVITY_ID = BR.CORSP_ACTIVITY_ID
	  AND LBR.DATA_TYPE_FLAG = 1
	  AND LBR.ACTIVE_IND = 1
  JOIN LB
	WHERE LB.LONG_BLOB_ID = LBR.LONG_BLOB_ID
  ORDER BY PFE.ENCNTR_ID, BR.CORSP_ACTIVITY_ID, LB.LONG_BLOB_ID
  HEAD PFE.ENCNTR_ID
 	DO_NOTHING = 0
  HEAD BR.CORSP_ACTIVITY_ID
	CNT = CNT + 1
	IF (MOD(CNT,100) = 1)
		STAT = ALTERLIST(UB04_ARR->QUAL,CNT+100)
 	ENDIF
 
	STAT = InitializeATypeList(CNT)
 
	UB04_ARR->QUAL[CNT].BILL_STATUS 	  = UAR_GET_CODE_DISPLAY(BR.BILL_STATUS_CD)
	UB04_ARR->QUAL[CNT].BO_HP_RELTN_ID 	  = BHR.BO_HP_RELTN_ID
	UB04_ARR->QUAL[CNT].PFT_ENCNTR_ID 	  = PFE.PFT_ENCNTR_ID
 	UB04_ARR->QUAL[CNT].ENCNTR_ID		  = E.ENCNTR_ID
 	UB04_ARR->QUAL[CNT].DISCH_DT_TM       = E.DISCH_DT_TM
	UB04_ARR->QUAL[CNT].REG_DT_TM		  = E.REG_DT_TM
	UB04_ARR->QUAL[CNT].CORSP_ACTIVITY_ID = LBR.CORSP_ACTIVITY_ID
	UB04_ARR->QUAL[CNT].NPI				  = SUBSTRING(1,15,CNVTALIAS(OA.ALIAS,OA.ALIAS_POOL_CD))
	UB04_ARR->QUAL[CNT].FIN				  = TRIM(SUBSTRING(1,24,REPLACE(PFE.PFT_ENCNTR_ALIAS, YEAR_STR, "", 2)))
 
	if (BE.BE_NAME_KEY = "MAURYREGIONALMEDICALCENTER")
	  UB04_ARR->QUAL[CNT].FED_TAX_ID = "626002623"
  	  UB04_ARR->QUAL[CNT].JAR_ID	 = "60224"
	elseif (BE.BE_NAME_KEY = "WAYNEMEDICALCENTER")
	  UB04_ARR->QUAL[CNT].FED_TAX_ID = "621605071"
  	  UB04_ARR->QUAL[CNT].JAR_ID	 = "91214"
	elseif (BE.BE_NAME_KEY = "MARSHALLMEDICALCENTER")
	  UB04_ARR->QUAL[CNT].FED_TAX_ID = "621590713"
  	  UB04_ARR->QUAL[CNT].JAR_ID	 =  "59244"
	endif
 
  HEAD LB.LONG_BLOB_ID
	OUTBUF = FILLSTRING (32767 , " " )
 
  DETAIL
	RETLEN = 1
 	OFFSET = 0
 
	WHILE(RETLEN > 0)
 		RETLEN = BLOBGET (OUTBUF,OFFSET,LB.LONG_BLOB)
 		OFFSET = OFFSET + RETLEN
 		UB04_ARR->QUAL[CNT].XML = NOTRIM(CONCAT(NOTRIM(UB04_ARR->QUAL[CNT].XML),NOTRIM(SUBSTRING(1,RETLEN,OUTBUF ))))
	ENDWHILE
 
  WITH COUNTER, TIME = 800, RDBARRAYFETCH = 1
ENDIF
*/
 
;Self-Pay Encounters
SET SELF_PAY_IND = 0
SELECT INTO "NL:"
FROM PFT_ENCNTR PFE
	,ENCOUNTER E
	,PERSON P
	,BILLING_ENTITY BE
	,ORGANIZATION_ALIAS OA
	,ENCNTR_ALIAS EA
	,ENCNTR_PLAN_RELTN EPR
	,HEALTH_PLAN HP
	,PERSON_ORG_RELTN POR
	,ORGANIZATION O
	,PERSON_PERSON_RELTN PPR
PLAN E
WHERE E.DISCH_DT_TM >= CNVTDATETIME(TEMP_BEG_DT_TM)
      AND E.DISCH_DT_TM <  CNVTDATETIME(TEMP_END_DT_TM)
      AND E.DISCH_DT_TM <  CNVTDATETIME(END_DT_TM)
     AND E.ACTIVE_IND = 1
     AND E.FINANCIAL_CLASS_CD = SELF_PAY_CD
     AND E.LOC_FACILITY_CD IN (FACILITY1_CD, FACILITY2_CD)
     AND (
         (
          E.ENCNTR_TYPE_CD IN (INPATIENT_CD, PREADMIT_CD) AND FILE_TYPE = "IP"
         )
         OR
         (
          E.ENCNTR_TYPE_CD NOT IN (INPATIENT_CD, PREADMIT_CD) AND FILE_TYPE = "OP"
         )
         )
JOIN EA
	WHERE EA.ENCNTR_ID = E.ENCNTR_ID
	  AND EA.ENCNTR_ALIAS_TYPE_CD = FINNBR_CD
	  AND EA.END_EFFECTIVE_DT_TM > SYSDATE
	  AND EA.ACTIVE_IND = 1
      and (
          ea.ALIAS = test_fin
          or
          test_fin = ""
          )
;stop-here
JOIN PFE
	WHERE PFE.ENCNTR_ID = E.ENCNTR_ID
  	  AND PFE.ACTIVE_IND = 1
	  AND PFE.ACTIVE_STATUS_DT_TM <= CNVTDATETIME(CURDATE,CURTIME3)
JOIN EPR
	WHERE EPR.ENCNTR_ID = E.ENCNTR_ID
	  AND EPR.ACTIVE_IND = 1
	  AND EPR.PRIORITY_SEQ = 1
	  AND EPR.END_EFFECTIVE_DT_TM > SYSDATE
JOIN HP
	WHERE HP.HEALTH_PLAN_ID = EPR.HEALTH_PLAN_ID
	  AND HP.PLAN_NAME_KEY = "UNINSUREDSELFPAY"
JOIN P
	WHERE P.PERSON_ID = E.PERSON_ID
JOIN BE
	WHERE BE.BILLING_ENTITY_ID = PFE.BILLING_ENTITY_ID
  	  AND BE.ACTIVE_IND = 1
      AND BE.BE_NAME_KEY IN ("MAURYREGIONALMEDICALCENTER", "WAYNEMEDICALCENTER", "MARSHALLMEDICALCENTER")
JOIN OA
	WHERE OA.ORGANIZATION_ID = OUTERJOIN(BE.ORGANIZATION_ID)
	  AND OA.ORG_ALIAS_TYPE_CD = OUTERJOIN(ORG_NPI_ALIAS_CD)
	  AND OA.ACTIVE_IND = OUTERJOIN(1)
	  AND OA.END_EFFECTIVE_DT_TM > OUTERJOIN(SYSDATE)
JOIN POR
    WHERE POR.PERSON_ID = OUTERJOIN(P.PERSON_ID)
      AND POR.ACTIVE_IND = OUTERJOIN(1)
      AND POR.END_EFFECTIVE_DT_TM > OUTERJOIN(SYSDATE)
      AND POR.PERSON_ORG_RELTN_CD = OUTERJOIN(EMPLOYER_CD)
JOIN O
    WHERE O.ORGANIZATION_ID = OUTERJOIN(POR.ORGANIZATION_ID)
JOIN PPR
    WHERE PPR.PERSON_ID = OUTERJOIN(P.PERSON_ID)
      AND PPR.ACTIVE_IND = OUTERJOIN(1)
      AND PPR.END_EFFECTIVE_DT_TM > OUTERJOIN(SYSDATE)
      AND PPR.PERSON_RELTN_TYPE_CD = OUTERJOIN(INSURED_CD)
ORDER BY PFE.ENCNTR_ID, POR.PRIORITY_SEQ, PPR.PRIORITY_SEQ
HEAD REPORT
  SELF_PAY_IND = 1
HEAD PFE.ENCNTR_ID
 	E_CNT = 1
	CNT = CNT + 1
	IF (MOD(CNT,100) = 1)
		STAT = ALTERLIST(UB04_ARR->QUAL,CNT+100)
 	ENDIF
 
	STAT = InitializeATypeList(CNT)
 
	UB04_ARR->QUAL[CNT].SELF_IND         = 1
	UB04_ARR->QUAL[CNT].PFT_ENCNTR_ID 	 = PFE.PFT_ENCNTR_ID
 	UB04_ARR->QUAL[CNT].ENCNTR_ID		 = E.ENCNTR_ID
 	UB04_ARR->QUAL[CNT].DISCH_DT_TM      = E.DISCH_DT_TM
	UB04_ARR->QUAL[CNT].REG_DT_TM		 = E.REG_DT_TM
	UB04_ARR->QUAL[CNT].NPI				 = SUBSTRING(1,15,CNVTALIAS(OA.ALIAS,OA.ALIAS_POOL_CD))
	UB04_ARR->QUAL[CNT].FIN				 = CONCAT(TRIM(SUBSTRING(1,21,CNVTALIAS(EA.ALIAS,EA.ALIAS_POOL_CD))),
	                                              FORMAT(CNVTSTRING(E_CNT),"###;rp0"))
	UB04_ARR->QUAL[CNT].ADMIT_DATE		 = FORMAT(E.REG_DT_TM, "MMDDYYYY;;D")
	UB04_ARR->QUAL[CNT].ADMIT_HOUR		 = FORMAT(E.REG_DT_TM, "HH;;D")
	UB04_ARR->QUAL[CNT].ADMIT_TYPE_CD 	 = E.ADMIT_TYPE_CD
	UB04_ARR->QUAL[CNT].ADMIT_SOURCE_CD  = E.ADMIT_SRC_CD
	UB04_ARR->QUAL[CNT].DISCH_STATUS_CD  = E.DISCH_DISPOSITION_CD
 
    UB04_ARR->QUAL[CNT].RPT_START_DATE   = FORMAT(E.REG_DT_TM, "MMDDYYYY;;D")
    UB04_ARR->QUAL[CNT].RPT_END_DATE     = FORMAT(E.DISCH_DT_TM, "MMDDYYYY;;D")
 
	if (BE.BE_NAME_KEY = "MAURYREGIONALMEDICALCENTER")
	  UB04_ARR->QUAL[CNT].FED_TAX_ID = "626002623"
  	  UB04_ARR->QUAL[CNT].JAR_ID	 = "60224"
	elseif (BE.BE_NAME_KEY = "WAYNEMEDICALCENTER")
	  UB04_ARR->QUAL[CNT].FED_TAX_ID = "621605071"
  	  UB04_ARR->QUAL[CNT].JAR_ID	 = "91214"
	elseif (BE.BE_NAME_KEY = "MARSHALLMEDICALCENTER")
	  UB04_ARR->QUAL[CNT].FED_TAX_ID = "621590713"
  	  UB04_ARR->QUAL[CNT].JAR_ID	 =  "59244"
	endif
 
    IF (PPR.RELATED_PERSON_ID > 0)
  	  UB04_ARR->QUAL[CNT].P_INSURED_NAME_ID	  = PPR.RELATED_PERSON_ID
  	ELSE
  	  UB04_ARR->QUAL[CNT].P_INSURED_NAME	  = PPR.FT_REL_PERSON_NAME
  	ENDIF
 
    IF (PPR.RELATED_PERSON_RELTN_CD > 0)
	  UB04_ARR->QUAL[CNT].P_PAT_RELATIONSHIP_CD = PPR.RELATED_PERSON_RELTN_CD
	ELSE
	  UB04_ARR->QUAL[CNT].P_PAT_RELATIONSHIP_CD = PPR.PERSON_RELTN_CD
    ENDIF
 
    IF (O.ORGANIZATION_ID > 0)
 	  UB04_ARR->QUAL[CNT].EMPLOYER_NAME		  = O.ORG_NAME
 	ELSE
 	  UB04_ARR->QUAL[CNT].EMPLOYER_NAME		  = POR.FT_ORG_NAME
    ENDIF
 
    IF (FILE_TYPE = "IP")
      UB04_ARR->QUAL[CNT].BILL_TYPE = "0111"
    ELSE
      UB04_ARR->QUAL[CNT].BILL_TYPE = "0131"
    ENDIF
 
    IF (E.MED_SERVICE_CD = SWING_BED_CD)
      IF(MONTH(E.DISCH_DT_TM) = MONTH(E.REG_DT_TM))
        UB04_ARR->QUAL[CNT].BILL_TYPE = "0181"
      ELSE
        UB04_ARR->QUAL[CNT].BILL_TYPE = "0184"
      ENDIF
    ENDIF
 
	UB04_ARR->QUAL[CNT].P_PAYER_ID	     	  = "P"
	UB04_ARR->QUAL[CNT].P_HEALTH_PLAN_ID 	  = TRIM(CNVTSTRING(HP.HEALTH_PLAN_ID))
	UB04_ARR->QUAL[CNT].P_INSURED_UNIQUE_ID	  = EPR.MEMBER_NBR
	UB04_ARR->QUAL[CNT].P_INSURANCE_GRP_NBR	  = EPR.GROUP_NBR
WITH COUNTER
 
;;Recurring encounters - self-pay
/*
IF (FILE_TYPE = "OP")
  SELECT INTO "NL:"
  FROM PFT_ENCNTR PFE
	,ENCOUNTER E
	,PERSON P
	,BILLING_ENTITY BE
	,ORGANIZATION_ALIAS OA
	,ENCNTR_ALIAS EA
	,ENCNTR_PLAN_RELTN EPR
	,HEALTH_PLAN HP
	,PERSON_ORG_RELTN POR
	,ORGANIZATION O
	,PERSON_PERSON_RELTN PPR
  PLAN E
    WHERE E.ACTIVE_IND = 1
      AND E.LOC_FACILITY_CD IN (FACILITY1_CD, FACILITY2_CD)
      AND E.ENCNTR_TYPE_CD = RECURRING_CD
      AND E.FINANCIAL_CLASS_CD = SELF_PAY_CD
      AND E.REG_DT_TM <= CNVTDATETIME(END_DT_TM)
  JOIN PFE
	WHERE PFE.ENCNTR_ID = E.ENCNTR_ID
  	  AND PFE.ACTIVE_IND = 1
	  AND PFE.ACTIVE_STATUS_DT_TM <= CNVTDATETIME(CURDATE,CURTIME3)
	  AND PFE.RECUR_CURRENT_YEAR = YEAR_VAR
	  AND PFE.RECUR_CURRENT_MONTH >= BEG_MONTH
	  AND PFE.RECUR_CURRENT_MONTH <= END_MONTH
  JOIN EA
	WHERE EA.ENCNTR_ID = E.ENCNTR_ID
	  AND EA.ENCNTR_ALIAS_TYPE_CD = FINNBR_CD
	  AND EA.END_EFFECTIVE_DT_TM > SYSDATE
	  AND EA.ACTIVE_IND = 1
;and ea.ALIAS = test_fin
;;stop-here
  JOIN EPR
	WHERE EPR.ENCNTR_ID = E.ENCNTR_ID
	  AND EPR.ACTIVE_IND = 1
	  AND EPR.PRIORITY_SEQ = 1
	  AND EPR.END_EFFECTIVE_DT_TM > SYSDATE
  JOIN HP
	WHERE HP.HEALTH_PLAN_ID = EPR.HEALTH_PLAN_ID
	  AND HP.PLAN_NAME_KEY = "UNINSUREDSELFPAY"
  JOIN P
	WHERE P.PERSON_ID = E.PERSON_ID
  JOIN BE
	WHERE BE.BILLING_ENTITY_ID = PFE.BILLING_ENTITY_ID
  	  AND BE.ACTIVE_IND = 1
      AND BE.BE_NAME_KEY IN ("MAURYREGIONALMEDICALCENTER", "WAYNEMEDICALCENTER", "MARSHALLMEDICALCENTER")
  JOIN OA
	WHERE OA.ORGANIZATION_ID = OUTERJOIN(BE.ORGANIZATION_ID)
	  AND OA.ORG_ALIAS_TYPE_CD = OUTERJOIN(ORG_NPI_ALIAS_CD)
	  AND OA.ACTIVE_IND = OUTERJOIN(1)
	  AND OA.END_EFFECTIVE_DT_TM > OUTERJOIN(SYSDATE)
  JOIN POR
    WHERE POR.PERSON_ID = OUTERJOIN(P.PERSON_ID)
      AND POR.ACTIVE_IND = OUTERJOIN(1)
      AND POR.END_EFFECTIVE_DT_TM > OUTERJOIN(SYSDATE)
      AND POR.PERSON_ORG_RELTN_CD = OUTERJOIN(EMPLOYER_CD)
  JOIN O
    WHERE O.ORGANIZATION_ID = OUTERJOIN(POR.ORGANIZATION_ID)
  JOIN PPR
    WHERE PPR.PERSON_ID = OUTERJOIN(P.PERSON_ID)
      AND PPR.ACTIVE_IND = OUTERJOIN(1)
      AND PPR.END_EFFECTIVE_DT_TM > OUTERJOIN(SYSDATE)
      AND PPR.PERSON_RELTN_TYPE_CD = OUTERJOIN(INSURED_CD)
  ORDER BY PFE.ENCNTR_ID, POR.PRIORITY_SEQ, PPR.PRIORITY_SEQ
  HEAD REPORT
    SELF_PAY_IND = 1
  HEAD PFE.ENCNTR_ID
	CNT = CNT + 1
	IF (MOD(CNT,100) = 1)
		STAT = ALTERLIST(UB04_ARR->QUAL,CNT+100)
 	ENDIF
 
	STAT = InitializeATypeList(CNT)
 
	UB04_ARR->QUAL[CNT].SELF_IND         = 1
	UB04_ARR->QUAL[CNT].PFT_ENCNTR_ID 	 = PFE.PFT_ENCNTR_ID
 	UB04_ARR->QUAL[CNT].ENCNTR_ID		 = E.ENCNTR_ID
 	UB04_ARR->QUAL[CNT].DISCH_DT_TM      = E.DISCH_DT_TM
	UB04_ARR->QUAL[CNT].REG_DT_TM		 = E.REG_DT_TM
	UB04_ARR->QUAL[CNT].NPI				 = SUBSTRING(1,15,CNVTALIAS(OA.ALIAS,OA.ALIAS_POOL_CD))
	UB04_ARR->QUAL[CNT].FIN	     		 = TRIM(SUBSTRING(1,24,REPLACE(PFE.PFT_ENCNTR_ALIAS, YEAR_STR, "", 2)))
 
	UB04_ARR->QUAL[CNT].ADMIT_DATE		 = FORMAT(E.REG_DT_TM, "MMDDYYYY;;D")
	UB04_ARR->QUAL[CNT].ADMIT_HOUR		 = FORMAT(E.REG_DT_TM, "HH;;D")
	UB04_ARR->QUAL[CNT].ADMIT_TYPE_CD 	 = E.ADMIT_TYPE_CD
	UB04_ARR->QUAL[CNT].ADMIT_SOURCE_CD  = E.ADMIT_SRC_CD
	UB04_ARR->QUAL[CNT].DISCH_STATUS_CD  = E.DISCH_DISPOSITION_CD
 
	if (BE.BE_NAME_KEY = "MAURYREGIONALMEDICALCENTER")
	  UB04_ARR->QUAL[CNT].FED_TAX_ID = "626002623"
  	  UB04_ARR->QUAL[CNT].JAR_ID	 = "60224"
	elseif (BE.BE_NAME_KEY = "WAYNEMEDICALCENTER")
	  UB04_ARR->QUAL[CNT].FED_TAX_ID = "621605071"
  	  UB04_ARR->QUAL[CNT].JAR_ID	 = "91214"
	elseif (BE.BE_NAME_KEY = "MARSHALLMEDICALCENTER")
	  UB04_ARR->QUAL[CNT].FED_TAX_ID = "621590713"
  	  UB04_ARR->QUAL[CNT].JAR_ID	 =  "59244"
	endif
 
    IF (PPR.RELATED_PERSON_ID > 0)
  	  UB04_ARR->QUAL[CNT].P_INSURED_NAME_ID	  = PPR.RELATED_PERSON_ID
  	ELSE
  	  UB04_ARR->QUAL[CNT].P_INSURED_NAME	  = PPR.FT_REL_PERSON_NAME
  	ENDIF
 
    IF (PPR.RELATED_PERSON_RELTN_CD > 0)
	  UB04_ARR->QUAL[CNT].P_PAT_RELATIONSHIP_CD = PPR.RELATED_PERSON_RELTN_CD
	ELSE
	  UB04_ARR->QUAL[CNT].P_PAT_RELATIONSHIP_CD = PPR.PERSON_RELTN_CD
    ENDIF
 
    IF (O.ORGANIZATION_ID > 0)
 	  UB04_ARR->QUAL[CNT].EMPLOYER_NAME		  = O.ORG_NAME
 	ELSE
 	  UB04_ARR->QUAL[CNT].EMPLOYER_NAME		  = POR.FT_ORG_NAME
    ENDIF
 
	UB04_ARR->QUAL[CNT].P_PAYER_ID	     	  = "P"
	UB04_ARR->QUAL[CNT].P_HEALTH_PLAN_ID 	  = TRIM(CNVTSTRING(HP.HEALTH_PLAN_ID))
	UB04_ARR->QUAL[CNT].P_INSURED_UNIQUE_ID	  = EPR.MEMBER_NBR
	UB04_ARR->QUAL[CNT].P_INSURANCE_GRP_NBR	  = EPR.GROUP_NBR
  WITH COUNTER
ENDIF
*/
 
SET	STAT = ALTERLIST(UB04_ARR->QUAL, CNT)
SET CNT = 0
 
IF (SELF_PAY_IND = 1)
;statement info
  SELECT INTO "NL:"
  FROM (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
	,BENEFIT_ORDER BO
	,BO_HP_RELTN BHR
	,BILL_RELTN BRR
	,BILL_REC BR
  PLAN D1
  WHERE UB04_ARR->QUAL[D1.SEQ].SELF_IND = 1
    AND D1.SEQ > 0
  JOIN BO
	WHERE BO.PFT_ENCNTR_ID = UB04_ARR->QUAL[D1.SEQ].PFT_ENCNTR_ID
	  AND BO.ACTIVE_IND = 1
  JOIN BHR
	WHERE BHR.BENEFIT_ORDER_ID = BO.BENEFIT_ORDER_ID
	  AND BHR.ACTIVE_IND = 1
  	  AND BHR.PRIORITY_SEQ = 1
  JOIN BRR
    WHERE BRR.PARENT_ENTITY_ID = BHR.BO_HP_RELTN_ID
      AND BRR.PARENT_ENTITY_NAME = "BO_HP_RELTN"
  	  AND BRR.ACTIVE_IND = 1
  JOIN BR
	WHERE BR.CORSP_ACTIVITY_ID = BRR.CORSP_ACTIVITY_ID
 	  AND BR.BILL_CLASS_CD = STATEMENT_CD ; 627735.00
 	  AND BR.ACTIVE_IND = 1
	  AND BR.BILL_STATUS_CD = SUBMITTED_CD ; 626114.00
      AND BR.GEN_DT_TM >= CNVTDATETIME(BEG_DT_TM)
      AND BR.GEN_DT_TM <  CNVTDATETIME(END_DT_TM)
  ORDER BY D1.SEQ, BR.GEN_DT_TM
  HEAD D1.SEQ
	CNT = D1.SEQ
    UB04_ARR->QUAL[CNT].CREATE_DATE = FORMAT(BR.GEN_DT_TM, "MMDDYYYY;;D")
  WITH NOCOUNTER
 
;providers
  SELECT INTO "NL:"
  FROM (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
	,ENCNTR_PRSNL_RELTN EPR1
  PLAN D1
  WHERE UB04_ARR->QUAL[D1.SEQ].SELF_IND = 1
    AND D1.SEQ > 0
  JOIN EPR1
  WHERE EPR1.ENCNTR_ID = UB04_ARR->QUAL[D1.SEQ].ENCNTR_ID
	AND EPR1.ENCNTR_PRSNL_R_CD IN (ADMITTING_CD,ATTENDING_CD,CONSULT_CD)
    AND EPR1.ACTIVE_IND = 1
    AND EPR1.END_EFFECTIVE_DT_TM > SYSDATE
  ORDER BY D1.SEQ, EPR1.ENCNTR_PRSNL_R_CD
  HEAD D1.SEQ
	CNT = D1.SEQ
  HEAD EPR1.ENCNTR_PRSNL_R_CD
	IF (EPR1.ENCNTR_PRSNL_R_CD = ATTENDING_CD)
		UB04_ARR->QUAL[CNT].ATTENDING_PHYS_ID = EPR1.PRSNL_PERSON_ID
	ELSEIF (EPR1.ENCNTR_PRSNL_R_CD = ADMITTING_CD)
		UB04_ARR->QUAL[CNT].OTHER1_PHYS_ID	  = EPR1.PRSNL_PERSON_ID
    ELSEIF (EPR1.ENCNTR_PRSNL_R_CD = CONSULT_CD)
		UB04_ARR->QUAL[CNT].OTHER2_PHYS_ID	  = EPR1.PRSNL_PERSON_ID
	ENDIF
  WITH NOCOUNTER
 
  SELECT INTO "NL:"
  FROM (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
	,SURGICAL_CASE SC
  PLAN D1
  WHERE UB04_ARR->QUAL[D1.SEQ].SELF_IND = 1
    AND D1.SEQ > 0
  JOIN SC
  WHERE SC.ENCNTR_ID = UB04_ARR->QUAL[D1.SEQ].ENCNTR_ID
	AND SC.SURGEON_PRSNL_ID > 0
    AND SC.ACTIVE_IND = 1
    AND SC.CANCEL_REASON_CD = 0
  ORDER BY D1.SEQ, SC.SURG_CASE_ID DESC
  HEAD D1.SEQ
	CNT = D1.SEQ
	UB04_ARR->QUAL[CNT].OPERATING_PHYS_ID = SC.SURGEON_PRSNL_ID
  WITH NOCOUNTER
 
;accident code
  SELECT INTO "NL:"
  FROM (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
	,ENCNTR_OCCURRENCE_CODE E
	,CODE_VALUE CV
  PLAN D1
  WHERE UB04_ARR->QUAL[D1.SEQ].SELF_IND = 1
    AND D1.SEQ > 0
  JOIN E
  WHERE E.ENCNTR_ID = UB04_ARR->QUAL[D1.SEQ].ENCNTR_ID
    AND E.ACTIVE_IND = 1
  JOIN CV
  WHERE CV.CODE_VALUE = E.OCCURRENCE_CD
    AND CV.ACTIVE_IND = 1
    AND CV.CODE_SET = 21792
  DETAIL
	CNT = D1.SEQ
	IF (CV.CDF_MEANING IN ("01", "02", "03", "04", "05"))
      UB04_ARR->QUAL[CNT].ACCIDENT_CODE = CV.CDF_MEANING
    ELSE
      UB04_ARR->QUAL[CNT].ACCIDENT_CODE = "99"
    ENDIF
    UB04_ARR->QUAL[CNT].ACCIDENT_DATE = FORMAT(E.OCCURRENCE_DT_TM, "MMDDYYYY;;D")
  WITH NOCOUNTER
 
;dx info
  SELECT INTO "NL:"
  FROM (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
	,DIAGNOSIS D
	,NOMENCLATURE N
  PLAN D1
  WHERE UB04_ARR->QUAL[D1.SEQ].SELF_IND = 1
    AND D1.SEQ > 0
  JOIN D
  WHERE D.ENCNTR_ID = UB04_ARR->QUAL[D1.SEQ].ENCNTR_ID
    AND D.ACTIVE_IND = 1
    AND D.DIAG_TYPE_CD in (ADM_DX_CD, FINAL_DX_CD, RFV_DX_CD)
    AND D.END_EFFECTIVE_DT_TM > SYSDATE
  JOIN N
  WHERE N.NOMENCLATURE_ID = D.NOMENCLATURE_ID
    AND N.ACTIVE_IND = 1
    AND N.SOURCE_VOCABULARY_CD IN (ICD10CM_SOURCE_CD, ICD10PCS_SOURCE_CD)
  ORDER D1.SEQ, D.DIAG_TYPE_CD, D.DIAG_PRIORITY
  HEAD D1.SEQ
	CNT = D1.SEQ
    DX_CNT = UB04_ARR->QUAL[CNT].DX_CNT
    UB04_ARR->QUAL[CNT].DX_QUALIFIER = "0"
    RFV_CNT = 0
  HEAD D.DIAG_TYPE_CD
    IF (SUBSTRING(1,1, UAR_GET_CODE_DISPLAY(D.PRESENT_ON_ADMIT_CD)) in ("Y", "U", "W", "N"))
      POA = SUBSTRING(1, 1, UAR_GET_CODE_DISPLAY(D.PRESENT_ON_ADMIT_CD))
    ELSE
      POA = "U"
    ENDIF
  	IF (D.DIAG_TYPE_CD = ADM_DX_CD)
  	  UB04_ARR->QUAL[CNT].ADMIT_DX_CD = SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", ""))
  	ELSEIF (D.DIAG_TYPE_CD = FINAL_DX_CD)
      UB04_ARR->QUAL[CNT].PRNPL_DX_CD = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
    ENDIF
  DETAIL
;   CAUSE_OF_INJURY   = C24
  	IF (D.DIAG_TYPE_CD = RFV_DX_CD)
  	  IF (RFV_CNT < 3)
 	    RFV_CNT = RFV_CNT + 1
	 	UB04_ARR->QUAL[CNT].VISIT_REASON_CD =
	 	  CONCAT(SUBSTRING(1, 7*(RFV_CNT-1), UB04_ARR->QUAL[CNT].VISIT_REASON_CD),
	 	         SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")))
	  ENDIF
  	ELSEIF (D.DIAG_TYPE_CD = FINAL_DX_CD)
      IF (DX_CNT < 17)
        IF (SUBSTRING(1, 7, UB04_ARR->QUAL[CNT].PRNPL_DX_CD) != SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")))
          DX_CNT = DX_CNT + 1
          IF (SUBSTRING(1,1, UAR_GET_CODE_DISPLAY(D.PRESENT_ON_ADMIT_CD)) in ("Y", "U", "W", "N"))
            POA = SUBSTRING(1, 1, UAR_GET_CODE_DISPLAY(D.PRESENT_ON_ADMIT_CD))
          ELSE
            POA = "U"
          ENDIF
          CASE (DX_CNT)
	 				OF 1:  UB04_ARR->QUAL[CNT].OTHER_DX1  = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 2:  UB04_ARR->QUAL[CNT].OTHER_DX2  = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 3:  UB04_ARR->QUAL[CNT].OTHER_DX3  = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 4:  UB04_ARR->QUAL[CNT].OTHER_DX4  = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 5:  UB04_ARR->QUAL[CNT].OTHER_DX5  = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 6:  UB04_ARR->QUAL[CNT].OTHER_DX6  = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 7:  UB04_ARR->QUAL[CNT].OTHER_DX7  = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 8:  UB04_ARR->QUAL[CNT].OTHER_DX8  = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 9:  UB04_ARR->QUAL[CNT].OTHER_DX9  = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 10: UB04_ARR->QUAL[CNT].OTHER_DX10 = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 11: UB04_ARR->QUAL[CNT].OTHER_DX11 = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 12: UB04_ARR->QUAL[CNT].OTHER_DX12 = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 13: UB04_ARR->QUAL[CNT].OTHER_DX13 = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 14: UB04_ARR->QUAL[CNT].OTHER_DX14 = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 15: UB04_ARR->QUAL[CNT].OTHER_DX15 = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 16: UB04_ARR->QUAL[CNT].OTHER_DX16 = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
	 				OF 17: UB04_ARR->QUAL[CNT].OTHER_DX17 = CONCAT(SUBSTRING(1, 7, REPLACE(N.SOURCE_IDENTIFIER, ".", "")), POA)
 	      ENDCASE
 	    ENDIF
      ENDIF
    ENDIF
  WITH NOCOUNTER, skipreport = 0
 
;charge info
  SELECT INTO "NL:"
  FROM (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
	,CHARGE C, CHARGE_MOD CM, CODE_VALUE CV
  PLAN D1
  WHERE UB04_ARR->QUAL[D1.SEQ].SELF_IND = 1
    AND D1.SEQ > 0
  JOIN C
  WHERE C.ENCNTR_ID = UB04_ARR->QUAL[D1.SEQ].ENCNTR_ID
    AND C.ACTIVE_IND = 1
    AND C.PROCESS_FLG IN (100, 999)
    AND C.ITEM_EXTENDED_PRICE != 0
    AND C.SUSPENSE_RSN_CD = 0
  JOIN CM
  WHERE CM.CHARGE_ITEM_ID = C.CHARGE_ITEM_ID
    AND CM.ACTIVE_IND = 1
    AND CM.FIELD6 > " "
  JOIN CV
  WHERE CV.CODE_VALUE = CM.FIELD1_ID
    AND CV.ACTIVE_IND = 1
    AND CV.CODE_SET = 14002
    AND CV.CDF_MEANING IN ("REVENUE", "CPT4", "ICD", "HCPCS")
   /* OR (CV.CDF_MEANING = "CDM_SCHED";dkh added
		and TEXTLEN(CM.FIELD6)=5));dkh added*/
 ORDER D1.SEQ, C.CHARGE_ITEM_ID, CV.CDF_MEANING, CM.FIELD2_ID, CM.CHARGE_MOD_ID
  HEAD REPORT
    TEMP_CHG = FILLSTRING(10," ")
  HEAD D1.SEQ
    CNT  = 0
    DX_CNT = 0
    CHG_CNT = 0
    I = D1.SEQ
    LAB_IND = 1
    DX_CNT = UB04_ARR->QUAL[I].DX_CNT
  HEAD C.CHARGE_ITEM_ID
    REV_IND = 0
    CPT4_IND = 0
    CHG_CNT = CHG_CNT + 1
    IF (C.ITEM_EXTENDED_PRICE < 0)
      TEMP_CHG = CONCAT("-", FORMAT(REPLACE(CNVTSTRING(ROUND(ABS(C.ITEM_EXTENDED_PRICE),2)*100), ".", ""), "#########;rp0"))
    ELSE
      TEMP_CHG = FORMAT(REPLACE(CNVTSTRING(ROUND(C.ITEM_EXTENDED_PRICE,2)*100), ".", ""), "##########;rp0")
    ENDIF
    IF (MOD(CHG_CNT, 23) = 1)
      CHG_CNT = 1
      CNT = CNT + 1
      STAT = ALTERLIST(UB04_ARR->QUAL[I].LINES, CNT)
      STAT = InitializeLinesList(I, CNT)
    ENDIF
    UB04_ARR->QUAL[I].LINES[CNT].SERVICE_DATE =
      CONCAT(SUBSTRING(1,8*(CHG_CNT-1),UB04_ARR->QUAL[I].LINES[CNT].SERVICE_DATE), FORMAT(C.SERVICE_DT_TM, "MMDDYYYY;;D"))
  HEAD CV.CDF_MEANING
    DO_NOTHING = 0
  HEAD CM.FIELD2_ID
    DO_NOTHING = 0
  HEAD CM.CHARGE_MOD_ID
    IF (CV.CDF_MEANING = "REVENUE")
      REV_IND = 1
 	  IF (CM.FIELD6 IN ("0300", "0301", "0302", "0303", "0304", "0305", "0306",
 					    "0307", "0309", "0310", "0311", "0312", "0314", "0319"))
        IF (LAB_IND = 1)
  		  UB04_ARR->QUAL[I].LAB_IND = 1
  		ENDIF
      ELSE
        LAB_IND = 0
  		UB04_ARR->QUAL[I].LAB_IND = 0
      ENDIF
 
      IF (CNVTREAL(CM.FIELD6) >= 450 AND CNVTREAL(CM.FIELD6) <= 459)
        UB04_ARR->QUAL[I].ED_IND = 1
       IF (FILE_TYPE = "IP" AND CNVTUPPER($FACILITY) = "MMC");dkh added 12/2
        	ED_IP_IND = 1;dkh added 12/2
        ;UB04_ARR->QUAL[I].ED_IP_IND = 1;dkh added 12/2
        ENDIF;dkh added 12/2
;        UB04_ARR->QUAL[I].DEL_IND = 1
;       ENDIF
;stop-here
      ENDIF
 
      IF (CNVTREAL(CM.FIELD6) = 762)
        UB04_ARR->QUAL[I].OBS_IND = 1
      ENDIF
 
 	  UB04_ARR->QUAL[I].LINES[CNT].REVENUE_CODE =
 	    CONCAT(SUBSTRING(1, 4*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].REVENUE_CODE), SUBSTRING(1, 4, CM.FIELD6))
 
	  IF (CM.FIELD6 = "0637")
       	UB04_ARR->QUAL[I].TOTAL_NON_CHARGES = UB04_ARR->QUAL[I].TOTAL_NON_CHARGES + ROUND(C.ITEM_EXTENDED_PRICE,2)*100
  		UB04_ARR->QUAL[I].LINES[CNT].NON_CHARGES =
  		  CONCAT(SUBSTRING(1, 10*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].NON_CHARGES), TEMP_CHG)
	  ELSE
  	    UB04_ARR->QUAL[I].LINES[CNT].NON_CHARGES =
	      CONCAT(SUBSTRING(1, 10*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].NON_CHARGES), "0000000000")
      ENDIF
 
      UB04_ARR->QUAL[I].TOTAL_CHARGES = UB04_ARR->QUAL[I].TOTAL_CHARGES + ROUND(C.ITEM_EXTENDED_PRICE,2)*100
  	  UB04_ARR->QUAL[I].LINES[CNT].CHARGES = CONCAT(SUBSTRING(1, 10*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].CHARGES), TEMP_CHG)
 
 	  IF (CM.FIELD6 = "0360" AND FILE_TYPE = "OP")
 		UB04_ARR->QUAL[I].LINES[CNT].UNITS_OF_SERVICE =
 		  CONCAT(SUBSTRING(1, 7*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].UNITS_OF_SERVICE), "      1")
      ELSE
 		UB04_ARR->QUAL[I].LINES[CNT].UNITS_OF_SERVICE =
 		  CONCAT(SUBSTRING(1, 7*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].UNITS_OF_SERVICE), FORMAT(C.ITEM_QUANTITY, "#######;r"))
      ENDIF
 
    ELSEIF (CV.CDF_MEANING = "CPT4")
      IF (CPT4_IND = 0)
        CPT4_IND = 1
        UB04_ARR->QUAL[I].LINES[CNT].RATE_CODES =
		  CONCAT(SUBSTRING(1, 14*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].RATE_CODES), SUBSTRING(1, 14, CM.FIELD6))
      ENDIF
    ELSEIF (CV.CDF_MEANING = "HCPCS")
      IF (CPT4_IND = 0)
        CPT4_IND = 1
        UB04_ARR->QUAL[I].LINES[CNT].RATE_CODES =
		  CONCAT(SUBSTRING(1, 14*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].RATE_CODES), SUBSTRING(1, 14, CM.FIELD6))
      ENDIF
 
/*   ELSEIF (CV.CDF_MEANING = "CDM_SCHED");dkh added
      IF (CPT4_IND = 0);dkh added
        CPT4_IND = 1;dkh added
        UB04_ARR->QUAL[I].LINES[CNT].RATE_CODES =;dkh added
		  CONCAT(SUBSTRING(1, 14*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].RATE_CODES), SUBSTRING(1, 14, CM.FIELD6));dkh added
      ENDIF;dkh added
 */
    ELSEIF (CV.CDF_MEANING = "ICD")
	  UB04_ARR->QUAL[I].DX_QUALIFIER = "0"
      IF (DX_CNT < 17)
        IF (SUBSTRING(1, 7, UB04_ARR->QUAL[CNT].PRNPL_DX_CD) != SUBSTRING(1, 7, REPLACE(CM.FIELD6, ".", "")))
          DX_CNT = DX_CNT + 1
          CASE (DX_CNT)
	 				OF 1:  UB04_ARR->QUAL[I].OTHER_DX1  = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 2:  UB04_ARR->QUAL[I].OTHER_DX2  = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 3:  UB04_ARR->QUAL[I].OTHER_DX3  = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 4:  UB04_ARR->QUAL[I].OTHER_DX4  = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 5:  UB04_ARR->QUAL[I].OTHER_DX5  = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 6:  UB04_ARR->QUAL[I].OTHER_DX6  = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 7:  UB04_ARR->QUAL[I].OTHER_DX7  = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 8:  UB04_ARR->QUAL[I].OTHER_DX8  = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 9:  UB04_ARR->QUAL[I].OTHER_DX9  = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 10: UB04_ARR->QUAL[I].OTHER_DX10 = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 11: UB04_ARR->QUAL[I].OTHER_DX11 = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 12: UB04_ARR->QUAL[I].OTHER_DX12 = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 13: UB04_ARR->QUAL[I].OTHER_DX13 = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 14: UB04_ARR->QUAL[I].OTHER_DX14 = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 15: UB04_ARR->QUAL[I].OTHER_DX15 = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 16: UB04_ARR->QUAL[I].OTHER_DX16 = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
	 				OF 17: UB04_ARR->QUAL[I].OTHER_DX17 = CONCAT(SUBSTRING(1, 7, CM.FIELD6), "U")
  	 	  ENDCASE
  	 	ENDIF
	  ENDIF
    ENDIF
 
  FOOT C.CHARGE_ITEM_ID
    IF (REV_IND = 0)
      UB04_ARR->QUAL[I].TOTAL_CHARGES = UB04_ARR->QUAL[I].TOTAL_CHARGES + ROUND(C.ITEM_EXTENDED_PRICE,2)*100
 
 	  UB04_ARR->QUAL[I].LINES[CNT].NON_CHARGES =
	      CONCAT(SUBSTRING(1, 10*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].NON_CHARGES), "0000000000")
  	  UB04_ARR->QUAL[I].LINES[CNT].CHARGES = CONCAT(SUBSTRING(1, 10*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].CHARGES), TEMP_CHG)
 
	  UB04_ARR->QUAL[I].LINES[CNT].UNITS_OF_SERVICE =
 		  CONCAT(SUBSTRING(1, 7*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].UNITS_OF_SERVICE), FORMAT(C.ITEM_QUANTITY, "#######;r"))
  	ENDIF
 
  FOOT C.ENCNTR_ID
    UB04_ARR->QUAL[I].DX_CNT = DX_CNT
 
    IF (FILE_TYPE = "OP" and UB04_ARR->QUAL[I].LAB_IND = 1);dkh added file_type = "OP" and
	  UB04_ARR->QUAL[I].BILL_TYPE = "0141"
    ENDIF
  WITH NOCOUNTER
 
;procedure info
  SELECT INTO "NL:"
  FROM (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
	,PROCEDURE P
	,NOMENCLATURE N
  PLAN D1
  WHERE UB04_ARR->QUAL[D1.SEQ].SELF_IND = 1
    AND D1.SEQ > 0
  JOIN P
  WHERE P.ENCNTR_ID = UB04_ARR->QUAL[D1.SEQ].ENCNTR_ID
    AND P.ACTIVE_IND = 1
    AND P.END_EFFECTIVE_DT_TM > SYSDATE
  JOIN N
  WHERE N.NOMENCLATURE_ID = P.NOMENCLATURE_ID
    AND N.ACTIVE_IND = 1
    AND N.SOURCE_VOCABULARY_CD = ICD10PCS_SOURCE_CD
    AND N.PRINCIPLE_TYPE_CD = PROC_CD
  ORDER D1.SEQ, P.PROC_PRIORITY
  HEAD D1.SEQ
	CNT = D1.SEQ
    PROC_CNT = 0
    UB04_ARR->QUAL[CNT].PRNPL_PROC_CD_DT = CONCAT(SUBSTRING(1, 7, N.SOURCE_IDENTIFIER), FORMAT(P.PROC_DT_TM, "MMDDYYYY;;D"))
  HEAD P.PROC_PRIORITY
    IF (PROC_CNT < 5)
      IF (SUBSTRING(1, 7, UB04_ARR->QUAL[CNT].PRNPL_PROC_CD_DT) != SUBSTRING(1, 7, N.SOURCE_IDENTIFIER))
        PROC_CNT = PROC_CNT + 1
        CASE (PROC_CNT)
 				OF 1:  UB04_ARR->QUAL[CNT].OTHER_PROC_CD_DT1 = CONCAT(SUBSTRING(1, 7, N.SOURCE_IDENTIFIER),
 																	  FORMAT(P.PROC_DT_TM, "MMDDYYYY;;D"))
 				OF 2:  UB04_ARR->QUAL[CNT].OTHER_PROC_CD_DT2 = CONCAT(SUBSTRING(1, 7, N.SOURCE_IDENTIFIER),
 																	  FORMAT(P.PROC_DT_TM, "MMDDYYYY;;D"))
 				OF 3:  UB04_ARR->QUAL[CNT].OTHER_PROC_CD_DT3 = CONCAT(SUBSTRING(1, 7, N.SOURCE_IDENTIFIER),
 																	  FORMAT(P.PROC_DT_TM, "MMDDYYYY;;D"))
 				OF 4:  UB04_ARR->QUAL[CNT].OTHER_PROC_CD_DT4 = CONCAT(SUBSTRING(1, 7, N.SOURCE_IDENTIFIER),
 																	  FORMAT(P.PROC_DT_TM, "MMDDYYYY;;D"))
 				OF 5:  UB04_ARR->QUAL[CNT].OTHER_PROC_CD_DT5 = CONCAT(SUBSTRING(1, 7, N.SOURCE_IDENTIFIER),
 																	  FORMAT(P.PROC_DT_TM, "MMDDYYYY;;D"))
        ENDCASE
      ENDIF
    ENDIF
  WITH NOCOUNTER
ENDIF  ; SELF-IND = 1
 
  SET BAD_CNT = 0
;stop-here
 
IF (SIZE(UB04_ARR->QUAL,5) > 0)
 FOR (I = 1 TO SIZE(UB04_ARR->QUAL,5))
  IF (UB04_ARR->QUAL[I].SELF_IND = 0)
/*   IF (FILE_TYPE = "IP" AND CNVTUPPER($FACILITY) = "MMC")
    IF (I = 1)
      SET BEG_IDX = 1
      SET ED_IP_IND = 0
    ELSE
      IF (UB04_ARR->QUAL[I-1].PFT_ENCNTR_ID != UB04_ARR->QUAL[I].PFT_ENCNTR_ID)
        IF (I-1 > BEG_IDX AND ED_IP_IND = 1)
          SET KEEP_IDX = 0
          SET DEL_IDX = 0
          FOR (II = BEG_IDX TO I-1)
            IF (UB04_ARR->QUAL[II].DEL_IND = 1)
              IF (DEL_IDX = 0)
                SET DEL_IDX = II
              ENDIF
            ELSE
              IF (KEEP_IDX = 0 AND UB04_ARR->QUAL[II].FLU_IND = 0)
                SET KEEP_IDX = II
              ENDIF
            ENDIF
          ENDFOR
 
          IF (KEEP_IDX > 0 AND DEL_IDX > 0)
            SET STAT = MergeRecords(KEEP_IDX, DEL_IDX)
          ELSEIF (DEL_IDX > 0)
            SET UB04_ARR->QUAL[DEL_IDX].DEL_IND = 0
          ENDIF
        ENDIF
 
        SET BEG_IDX = I
        SET ED_IP_IND = 0
      ENDIF
    ENDIF
   ENDIF*/
 
/*********************************************************************************************************
*               Populate additional data using the claims XML file
*********************************************************************************************************/
 
  ;Parse the XML document and get the ROOT handle (first/top-most xml tab such as "claimData")
	SET hROOT = 0.0
    SET hXMLFILE = 0.0
	SET hROOT = PARSEXMLBUFFER(UB04_ARR->QUAL[I].XML, hXMLFILE)
 
     if (hroot <= 0.0 or hXMLFILE <= 0.0)
      set bad_cnt = bad_cnt + 1
      call echo("root")
      call echo("root")
      call echo(I)
      call echo(bad_cnt)
      call echo(hroot)
      call echo(hXMLFILE)
      call echo("root")
      call echo("root")
     endif
;;stop-here
 
   IF (hROOT > 0 AND hXMLFILE > 0)
 	;*****************************--GET THE <CONTEXT> DATA--***************************;
 	SET hCONTEXT = GETCLAIMDATACONTEXTHANDLE(hROOT)
 	IF (hCONTEXT > 0)
        SET UB04_ARR->QUAL[I].CREATE_DATE =
          FORMAT(CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hCONTEXT,"createDateTime"),"YYYY-MM-DD"),0),"MMDDYYYY;;D")
 
 		SET hTEMP_ITEM = 0
 		IF(UAR_XML_FINDCHILDNODE (hCONTEXT, "institutionalClaim", hTEMP_ITEM) = SC_OK)
 			IF (SIZE(GETCHILDNODEVALUE(hTEMP_ITEM,"typeOfBill"),1) > 0)
				SET UB04_ARR->QUAL[I].BILL_TYPE = GETCHILDNODEVALUE(hTEMP_ITEM,"typeOfBill")
				IF (UB04_ARR->QUAL[I].BILL_TYPE = "0121")
				  SET UB04_ARR->QUAL[I].FLU_IND = 1
				ENDIF
			ENDIF
 		ENDIF
 
        IF (FILE_TYPE = "IP")
  		  SET UB04_ARR->QUAL[I].RPT_START_DATE =
 				FORMAT(CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hCONTEXT,"serviceBeginDate"),"YYYY-MM-DD"),0),"MMDDYYYY;;D")
		  SET UB04_ARR->QUAL[I].RPT_END_DATE =
 				FORMAT(CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hCONTEXT,"serviceEndDate"),"YYYY-MM-DD"),0),"MMDDYYYY;;D")
 
  		  SET UB04_ARR->QUAL[I].RPT_START_DT_TM =
  			    CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hCONTEXT,"serviceBeginDate"),"YYYY-MM-DD"),0)
		  SET UB04_ARR->QUAL[I].RPT_END_DT_TM =
				CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hCONTEXT,"serviceEndDate"),"YYYY-MM-DD"),0)
        ENDIF
 	ENDIF
 
  	SET ITEM_IDX = 1
	SET hPROCEDURE = GETCLAIMDATAPROCEDUREHANDLE(hROOT, ITEM_IDX)
	SET PROC_CNT = 0
	WHILE(hPROCEDURE != 0)
		;Populate the procedures
		IF (TRIM(GETCHILDNODEATTRIBUTEVALUE(hPROCEDURE,"sourceVocabulary","meaning")) = "ICD10-PCS" AND PROC_CNT < 5)
  		  SET VALUE_STR = FILLSTRING(7," ")
		  SET DATE_STR = FILLSTRING(8," ")
		  SET PROC_STR = FILLSTRING(15," ")
 
		  SET VALUE_STR = GETCHILDNODEVALUE(hPROCEDURE,"value")
		  SET DATE_STR = FORMAT(CNVTDATETIME(CNVTDATE2(SUBSTRING(1,10,GETCHILDNODEVALUE(hPROCEDURE,"dateTime"))
										   		     ,"YYYY-MM-DD"),0),"MMDDYYYY;;D")
		  SET PROC_STR = CONCAT(VALUE_STR,DATE_STR)
 
		  IF (GETCHILDNODEVALUE(hPROCEDURE,"prioritySequence") = "1")
			SET UB04_ARR->QUAL[I].PRNPL_PROC_CD_DT = PROC_STR
		  ELSE
			SET PROC_CNT = PROC_CNT + 1
			CASE (PROC_CNT)
				OF 1: SET UB04_ARR->QUAL[I].OTHER_PROC_CD_DT1 = PROC_STR
				OF 2: SET UB04_ARR->QUAL[I].OTHER_PROC_CD_DT2 = PROC_STR
				OF 3: SET UB04_ARR->QUAL[I].OTHER_PROC_CD_DT3 = PROC_STR
				OF 4: SET UB04_ARR->QUAL[I].OTHER_PROC_CD_DT4 = PROC_STR
				OF 5: SET UB04_ARR->QUAL[I].OTHER_PROC_CD_DT5 = PROC_STR
			ENDCASE
		  ENDIF
        ENDIF
 
        IF (TRIM(GETCHILDNODEATTRIBUTEVALUE(hPROCEDURE,"sourceVocabulary","meaning")) in ("ICD10-PCS", "CPT4"))
          SET hPRS = 0
          SET hPR = 0
 	      IF (UAR_XML_FINDCHILDNODE(hPROCEDURE, "personnelRelationships", hPRS) = 1)
  	        SET HPR_IDX = 1
		    SET hPR = GETCHILDELEMENTOCCURRENCEHANDLE (hPRS, "personnelRelationship", HPR_IDX)
            WHILE (hPR > 0)
  		      IF (GETCHILDNODEATTRIBUTEVALUE(hPR,"relationshipType","meaning") = "SURGEON")
  		        IF (UB04_ARR->QUAL[I].OPERATING_PHYS_ID = 0)
  			      SET UB04_ARR->QUAL[I].OPERATING_PHYS_ID = CNVTREAL(GETATTRIBUTEVALUE(hPR,"personnelId"))
  		        ELSEIF (UB04_ARR->QUAL[I].OTHER1_PHYS_ID = 0
  		            AND UB04_ARR->QUAL[I].OPERATING_PHYS_ID != CNVTREAL(GETATTRIBUTEVALUE(hPR,"personnelId")))
  			      SET UB04_ARR->QUAL[I].OTHER1_PHYS_ID = CNVTREAL(GETATTRIBUTEVALUE(hPR,"personnelId"))
                ENDIF
              ENDIF
 
			  SET HPR_IDX = HPR_IDX + 1
  		      SET hPR = GETCHILDELEMENTOCCURRENCEHANDLE (hPRS, "personnelRelationship", HPR_IDX)
            ENDWHILE
          ENDIF
        ENDIF
 
		SET ITEM_IDX = ITEM_IDX + 1
		SET hPROCEDURE = GETCLAIMDATAPROCEDUREHANDLE (hROOT,ITEM_IDX)
	ENDWHILE
 
 
 	;Get encounter specific data that needs to come from the outboundAlias
	SET hENCOUNTER = GETCLAIMDATAENCOUNTERHANDLE (hROOT)
 
 	IF (hENCOUNTER > 0)
		SET UB04_ARR->QUAL[I].ADMIT_TYPE_CD   = CNVTREAL(GETCHILDNODEATTRIBUTEVALUE(hENCOUNTER,"admitType","id"))
		SET UB04_ARR->QUAL[I].ADMIT_SOURCE_CD = CNVTREAL(GETCHILDNODEATTRIBUTEVALUE(hENCOUNTER,"admissionSource","id"))
        IF (CNVTREAL(GETCHILDNODEATTRIBUTEVALUE(hENCOUNTER,"dischargeDisposition","id")) > 0)
		  SET UB04_ARR->QUAL[I].DISCH_STATUS_CD = CNVTREAL(GETCHILDNODEATTRIBUTEVALUE(hENCOUNTER,"dischargeDisposition","id"))
        ENDIF
 
		SET UB04_ARR->QUAL[I].ADMIT_DATE =
		  FORMAT(CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hENCOUNTER,"admissionDateTime"),"YYYY-MM-DD"),0),"MMDDYYYY;;D")
		SET UB04_ARR->QUAL[I].ADMIT_HOUR = SUBSTRING(12, 2, GETCHILDNODEVALUE(hENCOUNTER,"admissionDateTime"))
 
		;Get the accidents
		SET hACCIDENTS = 0
 		IF(UAR_XML_FINDCHILDNODE(hENCOUNTER,"accidents",hACCIDENTS)= SC_OK)
			SET hACCIDENT = 0
			IF(UAR_XML_FINDCHILDNODE(hACCIDENTS,"accident",hACCIDENT)= SC_OK)
				SET UB04_ARR->QUAL[I].ACCIDENT_STATE = GETCHILDNODEATTRIBUTEVALUE(hACCIDENT,"accidentState","outboundAlias")
				SET UB04_ARR->QUAL[I].ACCIDENT_CODE  = GETCHILDNODEATTRIBUTEVALUE(hACCIDENT,"type","outboundAlias")
				IF (UB04_ARR->QUAL[I].ACCIDENT_CODE = "06")
                  SET UB04_ARR->QUAL[I].ACCIDENT_CODE = "99"
                ENDIF
                SET UB04_ARR->QUAL[I].ACCIDENT_DATE =
                  FORMAT(CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hACCIDENT,"accidentDateTime"),"YYYY-MM-DD"),0),"MMDDYYYY;;D")
			ENDIF
		ENDIF
 
		;get the PPS Code
		SET hDGRS = 0
 		IF(UAR_XML_FINDCHILDNODE(hENCOUNTER,"diagnosisRelatedGroups",hDGRS)= SC_OK)
			SET ITEM_IDX = 1
			SET hDGR = GETCHILDELEMENTOCCURRENCEHANDLE (hDGRS,"diagnosisRelatedGroup",1)
			WHILE (hDGR != 0)
				IF (GETCHILDNODEVALUE(hDGR,"prioritySequence") = "1"
				AND GETCHILDNODEATTRIBUTEVALUE(hDGR,"sourceVocabulary","meaning") = "MSDRG")
					SET UB04_ARR->QUAL[I].PPS_CODE = GETCHILDNODEVALUE(hDGR,"value")
				ENDIF
				SET ITEM_IDX = ITEM_IDX + 1
				SET hDGR = GETCHILDELEMENTOCCURRENCEHANDLE (hDGRS, "diagnosisRelatedGroup", ITEM_IDX)
			ENDWHILE
		ENDIF
 
;;;dx/proc codes
  	    IF(UAR_XML_FINDCHILDNODE (hENCOUNTER, "diagnosisCodes", hDXCODES) = SC_OK)
    	  SET DX_CNT = 0
   	      SET RFV_CNT = 0
 	      SET ECI_CNT = 0
	      SET ITEM_IDX = 1
		  SET hDXCODE = GETCHILDELEMENTOCCURRENCEHANDLE (hDXCODES, "diagnosisCode", ITEM_IDX)
 
		  IF (SUBSTRING(1, 5, GETCHILDNODEATTRIBUTEVALUE(hDXCODE,"sourceVocabulary","meaning")) = "ICD10")
			SET UB04_ARR->QUAL[I].DX_QUALIFIER = "0"
		  ELSE
			SET UB04_ARR->QUAL[I].DX_QUALIFIER = "9"
		  ENDIF
 
    	;Each DX can contain 17 OTHER dx codes
    	  WHILE(hDXCODE != 0 and DX_CNT < 17)
		;Build the dx code string including the Present on Admit 8th position
   		    SET POA = " "
		    SET POA = GETCHILDNODEATTRIBUTEVALUE(hDXCODE,"presentOnAdmit","outboundAlias")
 
 		    SET TEMP_DX_STR = FILLSTRING(8," ")
 		    SET TEMP_DX_STR = REPLACE(GETCHILDNODEVALUE (hDXCODE,"value"), ".", "")
 		    SET TEMP_DX_STR = CONCAT(SUBSTRING(1,7,TEMP_DX_STR), POA)
 
		;Only "FINAL" dx codes go in the OTHER_DX fields except for the first sequence
		    IF (GETCHILDNODEATTRIBUTEVALUE(hDXCODE,"type","displayKey") = "FINAL")
 			  IF (GETCHILDNODEVALUE(hDXCODE,"eCodeInd") = "TRUE" AND ECI_CNT < 3)
 			    SET ECI_CNT = ECI_CNT + 1
	 			SET UB04_ARR->QUAL[I].CAUSE_OF_INJURY =
	 			  CONCAT(SUBSTRING(1, 8*(ECI_CNT-1), UB04_ARR->QUAL[I].CAUSE_OF_INJURY), TEMP_DX_STR)
	 		  ENDIF
 
 			  IF (CNVTINT(GETCHILDNODEVALUE(hDXCODE,"prioritySequence")) = 1)
				SET UB04_ARR->QUAL[I].PRNPL_DX_CD = TEMP_DX_STR
 			  ELSEIF (CNVTINT(GETCHILDNODEVALUE(hDXCODE,"prioritySequence")) = 2 and UB04_ARR->QUAL[I].PRNPL_DX_CD = NULL)
				SET UB04_ARR->QUAL[I].PRNPL_DX_CD = TEMP_DX_STR
 			  ELSEIF (CNVTINT(GETCHILDNODEVALUE(hDXCODE,"prioritySequence")) = 3 and UB04_ARR->QUAL[I].PRNPL_DX_CD = NULL)
				SET UB04_ARR->QUAL[I].PRNPL_DX_CD = TEMP_DX_STR
 			  ELSEIF (CNVTINT(GETCHILDNODEVALUE(hDXCODE,"prioritySequence")) = 4 and UB04_ARR->QUAL[I].PRNPL_DX_CD = NULL)
				SET UB04_ARR->QUAL[I].PRNPL_DX_CD = TEMP_DX_STR
 			  ELSEIF (CNVTINT(GETCHILDNODEVALUE(hDXCODE,"prioritySequence")) = 5 and UB04_ARR->QUAL[I].PRNPL_DX_CD = NULL)
				SET UB04_ARR->QUAL[I].PRNPL_DX_CD = TEMP_DX_STR
			  ELSEIF (GETCHILDNODEVALUE(hDXCODE,"eCodeInd") != "TRUE")
	 			SET DX_CNT = DX_CNT + 1
	 			CASE (DX_CNT)
	 				OF 1:  SET UB04_ARR->QUAL[I].OTHER_DX1  = TEMP_DX_STR
	 				OF 2:  SET UB04_ARR->QUAL[I].OTHER_DX2  = TEMP_DX_STR
	 				OF 3:  SET UB04_ARR->QUAL[I].OTHER_DX3  = TEMP_DX_STR
	 				OF 4:  SET UB04_ARR->QUAL[I].OTHER_DX4  = TEMP_DX_STR
	 				OF 5:  SET UB04_ARR->QUAL[I].OTHER_DX5  = TEMP_DX_STR
	 				OF 6:  SET UB04_ARR->QUAL[I].OTHER_DX6  = TEMP_DX_STR
	 				OF 7:  SET UB04_ARR->QUAL[I].OTHER_DX7  = TEMP_DX_STR
	 				OF 8:  SET UB04_ARR->QUAL[I].OTHER_DX8  = TEMP_DX_STR
	 				OF 9:  SET UB04_ARR->QUAL[I].OTHER_DX9  = TEMP_DX_STR
	 				OF 10: SET UB04_ARR->QUAL[I].OTHER_DX10 = TEMP_DX_STR
	 				OF 11: SET UB04_ARR->QUAL[I].OTHER_DX11 = TEMP_DX_STR
	 				OF 12: SET UB04_ARR->QUAL[I].OTHER_DX12 = TEMP_DX_STR
	 				OF 13: SET UB04_ARR->QUAL[I].OTHER_DX13 = TEMP_DX_STR
	 				OF 14: SET UB04_ARR->QUAL[I].OTHER_DX14 = TEMP_DX_STR
	 				OF 15: SET UB04_ARR->QUAL[I].OTHER_DX15 = TEMP_DX_STR
	 				OF 16: SET UB04_ARR->QUAL[I].OTHER_DX16 = TEMP_DX_STR
	 				OF 17: SET UB04_ARR->QUAL[I].OTHER_DX17 = TEMP_DX_STR
	 			ENDCASE
	 		  ENDIF
 		    ELSE
 			  IF(TRIM(GETCHILDNODEATTRIBUTEVALUE(hDXCODE,"type","displayKey")) = "ADMITTING")
		 		SET UB04_ARR->QUAL[I].ADMIT_DX_CD = SUBSTRING(1, 7, TEMP_DX_STR)
    			IF (RFV_CNT < 3)
 			      SET RFV_CNT = RFV_CNT + 1
	 			  SET UB04_ARR->QUAL[I].VISIT_REASON_CD =
	 			    CONCAT(SUBSTRING(1, 7*(RFV_CNT-1), UB04_ARR->QUAL[I].VISIT_REASON_CD), SUBSTRING(1, 7, TEMP_DX_STR))
	 			ENDIF
 
		 	  ELSEIF(TRIM(GETCHILDNODEATTRIBUTEVALUE(hDXCODE,"type","displayKey")) = "REASONFORVISIT")
 			      SET RFV_CNT = RFV_CNT + 1
	 			  SET UB04_ARR->QUAL[I].VISIT_REASON_CD = SUBSTRING(1, 7, TEMP_DX_STR)
		 	  ENDIF
 		    ENDIF
 
  		    SET ITEM_IDX = ITEM_IDX+1
		    SET hDXCODE = GETCHILDELEMENTOCCURRENCEHANDLE (hDXCODES, "diagnosisCode", ITEM_IDX)
 	      ENDWHILE
	    ENDIF
 
 
 	    IF (UAR_XML_FINDCHILDNODE(hENCOUNTER, "personnelRelationships", hPRS) = 1)
 	      SET OTHER_CNT = 0
	      SET ITEM_IDX = 1
		  SET hPR = GETCHILDELEMENTOCCURRENCEHANDLE (hPRS, "personnelRelationship", ITEM_IDX)
          WHILE (hPR > 0)
		    IF (GETCHILDNODEATTRIBUTEVALUE(hPR,"relationshipType","meaning") = "ATTENDDOC")
		      IF (UB04_ARR->QUAL[I].ATTENDING_PHYS_ID = 0)
   			    SET UB04_ARR->QUAL[I].ATTENDING_PHYS_ID = CNVTREAL(GETATTRIBUTEVALUE(hPR,"personnelId"))
              ENDIF
 			ENDIF
 
            SET ITEM_IDX = ITEM_IDX + 1
		    SET hPR = GETCHILDELEMENTOCCURRENCEHANDLE (hPRS, "personnelRelationship", ITEM_IDX)
 		  ENDWHILE
 		ENDIF
	ENDIF
 
 
 	;Get the primary, secondary, and tertiary payer info
	SET ITEM_IDX = 1
 	SET hPAYER = GETCLAIMDATAPAYERHANDLE(hROOT,ITEM_IDX)
 
	WHILE (hPAYER != 0)
			;***PRMARY INFORMATION***
		IF (GETATTRIBUTEVALUE(hPAYER,"prioritySequence") = "1") ;PRIMARY
		 	SET hSUBSCRIBER = 0
 			IF(UAR_XML_FINDCHILDNODE (hPAYER,"subscriber",hSUBSCRIBER)= SC_OK)
				SET UB04_ARR->QUAL[I]->P_HEALTH_PLAN_ID = GETATTRIBUTEVALUE(hPAYER,"healthPlanId")
 
				SET UB04_ARR->QUAL[I]->P_INSURED_NAME_ID = CNVTREAL(GETATTRIBUTEVALUE(hSUBSCRIBER,"personId"))
				SET UB04_ARR->QUAL[I]->P_INSURED_NAME = CONCAT(substring(1,20,GETCHILDNODEVALUE(hSUBSCRIBER,"insuredCardNameFirst")),
														       substring(1,30,GETCHILDNODEVALUE(hSUBSCRIBER,"insuredCardNameLast")))
 
			 	SET UB04_ARR->QUAL[I]->P_PAT_RELATIONSHIP_CD =
			 							CNVTREAL(GETCHILDNODEATTRIBUTEVALUE(hSUBSCRIBER,"patientsRelationshipToSubscriber","id"))
 
			 	SET UB04_ARR->QUAL[I]->P_INSURED_UNIQUE_ID = GETCHILDNODEVALUE(hSUBSCRIBER,"subscriberMemberNumber")
				SET UB04_ARR->QUAL[I]->P_INSURANCE_GRP_NBR = GETCHILDNODEVALUE(hSUBSCRIBER,"groupNumber")
		 	ENDIF
 
			;***SECONDARY INFORMATION***
		ELSEIF (GETATTRIBUTEVALUE(hPAYER,"prioritySequence") = "2") ;SECONDARY
		 	SET hSUBSCRIBER = 0
 			IF(UAR_XML_FINDCHILDNODE (hPAYER,"subscriber",hSUBSCRIBER)= SC_OK)
				SET UB04_ARR->QUAL[I]->S_HEALTH_PLAN_ID = GETATTRIBUTEVALUE(hPAYER,"healthPlanId")
 
				SET UB04_ARR->QUAL[I]->S_INSURED_NAME_ID = CNVTREAL(GETATTRIBUTEVALUE(hSUBSCRIBER,"personId"))
				SET UB04_ARR->QUAL[I]->S_INSURED_NAME = CONCAT(substring(1,20,GETCHILDNODEVALUE(hSUBSCRIBER,"insuredCardNameFirst")),
														       substring(1,30,GETCHILDNODEVALUE(hSUBSCRIBER,"insuredCardNameLast")))
 
			 	SET UB04_ARR->QUAL[I]->S_PAT_RELATIONSHIP_CD =
			 							CNVTREAL(GETCHILDNODEATTRIBUTEVALUE(hSUBSCRIBER,"patientsRelationshipToSubscriber","id"))
 
			 	SET UB04_ARR->QUAL[I]->S_INSURED_UNIQUE_ID = GETCHILDNODEVALUE(hSUBSCRIBER,"subscriberMemberNumber")
				SET UB04_ARR->QUAL[I]->S_INSURANCE_GRP_NBR = GETCHILDNODEVALUE(hSUBSCRIBER,"groupNumber")
		 	ENDIF
 
			;***TERTIARY INFORMATION***
		ELSEIF (GETATTRIBUTEVALUE(hPAYER,"prioritySequence") = "3") ;TERTIARY
		 	SET hSUBSCRIBER = 0
 			IF(UAR_XML_FINDCHILDNODE (hPAYER,"subscriber",hSUBSCRIBER)= SC_OK)
				SET UB04_ARR->QUAL[I]->T_HEALTH_PLAN_ID = GETATTRIBUTEVALUE(hPAYER,"healthPlanId")
 
				SET UB04_ARR->QUAL[I]->T_INSURED_NAME_ID = CNVTREAL(GETATTRIBUTEVALUE(hSUBSCRIBER,"personId"))
				SET UB04_ARR->QUAL[I]->T_INSURED_NAME = CONCAT(substring(1,20,GETCHILDNODEVALUE(hSUBSCRIBER,"insuredCardNameFirst")),
														       substring(1,30,GETCHILDNODEVALUE(hSUBSCRIBER,"insuredCardNameLast")))
 
			 	SET UB04_ARR->QUAL[I]->T_PAT_RELATIONSHIP_CD =
			 							CNVTREAL(GETCHILDNODEATTRIBUTEVALUE(hSUBSCRIBER,"patientsRelationshipToSubscriber","id"))
 
			 	SET UB04_ARR->QUAL[I]->T_INSURED_UNIQUE_ID = GETCHILDNODEVALUE(hSUBSCRIBER,"subscriberMemberNumber")
				SET UB04_ARR->QUAL[I]->T_INSURANCE_GRP_NBR = GETCHILDNODEVALUE(hSUBSCRIBER,"groupNumber")
		 	ENDIF
		ENDIF
		SET ITEM_IDX = ITEM_IDX + 1
		SET hPAYER = GETCLAIMDATAPAYERHANDLE(hROOT,ITEM_IDX)
	ENDWHILE
 
 
 	;**************************** GET THE <LINEITEM> DATA ****************************************;
	SET CNT = 0
	SET CHG_CNT = 0
	SET ITEM_IDX = 1
	SET LAB_IND = 1
 
 	SET hLINEITEMS = GETCLAIMDATALINEITEMHANDLE (hROOT, ITEM_IDX)
 
	WHILE(hLINEITEMS != 0)
		IF (CHG_CNT = 0)
			SET CNT = CNT + 1
			SET STAT = ALTERLIST(UB04_ARR->QUAL[I].LINES,CNT)
 			CALL InitializeLinesList(I,CNT)
 		ENDIF
 
 		SET CHG_CNT = CHG_CNT + 1
   		SET UB04_ARR->QUAL[I].CHG_CNT = CHG_CNT
 
 
 		SET TEMP_REV = FILLSTRING(4," ")
 		SET TEMP_REV = GETCHILDNODEVALUE(hLINEITEMS,"revenueCode")
 
 		IF (TEMP_REV IN ("0300", "0301", "0302", "0303", "0304", "0305", "0306",
 					     "0307", "0309", "0310", "0311", "0312", "0314", "0319"))
          IF (LAB_IND = 1)
 		    SET UB04_ARR->QUAL[I].LAB_IND = 1
 		  ENDIF
 		ELSE
 		  SET LAB_IND = 0
	      SET UB04_ARR->QUAL[I].LAB_IND = 0
        ENDIF
 
 		SET UB04_ARR->QUAL[I].LINES[CNT].REVENUE_CODE =
 		  CONCAT(SUBSTRING(1, 4*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].REVENUE_CODE),TEMP_REV)
 
        IF (CNVTREAL(TEMP_REV) >= 450 AND CNVTREAL(TEMP_REV) <= 459)
          SET UB04_ARR->QUAL[I].ED_IND = 1
          IF (FILE_TYPE = "IP" AND CNVTUPPER($FACILITY) = "MMC")
            SET UB04_ARR->QUAL[I].DEL_IND = 1;dkh changed 1 to 0
            SET ED_IP_IND = 1
          ENDIF
        ENDIF
 
        IF (CNVTREAL(TEMP_REV) = 762)
          SET UB04_ARR->QUAL[I].OBS_IND = 1
        ENDIF
 
        IF (FILE_TYPE != "IP")
          IF (UB04_ARR->QUAL[I].RPT_START_DT_TM = NULL)
		    SET UB04_ARR->QUAL[I].RPT_START_DATE =
		      FORMAT(CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hLINEITEMS,"serviceFromDate"),"YYYY-MM-DD"),0),"MMDDYYYY;;D")
		    SET UB04_ARR->QUAL[I].RPT_START_DT_TM =
		      CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hLINEITEMS,"serviceFromDate"),"YYYY-MM-DD"),0)
          ELSE
            IF (CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hLINEITEMS,"serviceFromDate"),"YYYY-MM-DD"),0) <
 		        CNVTDATETIME(UB04_ARR->QUAL[I].RPT_START_DT_TM) AND GETCHILDNODEVALUE(hLINEITEMS,"serviceFromDate") > " ")
		      SET UB04_ARR->QUAL[I].RPT_START_DATE =
		        FORMAT(CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hLINEITEMS,"serviceFromDate"),"YYYY-MM-DD"),0),"MMDDYYYY;;D")
  		      SET UB04_ARR->QUAL[I].RPT_START_DT_TM =
		        CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hLINEITEMS,"serviceFromDate"),"YYYY-MM-DD"),0)
		    ENDIF
		  ENDIF
 
          IF (UB04_ARR->QUAL[I].RPT_END_DT_TM = NULL)
		    SET UB04_ARR->QUAL[I].RPT_END_DATE =
		      FORMAT(CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hLINEITEMS,"serviceToDate"),"YYYY-MM-DD"),0),"MMDDYYYY;;D")
		    SET UB04_ARR->QUAL[I].RPT_END_DT_TM =
		      CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hLINEITEMS,"serviceToDate"),"YYYY-MM-DD"),0)
          ELSE
            IF (CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hLINEITEMS,"serviceToDate"),"YYYY-MM-DD"),0) >
 		        CNVTDATETIME(UB04_ARR->QUAL[I].RPT_END_DT_TM) AND GETCHILDNODEVALUE(hLINEITEMS,"serviceToDate") > " ")
		      SET UB04_ARR->QUAL[I].RPT_END_DATE =
		        FORMAT(CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hLINEITEMS,"serviceToDate"),"YYYY-MM-DD"),0),"MMDDYYYY;;D")
  		      SET UB04_ARR->QUAL[I].RPT_END_DT_TM =
		        CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hLINEITEMS,"serviceToDate"),"YYYY-MM-DD"),0)
		    ENDIF
		  ENDIF
        ENDIF
 
 		SET UB04_ARR->QUAL[I].LINES[CNT].SERVICE_DATE = CONCAT(SUBSTRING(1,8*(CHG_CNT-1),UB04_ARR->QUAL[I].LINES[CNT].SERVICE_DATE),
          FORMAT(CNVTDATETIME(CNVTDATE2(GETCHILDNODEVALUE(hLINEITEMS,"serviceFromDate"),"YYYY-MM-DD"),0),"MMDDYYYY;;D"))
 
		SET TEMP_UNITS = FILLSTRING(7," ")
 		IF (TEMP_REV = "0360" AND FILE_TYPE = "OP")
  		  SET TEMP_UNITS = "      1"
        ELSE
  		  SET TEMP_UNITS = FORMAT(GETCHILDNODEVALUE(hLINEITEMS,"serviceUnits"), "#######;r")
  		ENDIF
 		SET UB04_ARR->QUAL[I].LINES[CNT].UNITS_OF_SERVICE	=
  		  CONCAT(SUBSTRING(1, 7*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].UNITS_OF_SERVICE), TEMP_UNITS)
 
 		SET TEMP_CHG = FILLSTRING(10," ")
 		SET TEMP_CHG = GETCHILDNODEVALUE(hLINEITEMS,"totalChargeAmount")
 		SET TEMP_CHG = FORMAT(REPLACE(TEMP_CHG,".",""),"##########;rp0")
		SET UB04_ARR->QUAL[I].TOTAL_CHARGES = UB04_ARR->QUAL[I].TOTAL_CHARGES + CNVTREAL(TEMP_CHG)
 		SET UB04_ARR->QUAL[I].LINES[CNT].CHARGES =
 		  CONCAT(SUBSTRING(1, 10*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].CHARGES), TEMP_CHG)
;;test credits
 
 		IF (TEMP_REV = "0637")
       	  SET UB04_ARR->QUAL[I].TOTAL_NON_CHARGES = UB04_ARR->QUAL[I].TOTAL_NON_CHARGES + CNVTREAL(TEMP_CHG)
  		  SET UB04_ARR->QUAL[I].LINES[CNT].NON_CHARGES =
		    CONCAT(SUBSTRING(1, 10*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].NON_CHARGES), TEMP_CHG)
 		ELSE
  		  SET UB04_ARR->QUAL[I].LINES[CNT].NON_CHARGES =
		    CONCAT(SUBSTRING(1, 10*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].NON_CHARGES), "0000000000")
        ENDIF
 
 		;get the HCPCS/Rate Codes
 		SET TEMP_RATE = FILLSTRING(14," ")
		SET hLINE_PROC = 0
		SET hHIPPS = 0
 		IF (GETCHILDNODEVALUE(hLINEITEMS,"rate") > " ")
 			  SET TEMP_RATE = FORMAT(REPLACE(GETCHILDNODEVALUE(hLINEITEMS,"rate"),".",""),"##############;rp0")
 		ELSEIF (UAR_XML_FINDCHILDNODE (hLINEITEMS, "hippsCode", hHIPPS) = SC_OK)
			  SET TEMP_RATE = GETCHILDNODEVALUE(hHIPPS,"value")
 		ELSEIF (UAR_XML_FINDCHILDNODE (hLINEITEMS, "procedureCode", hLINE_PROC) = SC_OK)
		      IF (TRIM(GETCHILDNODEATTRIBUTEVALUE(hLINE_PROC,"sourceVocabulary","meaning")) = "HCPCS")
				SET TEMP_RATE = GETCHILDNODEVALUE(hLINE_PROC,"value")
			  ELSE
                SET hLINE_CHGS = 0
                SET CHG_ID = 0
                SET CHG_IDX = 1
       	        SET hCHARGE = GETCLAIMDATACHARGEHANDLE (hROOT, CHG_IDX)
		        IF (TRIM(GETCHILDNODEATTRIBUTEVALUE(hLINE_PROC,"sourceVocabulary","meaning")) = "CPT4")
				  SET TEMP_RATE = GETCHILDNODEVALUE(hLINE_PROC,"value")
				ENDIF
 	            IF (UAR_XML_FINDCHILDNODE(hLINEITEMS, "charges", hLINE_CHGS) = 1)
  			      SET CHG_ID = CNVTREAL(GETATTRIBUTEVALUE(GETCHILDELEMENTOCCURRENCEHANDLE(hLINE_CHGS, "charge", 1), "id"))
                  WHILE (hCHARGE != 0 AND CHG_ID > 0)
                    IF (CNVTREAL(GETATTRIBUTEVALUE(hCHARGE, "id")) = CHG_ID)
   			          SET hCHG_PROCS = 0
   			          SET hCHG_PROC = 0
   			          SET PROC_IDX = 0
   			          SET FOUND_IND = 0
 			          IF (UAR_XML_FINDCHILDNODE (hCHARGE, "procedureCodes", hCHG_PROCS) = SC_OK)
   			            SET PROC_IDX = PROC_IDX + 1
  			            SET hCHG_PROC = GETCHILDELEMENTOCCURRENCEHANDLE(hCHG_PROCS, "procedureCode", PROC_IDX)
                        WHILE (hCHG_PROC != 0)
  		                  IF (TRIM(GETCHILDNODEATTRIBUTEVALUE(hCHG_PROC,"sourceVocabulary","meaning")) = "HCPCS")
				            SET TEMP_RATE = GETCHILDNODEVALUE(hCHG_PROC,"value")
				            SET FOUND_IND = 1
;call echo("*******hcpcs*******")
;call echo(temp_rate)
;call echo(item_idx)
;call echo("*******hcpcs*******")
		                  ELSEIF (TRIM(GETCHILDNODEATTRIBUTEVALUE(hCHG_PROC,"sourceVocabulary","meaning")) = "CPT4"
		                  AND TEMP_RATE = NULL)
				            SET TEMP_RATE = GETCHILDNODEVALUE(hCHG_PROC,"value")
;call echo("*******cpt4*******")
;call echo(temp_rate)
;call echo(item_idx)
;call echo("*******cpt4*******")
				          ENDIF
						  IF (FOUND_IND = 0)
     			            SET PROC_IDX = PROC_IDX + 1
  			                SET hCHG_PROC = GETCHILDELEMENTOCCURRENCEHANDLE(hCHG_PROCS, "procedureCode", PROC_IDX)
                          ELSE
                            SET hCHG_PROC = 0
                          ENDIF
                        ENDWHILE
                      ENDIF
                    ENDIF
                    SET CHG_IDX = CHG_IDX + 1
       	            SET hCHARGE = GETCLAIMDATACHARGEHANDLE (hROOT, CHG_IDX)
                  ENDWHILE
                ENDIF
			  ENDIF
		ENDIF
		SET UB04_ARR->QUAL[I].LINES[CNT].RATE_CODES =
		  CONCAT(SUBSTRING(1, 14*(CHG_CNT-1), UB04_ARR->QUAL[I].LINES[CNT].RATE_CODES), TEMP_RATE)
 
		;Once we have filled up a record with 23 revenue codes, reset the counter so the next iteration adds a new record
		IF (CHG_CNT = 23)
    		SET UB04_ARR->QUAL[I].CHG_CNT = CHG_CNT
			SET CHG_CNT = 0
		ENDIF
 
		SET ITEM_IDX = ITEM_IDX + 1
		SET hLINEITEMS = GETCLAIMDATALINEITEMHANDLE (hROOT, ITEM_IDX)
	ENDWHILE
 
    IF (UB04_ARR->QUAL[I].LAB_IND = 1)
	  SET UB04_ARR->QUAL[I].BILL_TYPE = "0141"
    ENDIF
 
;Get the employer name
 	SET ORG_IDX = 1
 	SET hORGANIZATION = GETCLAIMDATAORGANIZATIONHANDLE(hROOT,ORG_IDX)
 
 	WHILE (hORGANIZATION != 0)
 		SET hTYPES = 0
 		; gather the main employter
 		IF(UAR_XML_FINDCHILDNODE (hORGANIZATION,"types",hTYPES)= SC_OK)
 	  	  IF (GETCHILDNODEATTRIBUTEVALUE(hTYPES,"type","displayKey") = "EMPLOYER")
 			SET UB04_ARR->QUAL[I]->EMPLOYER_NAME = CHECK(GETCHILDNODEVALUE(hORGANIZATION,"name"), " ", "~")
		  ENDIF
		ENDIF
 
		SET ORG_IDX = ORG_IDX + 1
	 	SET hORGANIZATION = GETCLAIMDATAORGANIZATIONHANDLE(hROOT,ORG_IDX)
	ENDWHILE
 
    set next_point = 0
    set last_point = 0
    set delta_len  = 0
    set beg_org_point = 0
    set end_org_point = 0
    set org_type = "        "
    if (UB04_ARR->QUAL[I]->EMPLOYER_NAME = null)
      set next_point = findstring("<common>", UB04_ARR->QUAL[I].XML)
      set next_point = findstring("<organizations>", UB04_ARR->QUAL[I].XML, next_point, 0)
      if (next_point > 0)
        set beg_org_point = findstring("<organization id=", UB04_ARR->QUAL[I].XML, next_point, 0)
        set end_org_point = findstring("</organization>", UB04_ARR->QUAL[I].XML, beg_org_point, 0)
        set next_point = findstring("<types>", UB04_ARR->QUAL[I].XML, beg_org_point, 0)
        if (next_point > 0)
          while (org_type != "EMPLOYER" and next_point < end_org_point)
            set next_point = findstring("<type id=", UB04_ARR->QUAL[I].XML, next_point, 0)
            set next_point = findstring("displayKey", UB04_ARR->QUAL[I].XML, next_point, 0)
            set next_point = findstring('"', UB04_ARR->QUAL[I].XML, next_point, 0)
            set last_point = findstring('"', UB04_ARR->QUAL[I].XML, next_point+1, 0)
            set delta_len =  last_point - next_point - 1
            set org_type = substring(next_point + 1, delta_len, trim(UB04_ARR->QUAL[I].XML))
            if (org_type = "EMPLOYER")
              set next_point = findstring("<name>", UB04_ARR->QUAL[I].XML, beg_org_point, 0)
              if (next_point > 0 and next_point < end_org_point)
                set last_point = findstring("</name>", UB04_ARR->QUAL[I].XML, next_point, 0)
                set delta_len =  last_point - next_point - 1
                set UB04_ARR->QUAL[I]->EMPLOYER_NAME = substring(next_point + 5, delta_len, trim(UB04_ARR->QUAL[I].XML))
;call echo("*******3*******")
;call echo (UB04_ARR->QUAL[I]->EMPLOYER_NAME)
;call echo("*******3*******")
              endif
            endif
          endwhile
        endif
      endif
    endif
 
   ENDIF ;hROOT > 0 AND hXMLFILE > 0
   CALL RELEASEXMLRESOURCES (hXMLFILE)
  ENDIF ; SELF_IND = 0
 ENDFOR
 /*
 IF (FILE_TYPE = "IP" AND CNVTUPPER($FACILITY) = "MMC")
   IF (ED_IP_IND = 1)
     SET KEEP_IDX = 0
     SET DEL_IDX = 0
     FOR (II = BEG_IDX TO SIZE(UB04_ARR->QUAL,5))
       IF (UB04_ARR->QUAL[II].DEL_IND = 1)
         IF (DEL_IDX = 0)
           SET DEL_IDX = II
         ENDIF
       ELSE
         IF (KEEP_IDX = 0 AND UB04_ARR->QUAL[II].FLU_IND = 0)
           SET KEEP_IDX = II
         ENDIF
       ENDIF
     ENDFOR
 
     IF (KEEP_IDX > 0 AND DEL_IDX > 0)
       SET STAT = MergeRecords(KEEP_IDX, DEL_IDX)
     ELSEIF (DEL_IDX > 0)
       SET UB04_ARR->QUAL[DEL_IDX].DEL_IND = 0
     ENDIF
   ENDIF
 ENDIF
 */
; IF (SIZE(UB04_ARR->QUAL,5) > 0);dkh added 12/2
; FOR (I = 1 TO SIZE(UB04_ARR->QUAL,5));dkh added 12/2
;  IF (UB04_ARR->QUAL[I].SELF_IND = 0);dkh added 12/2
   IF (FILE_TYPE = "IP" AND CNVTUPPER($FACILITY) = "MMC");dkh added 12/2
    IF (I = 1);dkh added 12/2
      SET BEG_IDX = 1;dkh added 12/2
      SET ED_IP_IND = 0;dkh added 12/2
    ELSE;dkh added 12/2
      IF (UB04_ARR->QUAL[I-1].PFT_ENCNTR_ID != UB04_ARR->QUAL[I].PFT_ENCNTR_ID);dkh added 12/2
        IF (I-1 > BEG_IDX AND ED_IP_IND = 1);dkh added 12/2
          SET KEEP_IDX = 0;dkh added 12/2
          SET DEL_IDX = 0;dkh added 12/2
          FOR (II = BEG_IDX TO I-1);dkh added 12/2
            IF (UB04_ARR->QUAL[II].DEL_IND = 1);dkh added 12/2
              IF (DEL_IDX = 0);dkh added 12/2
                SET DEL_IDX = II;dkh added 12/2
              ENDIF;dkh added 12/2
            ELSE;dkh added 12/2
              IF (KEEP_IDX = 0 AND UB04_ARR->QUAL[II].FLU_IND = 0);dkh added 12/2
                SET KEEP_IDX = II;dkh added 12/2
              ENDIF;dkh added 12/2
            ENDIF;dkh added 12/2
          ENDFOR;dkh added 12/2
 
          IF (KEEP_IDX > 0 AND DEL_IDX > 0);dkh added 12/2
            SET STAT = MergeRecords(KEEP_IDX, DEL_IDX);dkh added 12/2
          ELSEIF (DEL_IDX > 0);dkh added 12/2
            SET UB04_ARR->QUAL[DEL_IDX].DEL_IND = 0;dkh added 12/2
          ENDIF;dkh added 12/2
        ENDIF;dkh added 12/2
 
        SET BEG_IDX = I;dkh added 12/2
        SET ED_IP_IND = 0;dkh added 12/2
      ENDIF;dkh added 12/2
    ENDIF;dkh added 12/2
   ENDIF;dkh added 12/2
;1.person-info
 SELECT INTO "NL:"
 FROM (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
	,ENCOUNTER E
	,ADDRESS A
	,PERSON P
	,PERSON_ALIAS PA
	,PERSON_ALIAS PA1
	,CODE_VALUE_OUTBOUND CVO1
	,CODE_VALUE_OUTBOUND CVO2
	,CODE_VALUE_OUTBOUND CVO3
 PLAN D1
 WHERE UB04_ARR->QUAL[D1.SEQ].DEL_IND = 0
   AND D1.SEQ > 0
 JOIN E
 WHERE E.ENCNTR_ID = UB04_ARR->QUAL[D1.SEQ].ENCNTR_ID
 JOIN P
 WHERE P.PERSON_ID = E.PERSON_ID
 JOIN PA
 WHERE PA.PERSON_ID = P.PERSON_ID
   AND PA.PERSON_ALIAS_TYPE_CD = MRN_CD
   AND PA.ACTIVE_IND = 1
   AND PA.END_EFFECTIVE_DT_TM > SYSDATE
 JOIN A
 WHERE A.PARENT_ENTITY_ID = OUTERJOIN(P.PERSON_ID)
   AND A.PARENT_ENTITY_NAME = OUTERJOIN("PERSON")
   AND A.ADDRESS_TYPE_CD = OUTERJOIN(HOME_CD)
   AND A.ACTIVE_IND = OUTERJOIN(1)
 JOIN PA1
 WHERE PA1.PERSON_ID = OUTERJOIN(P.PERSON_ID)
   AND PA1.PERSON_ALIAS_TYPE_CD = OUTERJOIN(SSN_CD)
   AND PA1.ACTIVE_IND = OUTERJOIN(1)
   AND PA1.END_EFFECTIVE_DT_TM > OUTERJOIN(SYSDATE)
 JOIN CVO1
 WHERE CVO1.CODE_SET = OUTERJOIN(15)
   AND CVO1.CODE_VALUE = OUTERJOIN(A.COUNTRY_CD)
   AND CVO1.CONTRIBUTOR_SOURCE_CD = OUTERJOIN(THA_SOURCE_CD)
 JOIN CVO2
 WHERE CVO2.CODE_SET = OUTERJOIN(282)
   AND CVO2.CODE_VALUE = OUTERJOIN(P.RACE_CD)
   AND CVO2.CONTRIBUTOR_SOURCE_CD = OUTERJOIN(THA_SOURCE_CD)
 JOIN CVO3
 WHERE CVO3.CODE_SET = OUTERJOIN(27)
   AND CVO3.CODE_VALUE = OUTERJOIN(P.ETHNIC_GRP_CD)
   AND CVO3.CONTRIBUTOR_SOURCE_CD = OUTERJOIN(THA_SOURCE_CD)
 ORDER BY D1.SEQ
 
 HEAD REPORT
	CNT = 0
 DETAIL
	CNT = D1.SEQ
	UB04_ARR->QUAL[CNT].MRN			= SUBSTRING(1,24,CNVTALIAS(PA.ALIAS,PA.ALIAS_POOL_CD))
	UB04_ARR->QUAL[CNT].PERSON_ID	= P.PERSON_ID
	UB04_ARR->QUAL[CNT].LAST_NAME	= SUBSTRING(1,30,P.NAME_LAST_KEY)
	UB04_ARR->QUAL[CNT].FIRST_NAME	= SUBSTRING(1,20,P.NAME_FIRST_KEY)
	UB04_ARR->QUAL[CNT].STREET		= SUBSTRING(1,40,A.STREET_ADDR)
	UB04_ARR->QUAL[CNT].CITY		= SUBSTRING(1,30,A.CITY)
	UB04_ARR->QUAL[CNT].STATE		= SUBSTRING(1,2,TRIM(UAR_GET_CODE_DISPLAY(A.STATE_CD)))
	UB04_ARR->QUAL[CNT].ZIP			= SUBSTRING(1,9,A.ZIPCODE)
	UB04_ARR->QUAL[CNT].COUNTRY_CODE= SUBSTRING(1,2,CVO1.ALIAS)
	UB04_ARR->QUAL[CNT].SSN			= IF (PA1.PERSON_ID > 0)
										FORMAT(PA1.ALIAS, "#########;P0")
								      ELSE
								        "999999999"
								      ENDIF
	UB04_ARR->QUAL[CNT].BIRTH_DATE	= FORMAT(P.BIRTH_DT_TM,"MMDDYYYY;;D")
	UB04_ARR->QUAL[CNT].SEX			= SUBSTRING(1,1,TRIM(UAR_GET_CODE_DISPLAY(P.SEX_CD)))
    UB04_ARR->QUAL[CNT].RACE        = CONCAT(SUBSTRING(1,1,CVO2.ALIAS), SUBSTRING(1,1,CVO3.ALIAS))
 WITH NOCOUNTER
 
 
;2.dnr orders
 SELECT INTO "NL:"
 FROM (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
	,ENCOUNTER E
	,ORDERS O
    ,ORDER_DETAIL OD
 PLAN D1
 WHERE UB04_ARR->QUAL[D1.SEQ].DEL_IND = 0
   AND D1.SEQ > 0
 JOIN E
 WHERE E.ENCNTR_ID = UB04_ARR->QUAL[D1.SEQ].ENCNTR_ID
 JOIN O
 WHERE O.PERSON_ID = E.PERSON_ID
   AND O.ENCNTR_ID = E.ENCNTR_ID
   AND O.CATALOG_CD = DNR_CD
   AND O.ACTIVE_IND = 1
   AND O.ORDER_STATUS_CD != DELETED_CD
 JOIN OD
 WHERE OD.ORDER_ID = O.ORDER_ID
   AND OD.OE_FIELD_MEANING = "RESUSCITATIONSTATUS"
   AND OD.OE_FIELD_VALUE IN (DNR_DETAIL_CD, DNR_DNI_DETAIL_CD)
 DETAIL
   UB04_ARR->QUAL[D1.SEQ].DNR = "Y"
 WITH NOCOUNTER
 
 
;3.aliases
 SELECT INTO "NL:"
 FROM CODE_VALUE_OUTBOUND CVO,
  (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
 PLAN D1
   WHERE UB04_ARR->QUAL[D1.SEQ].DEL_IND = 0
     AND D1.SEQ > 0
 JOIN CVO
    WHERE CVO.CODE_VALUE in (UB04_ARR->QUAL[D1.SEQ].ADMIT_TYPE_CD,
    						 UB04_ARR->QUAL[D1.SEQ].ADMIT_SOURCE_CD,
    						 UB04_ARR->QUAL[D1.SEQ].DISCH_STATUS_CD,
    						 UB04_ARR->QUAL[D1.SEQ].ACCIDENT_STATE_CD,
    						 UB04_ARR->QUAL[D1.SEQ].P_PAT_RELATIONSHIP_CD,
    						 UB04_ARR->QUAL[D1.SEQ].S_PAT_RELATIONSHIP_CD,
    						 UB04_ARR->QUAL[D1.SEQ].T_PAT_RELATIONSHIP_CD)
      AND CVO.CONTRIBUTOR_SOURCE_CD = THA_SOURCE_CD
      AND CVO.CODE_VALUE > 0
 DETAIL
      IF (CVO.CODE_VALUE = UB04_ARR->QUAL[D1.SEQ].ADMIT_TYPE_CD)
		UB04_ARR->QUAL[D1.SEQ].ADMIT_TYPE = CVO.ALIAS
      ELSEIF (CVO.CODE_VALUE = UB04_ARR->QUAL[D1.SEQ].ADMIT_SOURCE_CD)
		UB04_ARR->QUAL[D1.SEQ].ADMIT_SOURCE = CVO.ALIAS
      ELSEIF (CVO.CODE_VALUE = UB04_ARR->QUAL[D1.SEQ].DISCH_STATUS_CD)
		UB04_ARR->QUAL[D1.SEQ].DISCH_STATUS = CVO.ALIAS
      ELSEIF (CVO.CODE_VALUE = UB04_ARR->QUAL[D1.SEQ].ACCIDENT_STATE_CD)
		UB04_ARR->QUAL[D1.SEQ].ACCIDENT_STATE = CVO.ALIAS
	  ENDIF
 
      IF (CVO.CODE_VALUE = UB04_ARR->QUAL[D1.SEQ]->P_PAT_RELATIONSHIP_CD)
		UB04_ARR->QUAL[D1.SEQ].P_PAT_RELATIONSHIP = CVO.ALIAS
      ENDIF
      IF (CVO.CODE_VALUE = UB04_ARR->QUAL[D1.SEQ]->S_PAT_RELATIONSHIP_CD)
		UB04_ARR->QUAL[D1.SEQ].S_PAT_RELATIONSHIP = CVO.ALIAS
      ENDIF
      IF (CVO.CODE_VALUE = UB04_ARR->QUAL[D1.SEQ]->T_PAT_RELATIONSHIP_CD)
		UB04_ARR->QUAL[D1.SEQ].T_PAT_RELATIONSHIP = CVO.ALIAS
      ENDIF
 WITH NOCOUNTER
 
 
;4.Retrieve the physician NPI
 SELECT INTO "NL:"
 FROM (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
	,PRSNL_ALIAS PRA
 PLAN D1
 WHERE UB04_ARR->QUAL[D1.SEQ].DEL_IND = 0
   AND D1.SEQ > 0
 JOIN PRA
 WHERE PRA.PERSON_ID IN (UB04_ARR->QUAL[D1.SEQ].OTHER1_PHYS_ID, UB04_ARR->QUAL[D1.SEQ].OTHER2_PHYS_ID,
 						 UB04_ARR->QUAL[D1.SEQ].ATTENDING_PHYS_ID, UB04_ARR->QUAL[D1.SEQ].OPERATING_PHYS_ID)
   AND PRA.PRSNL_ALIAS_TYPE_CD IN (NPI_ALIAS_CD, LIC_ALIAS_CD)
   AND PRA.ACTIVE_IND = 1
   AND PRA.END_EFFECTIVE_DT_TM > SYSDATE
 ORDER BY D1.SEQ, PRA.PERSON_ID, PRA.PRSNL_ALIAS_TYPE_CD
 HEAD D1.SEQ
   DO_NOTHING = 0
 HEAD PRA.PERSON_ID
   DO_NOTHING = 0
 DETAIL
   IF (PRA.PRSNL_ALIAS_TYPE_CD = NPI_ALIAS_CD)
     IF (PRA.PERSON_ID = UB04_ARR->QUAL[D1.SEQ].OTHER1_PHYS_ID)
   	   UB04_ARR->QUAL[D1.SEQ].OTHER1_PHYS_NPI = SUBSTRING(1,13,PRA.ALIAS)
     ENDIF
     IF (PRA.PERSON_ID = UB04_ARR->QUAL[D1.SEQ].OTHER2_PHYS_ID)
   	   UB04_ARR->QUAL[D1.SEQ].OTHER2_PHYS_NPI = SUBSTRING(1,13,PRA.ALIAS)
     ENDIF
     IF (PRA.PERSON_ID = UB04_ARR->QUAL[D1.SEQ].ATTENDING_PHYS_ID)
   	   UB04_ARR->QUAL[D1.SEQ].ATTENDING_PHYS_NPI = SUBSTRING(1,13,PRA.ALIAS)
     ENDIF
     IF (PRA.PERSON_ID = UB04_ARR->QUAL[D1.SEQ].OPERATING_PHYS_ID)
   	   UB04_ARR->QUAL[D1.SEQ].OPERATING_PHYS_NPI = SUBSTRING(1,13,PRA.ALIAS)
     ENDIF
   ELSEIF (PRA.PRSNL_ALIAS_TYPE_CD = LIC_ALIAS_CD)
     IF (PRA.PERSON_ID = UB04_ARR->QUAL[D1.SEQ].OTHER1_PHYS_ID)
   	   UB04_ARR->QUAL[D1.SEQ].OTHER1_PHYS_LIC = IF (CNVTUPPER(SUBSTRING(1,2,PRA.ALIAS)) = "OD")
   	   											  REPLACE(SUBSTRING(1,12,PRA.ALIAS), "OD", "UK", 1)
   	   											ELSE
   	   											  SUBSTRING(1,12,PRA.ALIAS)
   	   											ENDIF
     ENDIF
     IF (PRA.PERSON_ID = UB04_ARR->QUAL[D1.SEQ].OTHER2_PHYS_ID)
   	   UB04_ARR->QUAL[D1.SEQ].OTHER2_PHYS_LIC = IF (CNVTUPPER(SUBSTRING(1,2,PRA.ALIAS)) = "OD")
   	   											  REPLACE(SUBSTRING(1,12,PRA.ALIAS), "OD", "UK", 1)
   	   											ELSE
   	   											  SUBSTRING(1,12,PRA.ALIAS)
   	   											ENDIF
     ENDIF
     IF (PRA.PERSON_ID = UB04_ARR->QUAL[D1.SEQ].ATTENDING_PHYS_ID)
   	   UB04_ARR->QUAL[D1.SEQ].ATTENDING_PHYS_LIC = IF (CNVTUPPER(SUBSTRING(1,2,PRA.ALIAS)) = "OD")
   	   											     REPLACE(SUBSTRING(1,12,PRA.ALIAS), "OD", "UK", 1)
   	   											   ELSE
   	   											     SUBSTRING(1,12,PRA.ALIAS)
   	   											   ENDIF
     ENDIF
     IF (PRA.PERSON_ID = UB04_ARR->QUAL[D1.SEQ].OPERATING_PHYS_ID)
   	   UB04_ARR->QUAL[D1.SEQ].OPERATING_PHYS_LIC = IF (CNVTUPPER(SUBSTRING(1,2,PRA.ALIAS)) = "OD")
   	   											     REPLACE(SUBSTRING(1,12,PRA.ALIAS), "OD", "UK", 1)
   	   											   ELSE
   	   											     SUBSTRING(1,12,PRA.ALIAS)
   	   											   ENDIF
     ENDIF
   ENDIF
 WITH NOCOUNTER, SKIPREPORT = 0
 
 
;5.Insured name
 SELECT INTO "NL:"
 FROM PERSON P,
   (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
 PLAN D1
   WHERE UB04_ARR->QUAL[D1.SEQ].DEL_IND = 0
     AND D1.SEQ > 0
 JOIN P
   WHERE P.PERSON_ID IN (UB04_ARR->QUAL[D1.SEQ]->P_INSURED_NAME_ID,
   					     UB04_ARR->QUAL[D1.SEQ]->S_INSURED_NAME_ID,
    					 UB04_ARR->QUAL[D1.SEQ]->T_INSURED_NAME_ID)
 ORDER D1.SEQ
 HEAD D1.SEQ
   I = D1.SEQ
 DETAIL
   IF (P.PERSON_ID = UB04_ARR->QUAL[I]->P_INSURED_NAME_ID AND UB04_ARR->QUAL[I]->P_INSURED_NAME = NULL)
     UB04_ARR->QUAL[I]->P_INSURED_NAME = CONCAT(SUBSTRING(1,20,P.NAME_FIRST_KEY), SUBSTRING(1,30,P.NAME_LAST_KEY))
   ENDIF
   IF (P.PERSON_ID = UB04_ARR->QUAL[I]->S_INSURED_NAME_ID AND UB04_ARR->QUAL[I]->S_INSURED_NAME = NULL)
     UB04_ARR->QUAL[I]->S_INSURED_NAME = CONCAT(SUBSTRING(1,20,P.NAME_FIRST_KEY), SUBSTRING(1,30,P.NAME_LAST_KEY))
   ENDIF
   IF (P.PERSON_ID = UB04_ARR->QUAL[I]->T_INSURED_NAME_ID AND UB04_ARR->QUAL[I]->T_INSURED_NAME = NULL)
     UB04_ARR->QUAL[I]->T_INSURED_NAME = CONCAT(SUBSTRING(1,20,P.NAME_FIRST_KEY), SUBSTRING(1,30,P.NAME_LAST_KEY))
   ENDIF
 WITH NOCOUNTER
 
 
;6.Payer-ID - Address 4
 SELECT INTO "NL:"
 FROM ADDRESS A,
   (DUMMYT D1 WITH SEQ = SIZE(UB04_ARR->QUAL,5))
 PLAN D1
   WHERE UB04_ARR->QUAL[D1.SEQ].DEL_IND = 0
     AND UB04_ARR->QUAL[D1.SEQ].SELF_IND = 0
     AND D1.SEQ > 0
 JOIN A
   WHERE A.PARENT_ENTITY_NAME = "HEALTH_PLAN"
     AND A.PARENT_ENTITY_ID IN (CNVTREAL(UB04_ARR->QUAL[D1.SEQ]->P_HEALTH_PLAN_ID),
      							CNVTREAL(UB04_ARR->QUAL[D1.SEQ]->S_HEALTH_PLAN_ID),
      							CNVTREAL(UB04_ARR->QUAL[D1.SEQ]->T_HEALTH_PLAN_ID))
     AND A.ACTIVE_IND = 1
 ORDER D1.SEQ, A.PARENT_ENTITY_ID
 HEAD D1.SEQ
   I = D1.SEQ
 DETAIL
   IF (A.PARENT_ENTITY_ID = CNVTREAL(UB04_ARR->QUAL[I]->P_HEALTH_PLAN_ID))
 	 UB04_ARR->QUAL[I].P_PAYER_ID = A.STREET_ADDR4
   ENDIF
   IF (A.PARENT_ENTITY_ID = CNVTREAL(UB04_ARR->QUAL[I]->S_HEALTH_PLAN_ID))
	 UB04_ARR->QUAL[I].S_PAYER_ID = A.STREET_ADDR4
   ENDIF
   IF (A.PARENT_ENTITY_ID = CNVTREAL(UB04_ARR->QUAL[I]->T_HEALTH_PLAN_ID))
	 UB04_ARR->QUAL[I].T_PAYER_ID = A.STREET_ADDR4
   ENDIF
 WITH NOCOUNTER
 
;*************************************************
;**************OUTPUT THE DATA********************
;*************************************************
/*
select
    size_disp = size(UB04_ARR->QUAL[d.seq].XML,1),
    textlen_disp = textlen(UB04_ARR->QUAL[d.seq].XML),
 	eid = UB04_ARR->QUAL[d.seq].ENCNTR_ID,
 	disch_date = UB04_ARR->QUAL[d.seq].DISCH_DT_TM,
	act_id = UB04_ARR->QUAL[d.seq].CORSP_ACTIVITY_ID,
	fin = UB04_ARR->QUAL[d.seq].FIN,
	xml = substring(1, 120, UB04_ARR->QUAL[d.seq].XML)
from (dummyt d with seq = value(cnt))
order size_disp, act_id
with nocounter, separator = " ", format
 
 select
  BILL_STATUS = UB04_ARR->QUAL[d.seq].BILL_STATUS,
  BILL_TYPE = UB04_ARR->QUAL[d.seq].BILL_TYPE,
  fin = UB04_ARR->QUAL[d.seq].FIN,
  mrn = UB04_ARR->QUAL[d.seq].MRN
 from (dummyt d with seq = size(UB04_ARR->QUAL, 5))
 where UB04_ARR->QUAL[D.SEQ].DEL_IND = 0
   and UB04_ARR->QUAL[D.SEQ].SELF_IND = 1
 order bill_status, fin
*/
   select
     if(temp_inx = 1)
       with nocounter, maxcol = 2540, maxrow = 1
     endif
 into value(file_name)
  BILL_STATUS = UB04_ARR->QUAL[d.seq].BILL_STATUS,
  FIN = UB04_ARR->QUAL[d.seq].FIN,
  MRN = UB04_ARR->QUAL[d.seq].MRN,
  REV_CD = UB04_ARR->QUAL[d.seq].LINES[1].REVENUE_CODE
;;stop-here
 FROM (dummyt d with seq = size(UB04_ARR->QUAL, 5))
 WHERE UB04_ARR->QUAL[D.SEQ].DEL_IND = 0
   AND UB04_ARR->QUAL[D.SEQ].BILL_TYPE != "0211" ;not in ("0141","0211");!= "0211"
 order rev_cd,bill_status, fin
 ;;stop-here
 detail
  line_cnt = 1
 
  col_num = 26
  col col_num-1, fin
  col_num = 51
  col col_num-1, mrn
  col_num = 76
  col col_num-1, UB04_ARR->QUAL[d.seq].BILL_TYPE
  col_num = 84
  col col_num-1, UB04_ARR->QUAL[d.seq].FED_TAX_ID
  col_num = 94
  col col_num-1, UB04_ARR->QUAL[d.seq].RPT_START_DATE
  col_num = 102,
  col col_num-1, UB04_ARR->QUAL[d.seq].RPT_END_DATE
  col_num = 110
  col col_num-1, UB04_ARR->QUAL[d.seq].CITY
  col_num = 140
  col col_num-1, UB04_ARR->QUAL[d.seq].STATE
  col_num = 142
  col col_num-1, UB04_ARR->QUAL[d.seq].ZIP
  col_num = 151
  col col_num-1, UB04_ARR->QUAL[d.seq].COUNTRY_CODE
  col_num = 155
  col col_num-1, UB04_ARR->QUAL[d.seq].BIRTH_DATE
  col_num = 163
  col col_num-1, UB04_ARR->QUAL[d.seq].SEX
  col_num = 164
  col col_num-1, UB04_ARR->QUAL[d.seq].ADMIT_DATE
  if (file_type = "IP")
    col_num = 172
    col col_num-1, UB04_ARR->QUAL[d.seq].ADMIT_HOUR
  endif
  col_num = 174
  col col_num-1, UB04_ARR->QUAL[d.seq].ADMIT_TYPE
  col_num = 176
  col col_num-1, UB04_ARR->QUAL[d.seq].ADMIT_SOURCE
  col_num = 178
  col col_num-1, UB04_ARR->QUAL[d.seq].DISCH_STATUS
  col_num = 180
  if (UB04_ARR->QUAL[d.seq].DNR = "Y")
    col col_num-1, UB04_ARR->QUAL[d.seq].DNR
  else
    col col_num-1, "N"
  endif
  col_num = 181
  col col_num-1, UB04_ARR->QUAL[d.seq].ACCIDENT_STATE
  col_num = 183
  col col_num-1, UB04_ARR->QUAL[d.seq].ACCIDENT_CODE
  col_num = 185
  col col_num-1, UB04_ARR->QUAL[d.seq].ACCIDENT_DATE
 
  col_num = 193
  col col_num-1, UB04_ARR->QUAL[d.seq].LINES[line_cnt].REVENUE_CODE
  col_num = 285
  col col_num-1, UB04_ARR->QUAL[d.seq].LINES[line_cnt].RATE_CODES
  col_num = 607
  col col_num-1, UB04_ARR->QUAL[d.seq].LINES[line_cnt].SERVICE_DATE
 
  col_num = 791
  col col_num-1, UB04_ARR->QUAL[d.seq].CREATE_DATE
 
  col_num = 799
  col col_num-1, UB04_ARR->QUAL[d.seq].LINES[line_cnt].UNITS_OF_SERVICE
 
  col_num = 960
  col col_num-1, UB04_ARR->QUAL[d.seq].LINES[line_cnt].CHARGES
 
  if (size(UB04_ARR->QUAL[d.seq].LINES, 5) = 1)
    col_num = 1190
    col col_num-1, UB04_ARR->QUAL[d.seq].TOTAL_CHARGES "##########;rp0"
  endif
 
  col_num = 1200
  col col_num-1, UB04_ARR->QUAL[d.seq].LINES[line_cnt].NON_CHARGES
 
  col_num = 1430
  col col_num-1,  UB04_ARR->QUAL[d.seq].TOTAL_NON_CHARGES "##########;rp0"
 
  col_num = 1440
  col col_num-1, UB04_ARR->QUAL[d.seq].P_PAYER_ID
  col_num = 1444
  col col_num-1, UB04_ARR->QUAL[d.seq].S_PAYER_ID
  col_num = 1448
  col col_num-1, UB04_ARR->QUAL[d.seq].T_PAYER_ID
 
  col_num = 1452
  col col_num-1, UB04_ARR->QUAL[d.seq].P_HEALTH_PLAN_ID
  col_num = 1467
  col col_num-1, UB04_ARR->QUAL[d.seq].S_HEALTH_PLAN_ID
  col_num = 1482
  col col_num-1, UB04_ARR->QUAL[d.seq].T_HEALTH_PLAN_ID
 
  col_num = 1497
  col col_num-1, UB04_ARR->QUAL[d.seq].NPI
 
  col_num = 1512
  col col_num-1, UB04_ARR->QUAL[d.seq].P_PAT_RELATIONSHIP
  col_num = 1514
  col col_num-1, UB04_ARR->QUAL[d.seq].S_PAT_RELATIONSHIP
  col_num = 1516
  col col_num-1, UB04_ARR->QUAL[d.seq].T_PAT_RELATIONSHIP
 
  col_num = 1518
  col col_num-1, UB04_ARR->QUAL[d.seq].P_INSURED_UNIQUE_ID
  col_num = 1538
  col col_num-1, UB04_ARR->QUAL[d.seq].S_INSURED_UNIQUE_ID
  col_num = 1558
  col col_num-1, UB04_ARR->QUAL[d.seq].T_INSURED_UNIQUE_ID
 
  col_num = 1578
  col col_num-1, UB04_ARR->QUAL[d.seq].P_INSURANCE_GRP_NBR
  col_num = 1595
  col col_num-1, UB04_ARR->QUAL[d.seq].S_INSURANCE_GRP_NBR
  col_num = 1612
  col col_num-1, UB04_ARR->QUAL[d.seq].T_INSURANCE_GRP_NBR
 
  col_num = 1629
  col col_num-1, UB04_ARR->QUAL[d.seq].EMPLOYER_NAME
 
  col_num = 1654
  col col_num-1, UB04_ARR->QUAL[d.seq].DX_QUALIFIER
  col_num = 1656
  col col_num-1, UB04_ARR->QUAL[d.seq].PRNPL_DX_CD
 
  col_num = 1664
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX1
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX2
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX3
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX4
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX5
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX6
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX7
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX8
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX9
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX10
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX11
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX12
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX13
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX14
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX15
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX16
  col_num = col_num + 8
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX17
 
  if (file_type = "IP")
    col_num = 1800
    col col_num-1, UB04_ARR->QUAL[d.seq].ADMIT_DX_CD
  endif
 
  if (file_type != "IP")
    col_num = 1807
    col col_num-1, UB04_ARR->QUAL[d.seq].VISIT_REASON_CD
  endif
 
  col_num = 1828
  col col_num-1, UB04_ARR->QUAL[d.seq].PPS_CODE
 
  col_num = 1832
  col col_num-1, UB04_ARR->QUAL[d.seq].CAUSE_OF_INJURY
 
  if (file_type = "IP")
    col_num = 1856
    col col_num-1, UB04_ARR->QUAL[d.seq].PRNPL_PROC_CD_DT
 
    col_num = 1871
    col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_PROC_CD_DT1
    col_num = 1886
    col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_PROC_CD_DT2
    col_num = 1901
    col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_PROC_CD_DT3
    col_num = 1916
    col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_PROC_CD_DT4
    col_num = 1931
    col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_PROC_CD_DT5
  endif
 
  col_num = 1946
;  col col_num-1, UB04_ARR->QUAL[d.seq].ATTENDING_PHYS_CD
;  col_num = 1948
  col col_num-1, UB04_ARR->QUAL[d.seq].ATTENDING_PHYS_LIC
  col_num = 1958
  col col_num-1, UB04_ARR->QUAL[d.seq].ATTENDING_PHYS_NPI
  col_num = 1971
;  col col_num-1, UB04_ARR->QUAL[d.seq].OPERATING_PHYS_CD
;  col_num = 1973
  col col_num-1, UB04_ARR->QUAL[d.seq].OPERATING_PHYS_LIC
  col_num = 1983
  col col_num-1, UB04_ARR->QUAL[d.seq].OPERATING_PHYS_NPI
  col_num = 1996
;  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER1_PHYS_CD
;  col_num = 1998
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER1_PHYS_LIC
  col_num = 2008
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER1_PHYS_NPI
  col_num = 2021
;  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER2_PHYS_CD
;  col_num = 2023
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER2_PHYS_LIC
  col_num = 2033
  col col_num-1, UB04_ARR->QUAL[d.seq].OTHER2_PHYS_NPI
 
  col_num = 2046
  col col_num-1, UB04_ARR->QUAL[d.seq].JAR_ID
 
  col_num = 2058
  col col_num-1, UB04_ARR->QUAL[d.seq].SSN
 
  col_num = 2068
  col col_num-1, UB04_ARR->QUAL[d.seq].RACE
 
  if (UB04_ARR->QUAL[d.seq].ED_IND = 1)
    col_num = 2070
    col col_num-1, "9" ; ed visit type
    col_num = 2071
    col col_num-1, "9" ; ed visit outcome
  endif
 
  if (file_type = "IP")
    col_num = 2272
    if (UB04_ARR->QUAL[d.seq].ED_IND = 1)
      col col_num-1, "Y"
    else
      col col_num-1, "N"
    endif
    col_num = 2273
  endif
 
  col_num = 2299
  col col_num-1, UB04_ARR->QUAL[d.seq].STREET
  col_num = 2339
  col col_num-1, UB04_ARR->QUAL[d.seq].FIRST_NAME
  col_num = 2359
  col col_num-1, UB04_ARR->QUAL[d.seq].LAST_NAME
 
  col_num = 2389
  col col_num-1, UB04_ARR->QUAL[d.seq].P_INSURED_NAME
  col_num = 2439
  col col_num-1, UB04_ARR->QUAL[d.seq].S_INSURED_NAME
  col_num = 2489
  col col_num-1, UB04_ARR->QUAL[d.seq].T_INSURED_NAME
 
  row + 1
  if (size(UB04_ARR->QUAL[d.seq].LINES, 5) > 1)
    for (line_cnt = 2 to size(UB04_ARR->QUAL[d.seq].LINES, 5))
      col_num = 26
      col col_num-1, fin
      col_num = 51
      col col_num-1, mrn
      col_num = 76
      col col_num-1, UB04_ARR->QUAL[d.seq].BILL_TYPE
      col_num = 84
      col col_num-1, UB04_ARR->QUAL[d.seq].FED_TAX_ID
      col_num = 94
      col col_num-1, UB04_ARR->QUAL[d.seq].RPT_START_DATE
      col_num = 102,
      col col_num-1, UB04_ARR->QUAL[d.seq].RPT_END_DATE
      col_num = 110
      col col_num-1, UB04_ARR->QUAL[d.seq].CITY
      col_num = 140
      col col_num-1, UB04_ARR->QUAL[d.seq].STATE
      col_num = 142
      col col_num-1, UB04_ARR->QUAL[d.seq].ZIP
      col_num = 151
      col col_num-1, UB04_ARR->QUAL[d.seq].COUNTRY_CODE
      col_num = 155
      col col_num-1, UB04_ARR->QUAL[d.seq].BIRTH_DATE
      col_num = 163
      col col_num-1, UB04_ARR->QUAL[d.seq].SEX
      col_num = 164
      col col_num-1, UB04_ARR->QUAL[d.seq].ADMIT_DATE
      if (file_type = "IP")
        col_num = 172
        col col_num-1, UB04_ARR->QUAL[d.seq].ADMIT_HOUR
      endif
      col_num = 174
      col col_num-1, UB04_ARR->QUAL[d.seq].ADMIT_TYPE
      col_num = 176
      col col_num-1, UB04_ARR->QUAL[d.seq].ADMIT_SOURCE
      col_num = 178
      col col_num-1, UB04_ARR->QUAL[d.seq].DISCH_STATUS
      col_num = 180
      if (UB04_ARR->QUAL[d.seq].DNR = "Y")
        col col_num-1, UB04_ARR->QUAL[d.seq].DNR
      else
        col col_num-1, "N"
      endif
      col_num = 181
      col col_num-1, UB04_ARR->QUAL[d.seq].ACCIDENT_STATE
      col_num = 183
      col col_num-1, UB04_ARR->QUAL[d.seq].ACCIDENT_CODE
      col_num = 185
      col col_num-1, UB04_ARR->QUAL[d.seq].ACCIDENT_DATE
 
      col_num = 193
      col col_num-1, UB04_ARR->QUAL[d.seq].LINES[LINE_CNT].REVENUE_CODE
      col_num = 285
      col col_num-1, UB04_ARR->QUAL[d.seq].LINES[LINE_CNT].RATE_CODES
      col_num = 607
      col col_num-1, UB04_ARR->QUAL[d.seq].LINES[LINE_CNT].SERVICE_DATE
 
      col_num = 791
      col col_num-1, UB04_ARR->QUAL[d.seq].CREATE_DATE
 
      col_num = 799
      col col_num-1, UB04_ARR->QUAL[d.seq].LINES[LINE_CNT].UNITS_OF_SERVICE
 
      col_num = 960
      col col_num-1, UB04_ARR->QUAL[d.seq].LINES[LINE_CNT].CHARGES
 
      if (LINE_CNT = size(UB04_ARR->QUAL[d.seq].LINES, 5))
        col_num = 1190
        col col_num-1, UB04_ARR->QUAL[d.seq].TOTAL_CHARGES "##########;rp0"
      endif
 
      col_num = 1200
      col col_num-1, UB04_ARR->QUAL[d.seq].LINES[LINE_CNT].NON_CHARGES
 
      col_num = 1430
      col col_num-1,  UB04_ARR->QUAL[d.seq].TOTAL_NON_CHARGES "##########;rp0"
 
      col_num = 1440
      col col_num-1, UB04_ARR->QUAL[d.seq].P_PAYER_ID
      col_num = 1444
      col col_num-1, UB04_ARR->QUAL[d.seq].S_PAYER_ID
      col_num = 1448
      col col_num-1, UB04_ARR->QUAL[d.seq].T_PAYER_ID
 
      col_num = 1452
      col col_num-1, UB04_ARR->QUAL[d.seq].P_HEALTH_PLAN_ID
      col_num = 1467
      col col_num-1, UB04_ARR->QUAL[d.seq].S_HEALTH_PLAN_ID
      col_num = 1482
      col col_num-1, UB04_ARR->QUAL[d.seq].T_HEALTH_PLAN_ID
 
      col_num = 1497
      col col_num-1, UB04_ARR->QUAL[d.seq].NPI
 
      col_num = 1512
      col col_num-1, UB04_ARR->QUAL[d.seq].P_PAT_RELATIONSHIP
      col_num = 1514
      col col_num-1, UB04_ARR->QUAL[d.seq].S_PAT_RELATIONSHIP
      col_num = 1516
      col col_num-1, UB04_ARR->QUAL[d.seq].T_PAT_RELATIONSHIP
 
      col_num = 1518
      col col_num-1, UB04_ARR->QUAL[d.seq].P_INSURED_UNIQUE_ID
      col_num = 1538
      col col_num-1, UB04_ARR->QUAL[d.seq].S_INSURED_UNIQUE_ID
      col_num = 1558
      col col_num-1, UB04_ARR->QUAL[d.seq].T_INSURED_UNIQUE_ID
 
      col_num = 1578
      col col_num-1, UB04_ARR->QUAL[d.seq].P_INSURANCE_GRP_NBR
      col_num = 1595
      col col_num-1, UB04_ARR->QUAL[d.seq].S_INSURANCE_GRP_NBR
      col_num = 1612
      col col_num-1, UB04_ARR->QUAL[d.seq].T_INSURANCE_GRP_NBR
 
      col_num = 1629
      col col_num-1, UB04_ARR->QUAL[d.seq].EMPLOYER_NAME
 
      col_num = 1654
      col col_num-1, UB04_ARR->QUAL[d.seq].DX_QUALIFIER
      col_num = 1656
      col col_num-1, UB04_ARR->QUAL[d.seq].PRNPL_DX_CD
 
      col_num = 1664
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX1
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX2
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX3
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX4
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX5
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX6
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX7
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX8
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX9
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX10
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX11
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX12
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX13
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX14
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX15
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX16
      col_num = col_num + 8
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_DX17
 
      if (file_type = "IP")
        col_num = 1800
        col col_num-1, UB04_ARR->QUAL[d.seq].ADMIT_DX_CD
      endif
 
      if (file_type != "IP")
        col_num = 1807
        col col_num-1, UB04_ARR->QUAL[d.seq].VISIT_REASON_CD
      endif
 
      col_num = 1828
      col col_num-1, UB04_ARR->QUAL[d.seq].PPS_CODE
 
      col_num = 1832
      col col_num-1, UB04_ARR->QUAL[d.seq].CAUSE_OF_INJURY
 
      if (file_type = "IP")
        col_num = 1856
        col col_num-1, UB04_ARR->QUAL[d.seq].PRNPL_PROC_CD_DT
 
        col_num = 1871
        col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_PROC_CD_DT1
        col_num = 1886
        col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_PROC_CD_DT2
        col_num = 1901
        col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_PROC_CD_DT3
        col_num = 1916
        col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_PROC_CD_DT4
        col_num = 1931
        col col_num-1, UB04_ARR->QUAL[d.seq].OTHER_PROC_CD_DT5
      endif
 
      col_num = 1946
;      col col_num-1, UB04_ARR->QUAL[d.seq].ATTENDING_PHYS_CD
;      col_num = 1948
      col col_num-1, UB04_ARR->QUAL[d.seq].ATTENDING_PHYS_LIC
      col_num = 1958
      col col_num-1, UB04_ARR->QUAL[d.seq].ATTENDING_PHYS_NPI
      col_num = 1971
;      col col_num-1, UB04_ARR->QUAL[d.seq].OPERATING_PHYS_CD
;      col_num = 1973
      col col_num-1, UB04_ARR->QUAL[d.seq].OPERATING_PHYS_LIC
      col_num = 1983
      col col_num-1, UB04_ARR->QUAL[d.seq].OPERATING_PHYS_NPI
      col_num = 1996
;      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER1_PHYS_CD
;      col_num = 1998
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER1_PHYS_LIC
      col_num = 2008
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER1_PHYS_NPI
      col_num = 2021
;      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER2_PHYS_CD
;      col_num = 2023
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER2_PHYS_LIC
      col_num = 2033
      col col_num-1, UB04_ARR->QUAL[d.seq].OTHER2_PHYS_NPI
 
      col_num = 2046
      col col_num-1, UB04_ARR->QUAL[d.seq].JAR_ID
 
      col_num = 2058
      col col_num-1, UB04_ARR->QUAL[d.seq].SSN
 
      col_num = 2068
      col col_num-1, UB04_ARR->QUAL[d.seq].RACE
 
      if (UB04_ARR->QUAL[d.seq].ED_IND = 1)
        col_num = 2070
        col col_num-1, "9" ; ed visit type
        col_num = 2071
        col col_num-1, "9" ; ed visit outcome
      endif
 
 
      if (file_type = "IP")
        col_num = 2272
        if (UB04_ARR->QUAL[d.seq].ED_IND = 1)
          col col_num-1, "Y"
        else
          col col_num-1, "N"
        endif
        col_num = 2273
      endif
 
      col_num = 2299
      col col_num-1, UB04_ARR->QUAL[d.seq].STREET
      col_num = 2339
      col col_num-1, UB04_ARR->QUAL[d.seq].FIRST_NAME
      col_num = 2359
      col col_num-1, UB04_ARR->QUAL[d.seq].LAST_NAME
 
      col_num = 2389
      col col_num-1, UB04_ARR->QUAL[d.seq].P_INSURED_NAME
      col_num = 2439
      col col_num-1, UB04_ARR->QUAL[d.seq].S_INSURED_NAME
      col_num = 2489
      col col_num-1, UB04_ARR->QUAL[d.seq].T_INSURED_NAME
 
      row + 1
    endfor
  endif
 
 with nocounter, maxcol = 2540, maxrow = 1,append
 
/*
 select into "nl:" ;;never use $outdev when using _memory_reply_String
 from dummyt
 head report
  _memory_reply_string = UB04_ARR->QUAL[1].XML ;frec->file_buf
 with nocounter
 
/*
  select into "morteza.txt"
  from dummyt d
  detail
   col 0  _memory_reply_string
  ;with nocounter, maxcol = 35000
  with  maxcol = 250000, format = variable, noheading, memsort, formfeed = none, maxrow = 1
;*/
ENDIF ; IF (SIZE(UB04_ARR->QUAL,5) > 0)
  SET TEMP_BEG_DT_TM = TEMP_END_DT_TM
ENDFOR
 
 
/*********************************************************************************************************
*               						SUBROUTINES
*********************************************************************************************************/
 
DECLARE InitializeATypeList (IDX = I4) =  NULL
SUBROUTINE InitializeATypeList(IDX)
		SET UB04_ARR->QUAL[IDX].NPI				= FILLSTRING(15," ")
	 	SET UB04_ARR->QUAL[IDX].FIN			 	= FILLSTRING(24," ")
	 	SET UB04_ARR->QUAL[IDX].MRN				= FILLSTRING(24," ")
	 	SET UB04_ARR->QUAL[IDX].BILL_TYPE		= FILLSTRING(4," ")
	 	SET UB04_ARR->QUAL[IDX].FED_TAX_ID		= FILLSTRING(10," ")
	 	SET UB04_ARR->QUAL[IDX].JAR_ID			= FILLSTRING(12," ")
	 	SET UB04_ARR->QUAL[IDX].RPT_START_DATE	= FILLSTRING(8," ")
	 	SET UB04_ARR->QUAL[IDX].RPT_END_DATE	= FILLSTRING(8," ")
	 	SET UB04_ARR->QUAL[IDX].LAST_NAME		= FILLSTRING(30," ")
	 	SET UB04_ARR->QUAL[IDX].FIRST_NAME		= FILLSTRING(20," ")
	 	SET UB04_ARR->QUAL[IDX].STREET			= FILLSTRING(40," ")
	 	SET UB04_ARR->QUAL[IDX].CITY			= FILLSTRING(30," ")
	 	SET UB04_ARR->QUAL[IDX].STATE			= FILLSTRING(2," ")
	 	SET UB04_ARR->QUAL[IDX].ZIP				= FILLSTRING(9," ")
	 	SET UB04_ARR->QUAL[IDX].COUNTRY_CODE	= FILLSTRING(4," ")
	 	SET UB04_ARR->QUAL[IDX].SSN				= FILLSTRING(9," ")
	 	SET UB04_ARR->QUAL[IDX].BIRTH_DATE		= FILLSTRING(8," ")
	 	SET UB04_ARR->QUAL[IDX].SEX				= FILLSTRING(1," ")
	 	SET UB04_ARR->QUAL[IDX].ADMIT_DATE		= FILLSTRING(8," ")
	 	SET UB04_ARR->QUAL[IDX].ADMIT_HOUR		= FILLSTRING(2," ")
	 	SET UB04_ARR->QUAL[IDX].ADMIT_TYPE		= FILLSTRING(2," ")
	 	SET UB04_ARR->QUAL[IDX].ADMIT_SOURCE	= FILLSTRING(2," ")
	 	SET UB04_ARR->QUAL[IDX].DISCH_STATUS	= FILLSTRING(2," ")
	 	SET UB04_ARR->QUAL[IDX].DNR				= FILLSTRING(1," ")
	 	SET UB04_ARR->QUAL[IDX].ACCIDENT_STATE	= FILLSTRING(2," ")
	 	SET UB04_ARR->QUAL[IDX].PPS_CODE		= FILLSTRING(4," ")
	 	SET UB04_ARR->QUAL[IDX].ATTENDING_PHYS_NPI= FILLSTRING(13," ")
	 	SET UB04_ARR->QUAL[IDX].ATTENDING_PHYS_LIC= FILLSTRING(12," ")
;	 	SET UB04_ARR->QUAL[IDX].ATTENDING_PHYS_LIC = FILLSTRING(10," ")
	 	SET UB04_ARR->QUAL[IDX].ATTENDING_PHYS_CD = FILLSTRING(2," ")
	 	SET UB04_ARR->QUAL[IDX].OPERATING_PHYS_NPI= FILLSTRING(13," ")
	 	SET UB04_ARR->QUAL[IDX].OPERATING_PHYS_LIC = FILLSTRING(12," ")
;	 	SET UB04_ARR->QUAL[IDX].OPERATING_PHYS_LIC = FILLSTRING(10," ")
	 	SET UB04_ARR->QUAL[IDX].OPERATING_PHYS_CD = FILLSTRING(2," ")
	 	SET UB04_ARR->QUAL[IDX].OTHER1_PHYS_NPI	= FILLSTRING(13," ")
	 	SET UB04_ARR->QUAL[IDX].OTHER1_PHYS_LIC	= FILLSTRING(12," ")
;	 	SET UB04_ARR->QUAL[IDX].OTHER1_PHYS_LIC	= FILLSTRING(10," ")
	 	SET UB04_ARR->QUAL[IDX].OTHER1_PHYS_CD	= FILLSTRING(2," ")
	 	SET UB04_ARR->QUAL[IDX].OTHER2_PHYS_NPI	= FILLSTRING(13," ")
	 	SET UB04_ARR->QUAL[IDX].OTHER2_PHYS_LIC	= FILLSTRING(12," ")
;	 	SET UB04_ARR->QUAL[IDX].OTHER2_PHYS_LIC	= FILLSTRING(10," ")
	 	SET UB04_ARR->QUAL[IDX].OTHER2_PHYS_CD	= FILLSTRING(2," ")
	 	SET UB04_ARR->QUAL[IDX].RACE			= FILLSTRING(2," ")
		SET UB04_ARR->QUAL[IDX].CREATE_DATE		= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].ACCIDENT_DATE	= FILLSTRING(8," ")
	 	SET UB04_ARR->QUAL[IDX].ACCIDENT_CODE	= FILLSTRING(2," ")
		SET UB04_ARR->QUAL[IDX].EMPLOYER_NAME	= FILLSTRING(25," ")
 
	 	SET UB04_ARR->QUAL[IDX]->P_PAYER_ID         = FILLSTRING(4," ")
		SET UB04_ARR->QUAL[IDX]->P_HEALTH_PLAN_ID	= FILLSTRING(15," ")
		SET UB04_ARR->QUAL[IDX]->P_INSURED_NAME		= FILLSTRING(50," ")
		SET UB04_ARR->QUAL[IDX]->P_PAT_RELATIONSHIP	= FILLSTRING(2," ")
		SET UB04_ARR->QUAL[IDX]->P_INSURED_UNIQUE_ID= FILLSTRING(20," ")
	 	SET UB04_ARR->QUAL[IDX]->S_PAYER_ID         = FILLSTRING(4," ")
		SET UB04_ARR->QUAL[IDX]->S_HEALTH_PLAN_ID	= FILLSTRING(15," ")
		SET UB04_ARR->QUAL[IDX]->S_INSURED_NAME		= FILLSTRING(50	," ")
		SET UB04_ARR->QUAL[IDX]->S_PAT_RELATIONSHIP	= FILLSTRING(2	," ")
		SET UB04_ARR->QUAL[IDX]->S_INSURED_UNIQUE_ID= FILLSTRING(20	," ")
	 	SET UB04_ARR->QUAL[IDX]->T_PAYER_ID         = FILLSTRING(4," ")
		SET UB04_ARR->QUAL[IDX]->T_HEALTH_PLAN_ID	= FILLSTRING(15	," ")
		SET UB04_ARR->QUAL[IDX]->T_INSURED_NAME		= FILLSTRING(50," ")
		SET UB04_ARR->QUAL[IDX]->T_PAT_RELATIONSHIP	= FILLSTRING(2," ")
		SET UB04_ARR->QUAL[IDX]->T_INSURED_UNIQUE_ID= FILLSTRING(20," ")
 
		SET UB04_ARR->QUAL[IDX]->P_INSURANCE_GRP_NBR= FILLSTRING(17," ")
		SET UB04_ARR->QUAL[IDX]->S_INSURANCE_GRP_NBR= FILLSTRING(17," ")
		SET UB04_ARR->QUAL[IDX]->T_INSURANCE_GRP_NBR= FILLSTRING(17," ")
 
		SET UB04_ARR->QUAL[IDX].DX_QUALIFIER		= FILLSTRING(2," ")
		SET UB04_ARR->QUAL[IDX].ADMIT_DX_CD			= FILLSTRING(7," ")
		SET UB04_ARR->QUAL[IDX].VISIT_REASON_CD		= FILLSTRING(21," ")
		SET UB04_ARR->QUAL[IDX].CAUSE_OF_INJURY		= FILLSTRING(24," ")	;External Cause
		SET UB04_ARR->QUAL[IDX].PRNPL_DX_CD			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX1			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX2			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX3			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX4			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX5			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX6			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX7			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX8			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX9			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX10			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX11			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX12			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX13			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX14			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX15			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX16			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].OTHER_DX17			= FILLSTRING(8," ")
		SET UB04_ARR->QUAL[IDX].PRNPL_PROC_CD_DT	= FILLSTRING(15," ")
		SET UB04_ARR->QUAL[IDX].OTHER_PROC_CD_DT1	= FILLSTRING(15," ")
		SET UB04_ARR->QUAL[IDX].OTHER_PROC_CD_DT2	= FILLSTRING(15," ")
		SET UB04_ARR->QUAL[IDX].OTHER_PROC_CD_DT3	= FILLSTRING(15," ")
		SET UB04_ARR->QUAL[IDX].OTHER_PROC_CD_DT4	= FILLSTRING(15," ")
		SET UB04_ARR->QUAL[IDX].OTHER_PROC_CD_DT5	= FILLSTRING(15," ")
END ;InitializeATypeList Subroutine
 
 
DECLARE InitializeLinesList (A_IDX = I4,IDX = I4) =  NULL
SUBROUTINE InitializeLinesList(A_IDX,IDX)
		 	SET UB04_ARR->QUAL[A_IDX]->LINES[IDX].REVENUE_CODE		= FILLSTRING(92," ")
		 	SET UB04_ARR->QUAL[A_IDX]->LINES[IDX].RATE_CODES		= FILLSTRING(322," ")
		 	SET UB04_ARR->QUAL[A_IDX]->LINES[IDX].SERVICE_DATE		= FILLSTRING(184," ")
		 	SET UB04_ARR->QUAL[A_IDX]->LINES[IDX].UNITS_OF_SERVICE	= FILLSTRING(161," ")
		 	SET UB04_ARR->QUAL[A_IDX]->LINES[IDX].CHARGES		    = FILLSTRING(230," ")
		 	SET UB04_ARR->QUAL[A_IDX]->LINES[IDX].NON_CHARGES	    = FILLSTRING(230," ")
END ;InitializeLinesList Subroutine
 
 
DECLARE MergeRecords (KEEP_INDEX = I4, DEL_INDEX = I4) =  NULL
SUBROUTINE MergeRecords (KEEP_INDEX, DEL_INDEX)
            SET UB04_ARR->QUAL[KEEP_INDEX].ED_IND = 1
 
            IF (UB04_ARR->QUAL[DEL_INDEX].LAB_IND = 1)
              SET UB04_ARR->QUAL[KEEP_INDEX].LAB_IND = 1
            ENDIF
 
            IF (CNVTDATE(UB04_ARR->QUAL[DEL_INDEX].CREATE_DATE) < CNVTDATE(UB04_ARR->QUAL[KEEP_INDEX].CREATE_DATE))
              SET UB04_ARR->QUAL[KEEP_INDEX].CREATE_DATE = UB04_ARR->QUAL[DEL_INDEX].CREATE_DATE
            ENDIF
 
            IF (CNVTDATETIME(UB04_ARR->QUAL[DEL_INDEX].RPT_START_DT_TM) < CNVTDATETIME(UB04_ARR->QUAL[KEEP_INDEX].RPT_START_DT_TM))
              SET UB04_ARR->QUAL[KEEP_INDEX].RPT_START_DATE = UB04_ARR->QUAL[DEL_INDEX].RPT_START_DATE
              SET UB04_ARR->QUAL[KEEP_INDEX].RPT_START_DT_TM = UB04_ARR->QUAL[DEL_INDEX].RPT_START_DT_TM
            ENDIF
 
            IF (CNVTDATETIME(UB04_ARR->QUAL[DEL_INDEX].RPT_END_DT_TM) > CNVTDATETIME(UB04_ARR->QUAL[KEEP_INDEX].RPT_END_DT_TM))
              SET UB04_ARR->QUAL[KEEP_INDEX].RPT_END_DATE = UB04_ARR->QUAL[DEL_INDEX].RPT_END_DATE
              SET UB04_ARR->QUAL[KEEP_INDEX].RPT_END_DT_TM = UB04_ARR->QUAL[DEL_INDEX].RPT_END_DT_TM
            ENDIF
 
            SET UB04_ARR->QUAL[KEEP_INDEX].TOTAL_CHARGES = UB04_ARR->QUAL[KEEP_INDEX].TOTAL_CHARGES +
            											   UB04_ARR->QUAL[DEL_INDEX].TOTAL_CHARGES
            SET UB04_ARR->QUAL[KEEP_INDEX].TOTAL_NON_CHARGES = UB04_ARR->QUAL[KEEP_INDEX].TOTAL_NON_CHARGES +
            											       UB04_ARR->QUAL[DEL_INDEX].TOTAL_NON_CHARGES
 
            SET NEW_LINE = 0
            SET KEEP_LAST_LINE = SIZE(UB04_ARR->QUAL[KEEP_INDEX].LINES, 5)
            SET DEL_LAST_LINE  = SIZE(UB04_ARR->QUAL[DEL_INDEX].LINES, 5)
            SET KEEP_CNT = UB04_ARR->QUAL[KEEP_INDEX].CHG_CNT
            SET DEL_CNT = UB04_ARR->QUAL[DEL_INDEX].CHG_CNT
            IF (KEEP_CNT = 23)
              SET FULL_IND = 1
            ELSE
              SET FULL_IND = 0
            ENDIF
 
            IF (DEL_LAST_LINE <= 1)
              IF (KEEP_CNT + DEL_CNT <= 23)
            ;;charges
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].CHARGES =
                  CONCAT(SUBSTRING(1, KEEP_CNT*CHG_LEN, UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].CHARGES),
                  	     SUBSTRING(1, DEL_CNT*CHG_LEN,  UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].CHARGES))
			;;non-charges
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].NON_CHARGES =
                  CONCAT(SUBSTRING(1, KEEP_CNT*CHG_LEN, UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].NON_CHARGES),
                  	     SUBSTRING(1, DEL_CNT*CHG_LEN,  UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].NON_CHARGES))
            ;;rate-codes
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].RATE_CODES =
                  CONCAT(SUBSTRING(1, KEEP_CNT*RATE_LEN, UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].RATE_CODES),
                  	     SUBSTRING(1, DEL_CNT*RATE_LEN,  UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].RATE_CODES))
            ;;revenue-codes
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].REVENUE_CODE =
                  CONCAT(SUBSTRING(1, KEEP_CNT*REV_LEN, UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].REVENUE_CODE),
                  	     SUBSTRING(1, DEL_CNT*REV_LEN,  UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].REVENUE_CODE))
            ;;dos
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].SERVICE_DATE =
                  CONCAT(SUBSTRING(1, KEEP_CNT*DOS_LEN, UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].SERVICE_DATE),
                  	     SUBSTRING(1, DEL_CNT*DOS_LEN,  UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].SERVICE_DATE))
            ;;uos
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].UNITS_OF_SERVICE =
                  CONCAT(SUBSTRING(1, KEEP_CNT*UOS_LEN, UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].UNITS_OF_SERVICE),
                  	     SUBSTRING(1, DEL_CNT*UOS_LEN,  UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].UNITS_OF_SERVICE))
 
              ELSE  ; keep-cnt + del-cnt > 23
 
                SET NEW_LINE = KEEP_LAST_LINE + 1
                SET STAT = ALTERLIST(UB04_ARR->QUAL[KEEP_INDEX].LINES, NEW_LINE)
         		CALL InitializeLinesList(KEEP_INDEX, NEW_LINE)
 
                IF (FULL_IND = 1)
            ;;charges
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].CHARGES =
                    SUBSTRING(1, DEL_CNT*CHG_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].CHARGES)
            ;;non-charges
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].NON_CHARGES =
                    SUBSTRING(1, DEL_CNT*CHG_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].NON_CHARGES)
            ;;rate-codes
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].RATE_CODES =
                    SUBSTRING(1, DEL_CNT*RATE_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].RATE_CODES)
            ;;revenue-codes
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].REVENUE_CODE =
                    SUBSTRING(1, DEL_CNT*REV_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].REVENUE_CODE)
            ;;dos
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].SERVICE_DATE =
                    SUBSTRING(1, DEL_CNT*DOS_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].SERVICE_DATE)
            ;;uos
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].UNITS_OF_SERVICE =
                    SUBSTRING(1, DEL_CNT*UOS_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].UNITS_OF_SERVICE)
 
                ELSE ; full_ind = 0
 
;call echo(SUBSTRING((23-KEEP_CNT)*CHG_LEN+1, (DEL_CNT-23+KEEP_CNT)*CHG_LEN,UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].CHARGES))
 
            ;;charges
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].CHARGES =
                    CONCAT(SUBSTRING(1, KEEP_CNT*CHG_LEN,  UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].CHARGES),
                  	       SUBSTRING(1, (23-KEEP_CNT)*CHG_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].CHARGES))
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].CHARGES =
                    SUBSTRING((23-KEEP_CNT)*CHG_LEN+1, (DEL_CNT-(23-KEEP_CNT))*CHG_LEN,
                              UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].CHARGES)
 
            ;;non-charges
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].NON_CHARGES =
                    CONCAT(SUBSTRING(1, KEEP_CNT*CHG_LEN,  UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].NON_CHARGES),
                  	       SUBSTRING(1, (23-KEEP_CNT)*CHG_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].NON_CHARGES))
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].NON_CHARGES =
                    SUBSTRING((23-KEEP_CNT)*CHG_LEN+1, (DEL_CNT-(23-KEEP_CNT))*CHG_LEN,
                              UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].NON_CHARGES)
            ;;rate-codes
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].RATE_CODES =
                    CONCAT(SUBSTRING(1, KEEP_CNT*RATE_LEN,  UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].RATE_CODES),
                  	       SUBSTRING(1, (23-KEEP_CNT)*RATE_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].RATE_CODES))
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].RATE_CODES =
                    SUBSTRING((23-KEEP_CNT)*RATE_LEN+1, (DEL_CNT-(23-KEEP_CNT))*RATE_LEN,
                              UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].RATE_CODES)
            ;;revenue-codes
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].REVENUE_CODE =
                    CONCAT(SUBSTRING(1, KEEP_CNT*REV_LEN,  UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].REVENUE_CODE),
                  	       SUBSTRING(1, (23-KEEP_CNT)*REV_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].REVENUE_CODE))
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].REVENUE_CODE =
                    SUBSTRING((23-KEEP_CNT)*REV_LEN+1, (DEL_CNT-(23-KEEP_CNT))*REV_LEN,
                              UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].REVENUE_CODE)
            ;;dos
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].SERVICE_DATE =
                    CONCAT(SUBSTRING(1, KEEP_CNT*DOS_LEN,  UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].SERVICE_DATE),
                  	       SUBSTRING(1, (23-KEEP_CNT)*DOS_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].SERVICE_DATE))
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].SERVICE_DATE =
                    SUBSTRING((23-KEEP_CNT)*DOS_LEN+1, (DEL_CNT-(23-KEEP_CNT))*DOS_LEN,
                              UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].SERVICE_DATE)
            ;;uos
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].UNITS_OF_SERVICE =
                    CONCAT(SUBSTRING(1, KEEP_CNT*UOS_LEN,  UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].UNITS_OF_SERVICE),
                  	       SUBSTRING(1, (23-KEEP_CNT)*UOS_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].UNITS_OF_SERVICE))
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].UNITS_OF_SERVICE =
                    SUBSTRING((23-KEEP_CNT)*UOS_LEN+1, (DEL_CNT-(23-KEEP_CNT))*UOS_LEN,
                              UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].UNITS_OF_SERVICE)
                ENDIF
			  ENDIF
 
			ELSE ; del-last-line is greater than 1
 
              SET NEW_LINE = KEEP_LAST_LINE + DEL_LAST_LINE
              SET STAT = ALTERLIST(UB04_ARR->QUAL[KEEP_INDEX].LINES, NEW_LINE)
              FOR (JJ = KEEP_LAST_LINE+1 TO NEW_LINE)
           		CALL InitializeLinesList(KEEP_INDEX, JJ)
           	  ENDFOR
 
            ;;charges
              SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].CHARGES = UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].CHARGES
            ;;non-charges
              SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].NON_CHARGES =
                  UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].NON_CHARGES
            ;;rate-codes
              SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].RATE_CODES =
                  UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].RATE_CODES
            ;;revenue-codes
              SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].REVENUE_CODE =
                  UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].REVENUE_CODE
            ;;dos
              SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].SERVICE_DATE =
                  UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].SERVICE_DATE
            ;;uos
              SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].UNITS_OF_SERVICE =
                  UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE].UNITS_OF_SERVICE
 
              FOR (II = 1 TO DEL_LAST_LINE-1)
            ;;charges
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE+II-1].CHARGES = UB04_ARR->QUAL[DEL_INDEX].LINES[II].CHARGES
            ;;non-charges
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE+II-1].NON_CHARGES =
                    UB04_ARR->QUAL[DEL_INDEX].LINES[II].NON_CHARGES
            ;;rate-codes
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE+II-1].RATE_CODES =
                    UB04_ARR->QUAL[DEL_INDEX].LINES[II].RATE_CODES
            ;;revenue-codes
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE+II-1].REVENUE_CODE =
                    UB04_ARR->QUAL[DEL_INDEX].LINES[II].REVENUE_CODE
            ;;dos
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE+II-1].SERVICE_DATE =
                    UB04_ARR->QUAL[DEL_INDEX].LINES[II].SERVICE_DATE
            ;;uos
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[KEEP_LAST_LINE+II-1].UNITS_OF_SERVICE =
                    UB04_ARR->QUAL[DEL_INDEX].LINES[II].UNITS_OF_SERVICE
              ENDFOR
 
              IF (KEEP_CNT + DEL_CNT <= 23)
            ;;charges
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].CHARGES =
                  CONCAT(SUBSTRING(1, KEEP_CNT*CHG_LEN, UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].CHARGES),
                  	     SUBSTRING(1, DEL_CNT*CHG_LEN,  UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].CHARGES))
			;;non-charges
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].NON_CHARGES =
                  CONCAT(SUBSTRING(1, KEEP_CNT*CHG_LEN, UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].NON_CHARGES),
                  	     SUBSTRING(1, DEL_CNT*CHG_LEN,  UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].NON_CHARGES))
            ;;rate-codes
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].RATE_CODES =
                  CONCAT(SUBSTRING(1, KEEP_CNT*RATE_LEN, UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].RATE_CODES),
                  	     SUBSTRING(1, DEL_CNT*RATE_LEN,  UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].RATE_CODES))
            ;;revenue-codes
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].REVENUE_CODE =
                  CONCAT(SUBSTRING(1, KEEP_CNT*REV_LEN, UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].REVENUE_CODE),
                  	     SUBSTRING(1, DEL_CNT*REV_LEN,  UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].REVENUE_CODE))
            ;;dos
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].SERVICE_DATE =
                  CONCAT(SUBSTRING(1, KEEP_CNT*DOS_LEN, UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].SERVICE_DATE),
                  	     SUBSTRING(1, DEL_CNT*DOS_LEN,  UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].SERVICE_DATE))
            ;;uos
                SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].UNITS_OF_SERVICE =
                  CONCAT(SUBSTRING(1, KEEP_CNT*UOS_LEN, UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].UNITS_OF_SERVICE),
                  	     SUBSTRING(1, DEL_CNT*UOS_LEN,  UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].UNITS_OF_SERVICE))
 
                SET NEW_LINE = NEW_LINE - 1
                SET STAT = ALTERLIST(UB04_ARR->QUAL[KEEP_INDEX].LINES, NEW_LINE)
 
              ELSE  ; keep-cnt + del-cnt > 23
 
                IF (FULL_IND = 1)
            ;;charges
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].CHARGES =
                    SUBSTRING(1, DEL_CNT*CHG_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].CHARGES)
            ;;non-charges
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].NON_CHARGES =
                    SUBSTRING(1, DEL_CNT*CHG_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].NON_CHARGES)
            ;;rate-codes
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].RATE_CODES =
                    SUBSTRING(1, DEL_CNT*RATE_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].RATE_CODES)
            ;;revenue-codes
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].REVENUE_CODE =
                    SUBSTRING(1, DEL_CNT*REV_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].REVENUE_CODE)
            ;;dos
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].SERVICE_DATE =
                    SUBSTRING(1, DEL_CNT*DOS_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].SERVICE_DATE)
            ;;uos
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].UNITS_OF_SERVICE =
                    SUBSTRING(1, DEL_CNT*UOS_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].UNITS_OF_SERVICE)
 
                ELSE ; full_ind = 0
            ;;charges
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].CHARGES =
                    CONCAT(SUBSTRING(1, KEEP_CNT*CHG_LEN,  UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].CHARGES),
                  	       SUBSTRING(1, (23-KEEP_CNT)*CHG_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].CHARGES))
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].CHARGES =
                    SUBSTRING((23-KEEP_CNT)*CHG_LEN+1, (DEL_CNT-(23-KEEP_CNT))*CHG_LEN,
                              UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].CHARGES)
            ;;non-charges
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].NON_CHARGES =
                    CONCAT(SUBSTRING(1, KEEP_CNT*CHG_LEN,  UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].NON_CHARGES),
                  	       SUBSTRING(1, (23-KEEP_CNT)*CHG_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].NON_CHARGES))
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].NON_CHARGES =
                    SUBSTRING((23-KEEP_CNT)*CHG_LEN+1, (DEL_CNT-(23-KEEP_CNT))*CHG_LEN,
                              UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].NON_CHARGES)
            ;;rate-codes
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].RATE_CODES =
                    CONCAT(SUBSTRING(1, KEEP_CNT*RATE_LEN,  UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].RATE_CODES),
                  	       SUBSTRING(1, (23-KEEP_CNT)*RATE_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].RATE_CODES))
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].RATE_CODES =
                    SUBSTRING((23-KEEP_CNT)*RATE_LEN+1, (DEL_CNT-(23-KEEP_CNT))*RATE_LEN,
                              UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].RATE_CODES)
            ;;revenue-codes
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].REVENUE_CODE =
                    CONCAT(SUBSTRING(1, KEEP_CNT*REV_LEN,  UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].REVENUE_CODE),
                  	       SUBSTRING(1, (23-KEEP_CNT)*REV_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].REVENUE_CODE))
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].REVENUE_CODE =
                    SUBSTRING((23-KEEP_CNT)*REV_LEN+1, (DEL_CNT-(23-KEEP_CNT))*REV_LEN,
                              UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].REVENUE_CODE)
            ;;dos
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].SERVICE_DATE =
                    CONCAT(SUBSTRING(1, KEEP_CNT*DOS_LEN,  UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].SERVICE_DATE),
                  	       SUBSTRING(1, (23-KEEP_CNT)*DOS_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].SERVICE_DATE))
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].SERVICE_DATE =
                    SUBSTRING((23-KEEP_CNT)*DOS_LEN+1, (DEL_CNT-(23-KEEP_CNT))*DOS_LEN,
                              UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].SERVICE_DATE)
            ;;uos
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].UNITS_OF_SERVICE =
                    CONCAT(SUBSTRING(1, KEEP_CNT*UOS_LEN,  UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE-1].UNITS_OF_SERVICE),
                  	       SUBSTRING(1, (23-KEEP_CNT)*UOS_LEN, UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].UNITS_OF_SERVICE))
                  SET UB04_ARR->QUAL[KEEP_INDEX].LINES[NEW_LINE].UNITS_OF_SERVICE =
                    SUBSTRING((23-KEEP_CNT)*UOS_LEN+1, (DEL_CNT-(23-KEEP_CNT))*UOS_LEN,
                              UB04_ARR->QUAL[DEL_INDEX].LINES[DEL_LAST_LINE].UNITS_OF_SERVICE)
                ENDIF
			  ENDIF
            ENDIF
END ; MergeRecords
 
 
#EXIT_SCRIPT
/*
 SELECT INTO $1
	  QUAL_NPI = UB04_ARR->QUAL[D1.SEQ].NPI
	, QUAL_FIN = UB04_ARR->QUAL[D1.SEQ].FIN
	, QUAL_MRN = UB04_ARR->QUAL[D1.SEQ].MRN
	, QUAL_BILL_TYPE = UB04_ARR->QUAL[D1.SEQ].BILL_TYPE
	, QUAL_FED_TAX_SUB_ID = UB04_ARR->QUAL[D1.SEQ].FED_TAX_SUB_ID
	, QUAL_FED_TAX_ID = UB04_ARR->QUAL[D1.SEQ].FED_TAX_ID
	, QUAL_RPT_START_DATE = UB04_ARR->QUAL[D1.SEQ].RPT_START_DATE
	, QUAL_RPT_END_DATE = UB04_ARR->QUAL[D1.SEQ].RPT_END_DATE
	, QUAL_PERSON_ID = UB04_ARR->QUAL[D1.SEQ].PERSON_ID
	, QUAL_LAST_NAME = UB04_ARR->QUAL[D1.SEQ].LAST_NAME
	, QUAL_FIRST_NAME = UB04_ARR->QUAL[D1.SEQ].FIRST_NAME
	, QUAL_STREET = UB04_ARR->QUAL[D1.SEQ].STREET
	, QUAL_CITY = UB04_ARR->QUAL[D1.SEQ].CITY
	, QUAL_STATE = UB04_ARR->QUAL[D1.SEQ].STATE
	, QUAL_ZIP = UB04_ARR->QUAL[D1.SEQ].ZIP
	, QUAL_COUNTRY_CODE = UB04_ARR->QUAL[D1.SEQ].COUNTRY_CODE
	, QUAL_SSN = UB04_ARR->QUAL[D1.SEQ].SSN
	, QUAL_BIRTH_DATE = UB04_ARR->QUAL[D1.SEQ].BIRTH_DATE
	, QUAL_SEX = UB04_ARR->QUAL[D1.SEQ].SEX
	, QUAL_ADMIT_DATE = UB04_ARR->QUAL[D1.SEQ].ADMIT_DATE
	, QUAL_ADMIT_HOUR = UB04_ARR->QUAL[D1.SEQ].ADMIT_HOUR
	, QUAL_ADMIT_TYPE = UB04_ARR->QUAL[D1.SEQ].ADMIT_TYPE
	, QUAL_ADMIT_SOURCE = UB04_ARR->QUAL[D1.SEQ].ADMIT_SOURCE
	, QUAL_DISCH_STATUS = UB04_ARR->QUAL[D1.SEQ].DISCH_STATUS
	, QUAL_ACCIDENT_STATE = UB04_ARR->QUAL[D1.SEQ].ACCIDENT_STATE
	, QUAL_PPS_CODE = UB04_ARR->QUAL[D1.SEQ].PPS_CODE
	, QUAL_ATTENDING_PHYS_NPI = UB04_ARR->QUAL[D1.SEQ].ATTENDING_PHYS_NPI
	, QUAL_ATTENDING_PHYS_LIC = UB04_ARR->QUAL[D1.SEQ].ATTENDING_PHYS_LIC
	, QUAL_OPERATING_PHYS_NPI = UB04_ARR->QUAL[D1.SEQ].OPERATING_PHYS_NPI
	, QUAL_OPERATING_PHYS_LIC = UB04_ARR->QUAL[D1.SEQ].OPERATING_PHYS_LIC
	, QUAL_OTHER1_PHYS_NPI = UB04_ARR->QUAL[D1.SEQ].OTHER1_PHYS_NPI
	, QUAL_OTHER1_PHYS_LIC = UB04_ARR->QUAL[D1.SEQ].OTHER1_PHYS_LIC
	, QUAL_OTHER2_PHYS_NPI = UB04_ARR->QUAL[D1.SEQ].OTHER2_PHYS_NPI
	, QUAL_OTHER2_PHYS_LIC = UB04_ARR->QUAL[D1.SEQ].OTHER2_PHYS_LIC
	, QUAL_RACE = UB04_ARR->QUAL[D1.SEQ].RACE
	, EMPLOYER_NAME = UB04_ARR->QUAL[D1.SEQ].EMPLOYER_NAME
 
	, P_PAYER_ID = UB04_ARR->QUAL[D1.SEQ].P_PAYER_ID
	, S_PAYER_ID = UB04_ARR->QUAL[D1.SEQ].S_PAYER_ID
	, T_PAYER_ID = UB04_ARR->QUAL[D1.SEQ].T_PAYER_ID
 
	, P_HEALTH_PLAN_ID = UB04_ARR->QUAL[D1.SEQ].P_HEALTH_PLAN_ID
	, P_INSURED_NAME = UB04_ARR->QUAL[D1.SEQ].P_INSURED_NAME
	, P_PAT_RELATIONSHIP = UB04_ARR->QUAL[D1.SEQ].P_PAT_RELATIONSHIP
	, P_INSURED_UNIQUE_ID = UB04_ARR->QUAL[D1.SEQ].P_INSURED_UNIQUE_ID
	, S_HEALTH_PLAN_ID = UB04_ARR->QUAL[D1.SEQ].S_HEALTH_PLAN_ID
	, S_INSURED_NAME = UB04_ARR->QUAL[D1.SEQ].S_INSURED_NAME
	, S_PAT_RELATIONSHIP = UB04_ARR->QUAL[D1.SEQ].S_PAT_RELATIONSHIP
	, S_INSURED_UNIQUE_ID = UB04_ARR->QUAL[D1.SEQ].S_INSURED_UNIQUE_ID
	, T_HEALTH_PLAN_ID = UB04_ARR->QUAL[D1.SEQ].T_HEALTH_PLAN_ID
	, T_INSURED_NAME = UB04_ARR->QUAL[D1.SEQ].T_INSURED_NAME
	, T_PAT_RELATIONSHIP = UB04_ARR->QUAL[D1.SEQ].T_PAT_RELATIONSHIP
	, T_INSURED_UNIQUE_ID = UB04_ARR->QUAL[D1.SEQ].T_INSURED_UNIQUE_ID
 
	, P_INSURANCE_GRP_NBR = UB04_ARR->QUAL[D1.SEQ].P_INSURANCE_GRP_NBR
	, S_INSURANCE_GRP_NBR = UB04_ARR->QUAL[D1.SEQ].S_INSURANCE_GRP_NBR
	, T_INSURANCE_GRP_NBR = UB04_ARR->QUAL[D1.SEQ].T_INSURANCE_GRP_NBR
 
	, LINES_REVENUE_CODE = UB04_ARR->QUAL[D1.SEQ].LINES[D2.SEQ].REVENUE_CODE
	, LINES_RATE_CODES = UB04_ARR->QUAL[D1.SEQ].LINES[D2.SEQ].RATE_CODES
	, LINES_SERVICE_DATE = UB04_ARR->QUAL[D1.SEQ].LINES[D2.SEQ].SERVICE_DATE
	, LINES_UNITS_OF_SERVICE = UB04_ARR->QUAL[D1.SEQ].LINES[D2.SEQ].UNITS_OF_SERVICE
	, LINES_CHARGES = UB04_ARR->QUAL[D1.SEQ].LINES[D2.SEQ].CHARGES
	, LINES_NON_CHARGES = UB04_ARR->QUAL[D1.SEQ].LINES[D2.SEQ].NON_CHARGES
 
	, DX_QUALIFIER = UB04_ARR->QUAL[D1.SEQ].DX_QUALIFIER
	, ADMIT_DX_CD = UB04_ARR->QUAL[D1.SEQ].ADMIT_DX_CD
	, VISIT_REASON_CD = UB04_ARR->QUAL[D1.SEQ].VISIT_REASON_CD
	, CAUSE_OF_INJURY = UB04_ARR->QUAL[D1.SEQ].CAUSE_OF_INJURY
	, PRNPL_DX_CD = UB04_ARR->QUAL[D1.SEQ].PRNPL_DX_CD
	, PRNPL_PROC_CD_DT = UB04_ARR->QUAL[D1.SEQ].PRNPL_PROC_CD_DT
	, OTHER_DX1 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX1
	, OTHER_DX2 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX2
	, OTHER_DX3 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX3
	, OTHER_DX4 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX4
	, OTHER_DX5 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX5
	, OTHER_DX6 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX6
	, OTHER_DX7 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX7
	, OTHER_DX8 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX8
	, OTHER_DX9 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX9
	, OTHER_DX10 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX10
	, OTHER_DX11 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX11
	, OTHER_DX12 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX12
	, OTHER_DX13 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX13
	, OTHER_DX14 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX14
	, OTHER_DX15 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX15
	, OTHER_DX16 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX16
	, OTHER_DX17 = UB04_ARR->QUAL[D1.SEQ].OTHER_DX17
	, OTHER_PROC_CD_DT1 = UB04_ARR->QUAL[D1.SEQ].OTHER_PROC_CD_DT1
	, OTHER_PROC_CD_DT2 = UB04_ARR->QUAL[D1.SEQ].OTHER_PROC_CD_DT2
	, OTHER_PROC_CD_DT3 = UB04_ARR->QUAL[D1.SEQ].OTHER_PROC_CD_DT3
	, OTHER_PROC_CD_DT4 = UB04_ARR->QUAL[D1.SEQ].OTHER_PROC_CD_DT4
	, OTHER_PROC_CD_DT5 = UB04_ARR->QUAL[D1.SEQ].OTHER_PROC_CD_DT5
 FROM
	  (DUMMYT D1 WITH SEQ = VALUE(SIZE(UB04_ARR->QUAL, 5))), D2
 PLAN D1
   WHERE MAXREC(D2, VALUE(SIZE(UB04_ARR->QUAL[D1.SEQ].LINES)))
 JOIN D2
 ORDER BY D1.SEQ
 WITH FORMAT, SEPARATOR = " "
;*/
 
;CALL ECHORECORD(UB04_ARR)
;CALL ECHORECORD(frec)
;call echorecord(UB04_ARR, "morteza")
;call echo(UB04_ARR->QUAL[1].XML)
;stop-here
 
END
GO
