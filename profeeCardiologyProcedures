
DROP PROGRAM amj_tn_card_profee_drv:DBA GO
CREATE PROGRAM amj_tn_card_profee_drv:DBA
 
prompt
	"OUTPUT TO FILE/PRINTER/MINE" = "MINE"
	, "Please select the start date." = "CURDATE"
	, "Please select the end date." = "CURDATE"
 
with OUTDEV, START_DATE, END_DATE
 
/**************************************************************
DEBUGGING
 
The variables for debugging and ops jobs are set here.
**************************************************************/
 
/* Declaring the variables that enable the prompts to be automatically
entered in Debugging mode, or manually entered otherwise */
DECLARE DEBUGGING_ON = I1 WITH CONSTANT(FALSE), PROTECT ; Debugging off
;DECLARE DEBUGGING_ON = I1 WITH CONSTANT(TRUE), PROTECT	; Debugging on
 
/* Declares the set of variables that may be altered for the purposes
of debugging the report. */
DECLARE pSTART_DATE = C20 WITH NOCONSTANT(""), PROTECT
DECLARE pEND_DATE = C20 WITH NOCONSTANT(""), PROTECT
 
/* Sets the values of the variables for use in debugging */
IF (DEBUGGING_ON = TRUE)
 
	SET pSTART_DATE = "31-OCT-2018 00:00:00"
	SET pEND_DATE = "05-NOV-2018 23:59:59"
 
/* Sets the values of the variables for use in production */
ELSE
 
	/* Tests to see if the report is being run as an ops job. This section
	will set the variable values as a constant for ops job reports. */
	IF(VALIDATE(REQUEST->BATCH_SELECTION))
 
		SET pSTART_DATE = FORMAT(CNVTDATETIME(CURDATE - 2, 000000), "DD-MMM-YYYY HH:MM:SS;;D")
		SET pEND_DATE = FORMAT(CNVTDATETIME(CURDATE - 2, 235959), "DD-MMM-YYYY HH:MM:SS;;D")
 
	/* The variable values for standard production reports are set here. */
	ELSE
 
		SET pSTART_DATE = CONCAT($START_DATE, " 00:00:00")
		SET pEND_DATE = CONCAT($END_DATE, " 23:59:59")
 
	ENDIF
ENDIF
 
/**************************************************************
RECORD STRUCTURES
 
Declaring the record structure for the report
**************************************************************/
 
FREE RECORD DATA
RECORD DATA
(
	1 CNT							= I4
	1 REC[*]
		2 rPERSON_ID				= F8
		2 rENCNTR_ID				= F8
		2 rPFT_ENCNTR_ID			= F8
	    2 rPATIENT_LAST_NAME		= C50
	    2 rPATIENT_FIRST_NAME		= C50
	    2 rDOB						= DQ8
	    2 rDOB_TZ					= I4
	    2 rSEX						= F8
	    2 rMARITAL_STATUS			= F8
	    2 rPATIENT_TYPE				= F8
	    2 rADMIT_DATE				= DQ8
	    2 rDISCHARGE_DATE			= DQ8
	    2 rACCOUNT_NUMBER			= C15
	    2 rSSN						= C10
	    2 rSTREET_ADDR				= C50
	    2 rCITY						= C50
	    2 rSTATE					= F8
	    2 rZIP						= C10
	    2 rPHONE					= C10
	    2 rPHONE_FORMAT				= F8
	    2 rEMPLOYER					= C100
	    2 rGUARANTOR_LAST_NAME		= C50
	    2 rGUARANTOR_FIRST_NAME		= C50
	    2 rRELATION_TO_PATIENT		= F8
	    2 rGUARANTOR_DOB			= DQ8
	    2 rGUARANTOR_DOB_TZ			= I4
	    2 rGUARANTOR_ADDRESS		= C50
	    2 rGUARANTOR_CITY			= C50
	    2 rGUARANTOR_STATE			= F8
	    2 rGUARANTOR_ZIP			= C10
	    2 rGUARANTOR_PHONE			= C15
	    2 rGUARANTOR_PHONE_FORMAT	= F8
	    2 rINSURANCE1				= C50
	    2 rSUBSCRIBER_NUMBER1		= C50
	    2 rPOLICY_NUMBER1			= C50
	    2 rINSURED_LAST_NAME1		= C50
	    2 rINSURED_FIRST_NAME1		= C50
	    2 rRELATIONSHIP_TO_PATIENT1 = F8
	    2 rINSURED_DOB1				= DQ8
	    2 rINSURED_DOB_TZ1			= I4
	    2 rINSURED_ADDRESS1			= C50
	    2 rINSURED_CITY1			= C50
	    2 rINSURED_STATE1			= F8
	    2 rINSURED_ZIP1				= C10
	    2 rINSURANCE2				= C50
	    2 rSUBSCRIBER_NUMBER2		= C50
	    2 rPOLICY_NUMBER2			= C50
	    2 rINSURED_LAST_NAME2		= C50
	    2 rINSURED_FIRST_NAME2		= C50
	    2 rRELATIONSHIP_TO_PATIENT2 = F8
	    2 rINSURED_DOB2				= DQ8
	    2 rINSURED_DOB_TZ2			= I4
	    2 rINSURED_ADDRESS2			= C50
	    2 rINSURED_CITY2			= C50
	    2 rINSURED_STATE2			= F8
	    2 rINSURED_ZIP2				= C10
	    2 rINSURANCE3				= C50
	    2 rSUBSCRIBER_NUMBER3		= C50
	    2 rPOLICY_NUMBER3			= C50
	    2 rINSURED_LAST_NAME3		= C50
	    2 rINSURED_FIRST_NAME3		= C50
	    2 rRELATIONSHIP_TO_PATIENT3 = F8
	    2 rINSURED_DOB3				= DQ8
	    2 rINSURED_DOB_TZ3			= I4
	    2 rINSURED_ADDRESS3			= C50
	    2 rINSURED_CITY3			= C50
	    2 rINSURED_STATE3			= F8
	    2 rINSURED_ZIP3				= C10
	    2 rREADING_PHYSICIAN		= C100
	    2 rORDERING_PHYSICIAN		= C100
	    2 rFACILITY					= F8
	    2 rCHG_CNT					= I4
	    2 CHGS[*]
			3 rCHARGE_ITEM_ID		 	= F8
	    	3 rDATE_OF_SERVICE			= DQ8
	    	3 rCPT						= C100
)
 
/*****************************************************************
REPORT VARIABLES
 
Declaring variables for the report
******************************************************************/
 
DECLARE vVERSION = VC WITH CONSTANT("CUST_SCRIPT:MAUR_TN_CARD_PROFEE_DRV - 1.0"), PROTECT
;Array Index counter
DECLARE CNT = I4 WITH NOCONSTANT(0),PROTECT
DECLARE vCUR_DT = C11 WITH CONSTANT(FORMAT(SYSDATE, "DD-MMM-YYYY;;D")), PROTECT
DECLARE vCUR_DT_TM = VC WITH CONSTANT(FORMAT(SYSDATE, "DD-MMM-YYYY HH:MM;;D")), PROTECT
DECLARE vDATE_DSP = VC WITH CONSTANT(CONCAT("REPORT RUN DATE: ", vCUR_DT_TM)), PROTECT
;DECLARE vOUTPUT_FILE = VC WITH CONSTANT(CONCAT("CCLUSERDIR:Cardiology_Profee_Extract", vCUR_DT, ".csv")), PROTECT
DECLARE vDISPLAY_IND = I2 WITH CONSTANT(0), PROTECT
 
;Code value variables
DECLARE cACTIVE = F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY", 48, "ACTIVE")), PROTECT
 
;Variable for displaying the name of the person running this report
DECLARE vUSR_NM = VC WITH PROTECT
 
;Select to get USERNAME of report runner
SELECT INTO "NL:"
 
FROM PRSNL P
 
WHERE P.PERSON_ID = REQINFO -> UPDT_ID
 
DETAIL
	vUSR_NM = P.NAME_FULL_FORMATTED
 
WITH NOCOUNTER
 
DECLARE vRUN_DSP = VC WITH CONSTANT(CONCAT("RUN BY: ", vUSR_NM)), PROTECT
 
 
/*****************************************************************
PRIMARY DATA COLLECTION
 
This section contains the primary qualifiers for the report and
gathers the initial set of data.
******************************************************************/
 
SELECT INTO "NL:"
	qPERSON_ID = E.PERSON_ID
	, NAME = P.NAME_FULL_FORMATTED
	, qENCNTR_ID = E.ENCNTR_ID
	, qPFT_ENCNTR_ID = PE.PFT_ENCNTR_ID
	, qPATIENT_TYPE = E.ENCNTR_TYPE_CD
	, qADMIT_DATE = E.REG_DT_TM
	, qDISCHARGE_DATE = E.DISCH_DT_TM
	, qFACILITY = E.LOC_FACILITY_CD
 
FROM
	ENCOUNTER   E
	, PERSON P
	, PFT_ENCNTR   PE
 
PLAN E
	WHERE E.DISCH_DT_TM BETWEEN CNVTDATETIME(pSTART_DATE) AND CNVTDATETIME(pEND_DATE)
	AND E.ACTIVE_IND = 1
	AND E.ACTIVE_STATUS_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 48, "ACTIVE"))
	AND E.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
JOIN P
	WHERE P.PERSON_ID = E.PERSON_ID
	AND P.ACTIVE_IND = 1
	AND P.ACTIVE_STATUS_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 48, "ACTIVE"))
	AND P.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
JOIN PE
	WHERE PE.ENCNTR_ID = E.ENCNTR_ID
	AND PE.PFT_ENCNTR_ID =
	(
		SELECT
			PTR.PARENT_ENTITY_ID
		FROM
			PFT_TRANS_RELTN PTR
			, PFT_CHARGE PC
			, CHARGE C
			, CHARGE_MOD CM
		WHERE PTR.PARENT_ENTITY_ID = PE.PFT_ENCNTR_ID
		AND PTR.PARENT_ENTITY_NAME = "PFTENCNTR"
		AND PTR.TRANS_TYPE_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 18649, "CHARGE"))
		AND PTR.ACTIVE_IND = 1
		AND PTR.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
		AND PC.ACTIVITY_ID = PTR.ACTIVITY_ID
		AND PC.ACTIVE_IND = 1
		AND C.CHARGE_ITEM_ID = PC.CHARGE_ITEM_ID
		AND C.ACTIVE_IND = 1
		AND C.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
		AND CM.CHARGE_ITEM_ID = C.CHARGE_ITEM_ID
;		AND CM.FIELD1_ID = 667687.0
;		AND CM.FIELD6 IN
;		(
;			"413600014"
;			, "413600021"
;			, "413600022"
;			, "413600036"
;			, "413600052"
;			, "413600056"
;			, "413600501"
;			, "413602995"
;			, "413602996"
;			, "413603004"
;			, "413603005"
;			, "413603008"
;			, "413603008"
;			, "413603010"
;			, "413600114"
;			, "413603102"
;			, "413503500"
;			, "413603024"
;			, "413603022"
;			, "413600004"
;		)
;		AND CM.ACTIVE_IND = 1
;		AND CM.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
;	)
		AND CM.FIELD1_ID = 615214.0
		AND CM.FIELD6 IN
		(
			"93303"
			, "93304"
			, "93306"
			, "93307"
			, "93308"
			, "93320"
			, "93321"
			, "93325"
			, "93350"
			, "93351"
			, "93352"
			, "93015"
			, "93016"
			, "93017"
			, "93018"
			, "93015"
			, "93016"
			, "93017"
			, "93018"
			, "93312"
			, "93313"
			, "93314"
			, "93320"
			, "93321"
			, "93325"
			, "93272"
			, "93227"
		)
		AND CM.ACTIVE_IND = 1
		AND CM.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
	)
 
ORDER BY
	E.ENCNTR_ID
 
DETAIL
 
	CNT = CNT + 1
 
	STAT = ALTERLIST(DATA->REC, CNT)
 
	DATA->REC[CNT].rPERSON_ID = qPERSON_ID
	DATA->REC[CNT].rENCNTR_ID = qENCNTR_ID
	DATA->REC[CNT].rPFT_ENCNTR_ID = qPFT_ENCNTR_ID
	DATA->REC[CNT].rPATIENT_TYPE = qPATIENT_TYPE
	DATA->REC[CNT].rADMIT_DATE = qADMIT_DATE
	DATA->REC[CNT].rDISCHARGE_DATE = qDISCHARGE_DATE
	DATA->REC[CNT].rFACILITY = qFACILITY
 
	/* Any string records in the record structure not populated in this query
	must be set to "" here */
	DATA->REC[CNT].rPATIENT_LAST_NAME = ""
	DATA->REC[CNT].rPATIENT_FIRST_NAME = ""
	DATA->REC[CNT].rACCOUNT_NUMBER = ""
	DATA->REC[CNT].rSSN = ""
	DATA->REC[CNT].rSTREET_ADDR = ""
	DATA->REC[CNT].rCITY = ""
	DATA->REC[CNT].RZIP = ""
	DATA->REC[CNT].rEMPLOYER = ""
	DATA->REC[CNT].rGUARANTOR_LAST_NAME = ""
	DATA->REC[CNT].rGUARANTOR_FIRST_NAME = ""
	DATA->REC[CNT].rGUARANTOR_ADDRESS = ""
	DATA->REC[CNT].rGUARANTOR_CITY = ""
	DATA->REC[CNT].rGUARANTOR_ZIP = ""
	DATA->REC[CNT].rGUARANTOR_PHONE = ""
	DATA->REC[CNT].rINSURANCE1 = ""
	DATA->REC[CNT].rSUBSCRIBER_NUMBER1 = ""
	DATA->REC[CNT].rPOLICY_NUMBER1 = ""
	DATA->REC[CNT].rINSURED_LAST_NAME1 = ""
	DATA->REC[CNT].rINSURED_FIRST_NAME1 = ""
	DATA->REC[CNT].rINSURED_ADDRESS1 = ""
	DATA->REC[CNT].rINSURED_CITY1 = ""
	DATA->REC[CNT].rINSURED_ZIP1 = ""
	DATA->REC[CNT].rINSURANCE2 = ""
	DATA->REC[CNT].rSUBSCRIBER_NUMBER2 = ""
	DATA->REC[CNT].rPOLICY_NUMBER2 = ""
	DATA->REC[CNT].rINSURED_LAST_NAME2 = ""
	DATA->REC[CNT].rINSURED_FIRST_NAME2 = ""
	DATA->REC[CNT].rINSURED_ADDRESS2 = ""
	DATA->REC[CNT].rINSURED_CITY2 = ""
	DATA->REC[CNT].rINSURED_ZIP2 = ""
	DATA->REC[CNT].rINSURANCE3 = ""
	DATA->REC[CNT].rSUBSCRIBER_NUMBER3 = ""
	DATA->REC[CNT].rPOLICY_NUMBER3 = ""
	DATA->REC[CNT].rINSURED_LAST_NAME3 = ""
	DATA->REC[CNT].rINSURED_FIRST_NAME3 = ""
	DATA->REC[CNT].rINSURED_ADDRESS3 = ""
	DATA->REC[CNT].rINSURED_CITY3 = ""
	DATA->REC[CNT].rINSURED_ZIP3 = ""
;	DATA->REC[CNT].rREADING_PHYSICIAN = ""
 
FOOT REPORT
	DATA->CNT = CNT
 
WITH  COUNTER, TIME = 60
 
/* Use to display data stored in the record structure if applicable */
;CALL ECHORECORD(DATA)
 
IF (CNT = 0)
	GO TO END_REPORT
ENDIF
 
/*****************************************************************
CHARGE QUERY
 
This section queries for the patient charges associated with
the encounter.
******************************************************************/
 
SELECT INTO "NL:"
	qCHARGE_ITEM_ID = C.CHARGE_ITEM_ID
	, qDATE_OF_SERVICE = C.SERVICE_DT_TM
	, qPARENT_ENTITY_ID = PTR.PARENT_ENTITY_ID
	, qCPT = CM.FIELD6
 
FROM
	(DUMMYT D WITH SEQ = VALUE(DATA->CNT))
	, PFT_TRANS_RELTN   PTR
	, PFT_CHARGE   PC
	, CHARGE   C
	, CHARGE_MOD   CM
 
PLAN D
 
JOIN PTR
	WHERE PTR.PARENT_ENTITY_ID = DATA->REC[D.SEQ].rPFT_ENCNTR_ID
	AND PTR.PARENT_ENTITY_NAME = "PFTENCNTR"
	AND PTR.TRANS_TYPE_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 18649, "CHARGE"))
	AND PTR.ACTIVE_IND = 1
	AND PTR.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
JOIN PC
	WHERE PC.ACTIVITY_ID = PTR.ACTIVITY_ID
	AND PC.ACTIVE_IND = 1
 
JOIN C
	WHERE C.CHARGE_ITEM_ID = PC.CHARGE_ITEM_ID
	AND C.ACTIVE_IND = 1
	AND C.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
JOIN CM
	WHERE CM.CHARGE_ITEM_ID = C.CHARGE_ITEM_ID
	AND CM.FIELD1_ID = 615214.0
	AND CM.FIELD6 IN
	(
		"93303"
		, "93304"
		, "93306"
		, "93307"
		, "93308"
		, "93320"
		, "93321"
		, "93325"
		, "93350"
		, "93351"
		, "93352"
		, "93015"
		, "93016"
		, "93017"
		, "93018"
		, "93015"
		, "93016"
		, "93017"
		, "93018"
		, "93312"
		, "93313"
		, "93314"
		, "93320"
		, "93321"
		, "93325"
		, "93272"
		, "93227"
	)
;	AND CM.FIELD1_ID = 667687.0
;	AND CM.FIELD6 IN
;	(
;		"413600014"
;		, "413600021"
;		, "413600022"
;		, "413600036"
;		, "413600052"
;		, "413600056"
;		, "413600501"
;		, "413602995"
;		, "413602996"
;		, "413603004"
;		, "413603005"
;		, "413603008"
;		, "413603008"
;		, "413603010"
;		, "413600114"
;		, "413603102"
;		, "413503500"
;		, "413603024"
;		, "413603022"
;		, "413600004"
;	)
	AND CM.ACTIVE_IND = 1
	AND CM.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
ORDER BY
	qPARENT_ENTITY_ID
	, qCHARGE_ITEM_ID
 
HEAD qPARENT_ENTITY_ID
 
	CNT = 0
 
DETAIL
 
	CNT = CNT + 1
 
	STAT = ALTERLIST(DATA->REC[D.SEQ].CHGS, CNT)
 
	DATA->REC[D.SEQ]->CHGS[CNT].rCHARGE_ITEM_ID = qCHARGE_ITEM_ID
	DATA->REC[D.SEQ]->CHGS[CNT].rDATE_OF_SERVICE = qDATE_OF_SERVICE
	DATA->REC[D.SEQ]->CHGS[CNT].rCPT = qCPT
 
FOOT qPARENT_ENTITY_ID
 
	DATA->REC[D.SEQ].rCHG_CNT = CNT
 
/* If the report is known to run longer than 60 seconds, change the value below */
WITH  COUNTER, TIME = 60
 
/* Use to display data stored in the record structure if applicable */
;CALL ECHORECORD(DATA)
 
/*****************************************************************
PATIENT DEMOGRAPHICS QUERY
 
This section queries for information related to the patient's
demographic details.
******************************************************************/
 
SELECT INTO "NL:"
	qPATIENT_LAST_NAME = P.NAME_LAST
	, qPATIENT_FIRST_NAME = P.NAME_FIRST
	, qDOB = P.BIRTH_DT_TM
	, qDOB_TZ = P.BIRTH_TZ
	, qSEX = P.SEX_CD
	, qMARITAL_STATUS = P.MARITAL_TYPE_CD
 
FROM
	(DUMMYT D WITH SEQ = VALUE(DATA->CNT))
	, PERSON P
 
PLAN D
 
JOIN P
	WHERE P.PERSON_ID = DATA->REC[D.SEQ].rPERSON_ID
	AND P.ACTIVE_IND = 1
	AND P.ACTIVE_STATUS_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 48, "ACTIVE"))
	AND P.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
DETAIL
 
	DATA->REC[D.SEQ].rPATIENT_LAST_NAME = qPATIENT_LAST_NAME
	DATA->REC[D.SEQ].rPATIENT_FIRST_NAME = qPATIENT_FIRST_NAME
	DATA->REC[D.SEQ].rDOB = qDOB
	DATA->REC[D.SEQ].rDOB_TZ = qDOB_TZ
	DATA->REC[D.SEQ].rSEX = qSEX
	DATA->REC[D.SEQ].rMARITAL_STATUS = qMARITAL_STATUS
 
/* If the report is known to run longer than 60 seconds, change the value below */
WITH  COUNTER, TIME = 60
 
/* Use to display data stored in the record structure if applicable */
;CALL ECHORECORD(DATA)
 
/*****************************************************************
FIN NUMBER QUERY
 
This section queries for the patient's FIN number.
******************************************************************/
 
SELECT INTO "NL:"
	qACCOUNT_NUMBER = EA.ALIAS
 
FROM
	(DUMMYT D WITH SEQ = VALUE(DATA->CNT))
	, ENCNTR_ALIAS EA
 
PLAN D
 
JOIN EA
	WHERE EA.ENCNTR_ID = DATA->REC[D.SEQ].rENCNTR_ID
	AND EA.ENCNTR_ALIAS_TYPE_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 319, "FINNBR"))
	AND EA.ACTIVE_IND = 1
	AND EA.ACTIVE_STATUS_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 48, "ACTIVE"))
	AND EA.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
DETAIL
 
	DATA->REC[D.SEQ].rACCOUNT_NUMBER = qACCOUNT_NUMBER
 
/* If the report is known to run longer than 60 seconds, change the value below */
WITH  COUNTER, TIME = 60
 
/* Use to display data stored in the record structure if applicable */
;CALL ECHORECORD(DATA)
 
/*****************************************************************
SSN QUERY
 
This section queries for the patient's SSN.
******************************************************************/
 
SELECT INTO "NL:"
	qSSN = PA.ALIAS
 
FROM
	(DUMMYT D WITH SEQ = VALUE(DATA->CNT))
	, PERSON_ALIAS PA
 
PLAN D
 
JOIN PA
	WHERE PA.PERSON_ID = DATA->REC[D.SEQ].rPERSON_ID
	AND PA.PERSON_ALIAS_TYPE_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 4, "SSN"))
 
DETAIL
 
	DATA->REC[D.SEQ].rSSN = qSSN
 
/* If the report is known to run longer than 60 seconds, change the value below */
WITH  COUNTER, TIME = 60
 
/* Use to display data stored in the record structure if applicable */
;CALL ECHORECORD(DATA)
 
/*****************************************************************
PATIENT ADDRESS QUERY
 
This section queries for the patient's address.
******************************************************************/
 
SELECT INTO "NL:"
	qSTREET_ADDR = A.STREET_ADDR
	, qCITY = A.CITY
	, qSTATE = A.STATE_CD
	, qZIP = A.ZIPCODE
 
FROM
	(DUMMYT D WITH SEQ = VALUE(DATA->CNT))
	, ADDRESS   A
 
PLAN D
 
JOIN A
	WHERE A.PARENT_ENTITY_ID = DATA->REC[D.SEQ].rPERSON_ID
	AND A.PARENT_ENTITY_NAME = "PERSON"
	AND A.ADDRESS_TYPE_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 212, "HOME"))
	AND A.ACTIVE_IND = 1
	AND A.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
DETAIL
 
	DATA->REC[D.SEQ].rSTREET_ADDR = qSTREET_ADDR
	DATA->REC[D.SEQ].rCITY = qCITY
	DATA->REC[D.SEQ].rSTATE = qSTATE
	DATA->REC[D.SEQ].rZIP = qZIP
 
/* If the report is known to run longer than 60 seconds, change the value below */
WITH  COUNTER, TIME = 60
 
/* Use to display data stored in the record structure if applicable */
;CALL ECHORECORD(DATA)
 
/*****************************************************************
PATIENT PHONE QUERY
 
This section queries for the patient's phone number.
******************************************************************/
 
SELECT INTO "NL:"
	qPHONE = P.PHONE_NUM_KEY
	, qPHONE_FORMAT = P.PHONE_FORMAT_CD
 
FROM
	(DUMMYT D WITH SEQ = VALUE(DATA->CNT))
	, PHONE   P
 
PLAN D
 
JOIN P
	WHERE P.PARENT_ENTITY_ID = DATA->REC[D.SEQ].rPERSON_ID
	AND P.PARENT_ENTITY_NAME = "PERSON"
	AND P.PHONE_TYPE_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 43, "HOME"))
	AND P.ACTIVE_IND = 1
	AND P.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
DETAIL
 
	DATA->REC[D.SEQ].rPHONE = qPHONE
	DATA->REC[D.SEQ].rPHONE_FORMAT = qPHONE_FORMAT
 
/* If the report is known to run longer than 60 seconds, change the value below */
WITH  COUNTER, TIME = 60
 
/* Use to display data stored in the record structure if applicable */
;CALL ECHORECORD(DATA)
 
/*****************************************************************
EMPLOYER QUERY
 
This section queries for the patient's employer.
******************************************************************/
 
SELECT INTO "NL:"
	qEMPLOYER = P.FT_ORG_NAME
 
FROM
	(DUMMYT D WITH SEQ = VALUE(DATA->CNT))
	, PERSON_ORG_RELTN P
 
PLAN D
 
JOIN P
	WHERE P.PERSON_ID = DATA->REC[D.SEQ].rPERSON_ID
	AND P.PERSON_ORG_RELTN_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 338, "EMPLOYER"))
	AND P.PRIORITY_SEQ = 1
	AND P.ACTIVE_IND = 1
	AND P.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
DETAIL
 
	DATA->REC[D.SEQ].rEMPLOYER = qEMPLOYER
 
/* If the report is known to run longer than 60 seconds, change the value below */
WITH  COUNTER, TIME = 60
 
/* Use to display data stored in the record structure if applicable */
;CALL ECHORECORD(DATA)
 
/*****************************************************************
GUARANTOR QUERY
 
This section queries for the patient's guarantor.
 
*** Determine if third party is relevant. ***
******************************************************************/
 
SELECT INTO "NL:"
	qGUARANTOR_LAST_NAME = P.NAME_LAST
	, qGUARANTOR_FIRST_NAME = P.NAME_FIRST
	, qRELATION_TO_PATIENT = EPE.RELATED_PERSON_RELTN_CD
	, qGUARANTOR_DOB = P.BIRTH_DT_TM
	, qGUARANTOR_TZ = P.BIRTH_TZ
	, qGUARANTOR_ADDRESS =	IF (CNVTUPPER(HP.PLAN_NAME) = "THIRD PARTY")
								A1.STREET_ADDR
							ELSE
								A2.STREET_ADDR
							ENDIF
	, qGUARANTOR_CITY =	IF (CNVTUPPER(HP.PLAN_NAME) = "THIRD PARTY")
							A1.CITY
						ELSE
							A2.CITY
						ENDIF
	, qGUARANTOR_STATE =	IF (CNVTUPPER(HP.PLAN_NAME) = "THIRD PARTY")
								A1.STATE_CD
							ELSE
								A2.STATE_CD
							ENDIF
	, qGUARANTOR_ZIP =	IF (CNVTUPPER(HP.PLAN_NAME) = "THIRD PARTY")
							A1.ZIPCODE
						ELSE
							A2.ZIPCODE
						ENDIF
	, qGUARANTOR_PHONE =	IF (CNVTUPPER(HP.PLAN_NAME) = "THIRD PARTY")
								PH1.PHONE_NUM_KEY
							ELSE
								PH2.PHONE_NUM_KEY
							ENDIF
	, qGUARANTOR_PHONE_FORMAT =	IF (CNVTUPPER(HP.PLAN_NAME) = "THIRD PARTY")
									PH1.PHONE_FORMAT_CD
								ELSE
									PH2.PHONE_FORMAT_CD
								ENDIF
 
FROM
	(DUMMYT D WITH SEQ = VALUE(DATA->CNT))
	, ENCOUNTER   E
	, ENCNTR_PLAN_RELTN   EPR
	, HEALTH_PLAN   HP
	, ENCNTR_PERSON_RELTN   EPE
	, PERSON   P
	, ADDRESS A2
	, PHONE PH2
	, ENCNTR_ORG_RELTN   EOR
	, ORGANIZATION   O
	, ADDRESS   A1
	, PHONE PH1
 
PLAN D
 
JOIN E
	WHERE E.ENCNTR_ID = DATA->REC[D.SEQ].rENCNTR_ID
 
	AND E.ACTIVE_IND = 1
	AND E.ACTIVE_STATUS_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 48, "ACTIVE"))
	AND E.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
JOIN EPR
	WHERE EPR.ENCNTR_ID = E.ENCNTR_ID
	AND EPR.PRIORITY_SEQ = 1
	AND EPR.ACTIVE_IND = 1
	AND EPR.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
JOIN HP
	WHERE HP.HEALTH_PLAN_ID = EPR.HEALTH_PLAN_ID
	AND HP.ACTIVE_IND = 1
	AND HP.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
JOIN EPE
	WHERE EPE.ENCNTR_ID = OUTERJOIN(EPR.ENCNTR_ID)
	AND EPE.PERSON_RELTN_TYPE_CD = OUTERJOIN(VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 351, "DEFAULTGUARANTOR")))
	AND EPE.ACTIVE_IND = OUTERJOIN(1)
	AND EPE.END_EFFECTIVE_DT_TM >= OUTERJOIN(CNVTDATETIME(CURDATE, CURTIME3))
 
JOIN P
	WHERE P.PERSON_ID = OUTERJOIN(EPE.RELATED_PERSON_ID)
	AND P.ACTIVE_IND = OUTERJOIN(1)
	AND P.ACTIVE_STATUS_CD = OUTERJOIN(VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 48, "ACTIVE")))
	AND P.END_EFFECTIVE_DT_TM >= OUTERJOIN(CNVTDATETIME(CURDATE, CURTIME3))
 
JOIN A2
	WHERE A2.PARENT_ENTITY_ID = OUTERJOIN(P.PERSON_ID)
	AND A2.PARENT_ENTITY_NAME = OUTERJOIN("PERSON")
	AND A2.ADDRESS_TYPE_CD = OUTERJOIN(VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 212, "HOME")))
	AND A2.ACTIVE_IND = OUTERJOIN(1)
	AND A2.END_EFFECTIVE_DT_TM >= OUTERJOIN(CNVTDATETIME(CURDATE, CURTIME3))
 
JOIN PH2
	WHERE PH2.PARENT_ENTITY_ID = OUTERJOIN(P.PERSON_ID)
	AND PH2.PARENT_ENTITY_NAME = OUTERJOIN("PERSON")
	AND PH2.PHONE_TYPE_CD = OUTERJOIN(VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 43, "HOME")))
	AND PH2.ACTIVE_IND = OUTERJOIN(1)
	AND PH2.END_EFFECTIVE_DT_TM >= OUTERJOIN(CNVTDATETIME(CURDATE, CURTIME3))
 
JOIN EOR
	WHERE EOR.ENCNTR_ID = OUTERJOIN(E.ENCNTR_ID)
	AND EOR.ENCNTR_ORG_RELTN_TYPE_CD = OUTERJOIN(VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 362, "GUARANTOR")))
	AND EOR.ACTIVE_IND = OUTERJOIN(1)
	AND EOR.END_EFFECTIVE_DT_TM >= OUTERJOIN(CNVTDATETIME(CURDATE, CURTIME3))
 
JOIN O
	WHERE O.ORGANIZATION_ID = OUTERJOIN(EOR.ORGANIZATION_ID)
	AND O.ACTIVE_IND = OUTERJOIN(1)
 
JOIN A1
	WHERE A1.PARENT_ENTITY_ID = OUTERJOIN(O.ORGANIZATION_ID)
	AND A1.PARENT_ENTITY_NAME = OUTERJOIN("ORGANIZATION")
	AND A1.ADDRESS_TYPE_CD = OUTERJOIN(VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 212, "BUSINESS")))
	AND A1.ACTIVE_IND = OUTERJOIN(1)
	AND A1.END_EFFECTIVE_DT_TM >= OUTERJOIN(CNVTDATETIME(CURDATE, CURTIME3))
 
JOIN PH1
	WHERE PH1.PARENT_ENTITY_ID = OUTERJOIN(O.ORGANIZATION_ID)
	AND PH1.PARENT_ENTITY_NAME = OUTERJOIN("ORGANIZATION")
	AND PH1.PHONE_TYPE_CD = OUTERJOIN(VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 43, "BUSINESS")))
	AND PH1.ACTIVE_IND = OUTERJOIN(1)
 
DETAIL
 
	DATA->REC[D.SEQ].rGUARANTOR_LAST_NAME = qGUARANTOR_LAST_NAME
	DATA->REC[D.SEQ].rGUARANTOR_FIRST_NAME = qGUARANTOR_FIRST_NAME
	DATA->REC[D.SEQ].rRELATION_TO_PATIENT = qRELATION_TO_PATIENT
	DATA->REC[D.SEQ].rGUARANTOR_DOB = qGUARANTOR_DOB
	DATA->REC[D.SEQ].rGUARANTOR_ADDRESS = qGUARANTOR_ADDRESS
	DATA->REC[D.SEQ].rGUARANTOR_CITY = qGUARANTOR_CITY
	DATA->REC[D.SEQ].rGUARANTOR_STATE = qGUARANTOR_STATE
	DATA->REC[D.SEQ].rGUARANTOR_ZIP = qGUARANTOR_ZIP
	DATA->REC[D.SEQ].rGUARANTOR_PHONE = qGUARANTOR_PHONE
	DATA->REC[D.SEQ].rGUARANTOR_PHONE_FORMAT = qGUARANTOR_PHONE_FORMAT
 
/* If the report is known to run longer than 60 seconds, change the value below */
WITH  COUNTER, TIME = 60
 
/* Use to display data stored in the record structure if applicable */
;CALL ECHORECORD(DATA)
 
/*****************************************************************
INSURANCE QUERY
 
This section queries for the insurance data for the patient.
******************************************************************/
 
SELECT INTO "NL:"
	qINSURANCE = HP1.PLAN_NAME
	, qSUBSCRIBER_NUMBER = EPR1.MEMBER_NBR
	, qPOLICY_NUMBER = EPR1.MEMBER_NBR
	, qINSURED_LAST_NAME = P1.NAME_LAST
	, qINSURED_FIRST_NAME = P1.NAME_FIRST
	, qRELATIONSHIP_TO_PATIENT = EP1.RELATED_PERSON_RELTN_CD
	, qINSURED_DOB = P1.BIRTH_DT_TM
	, qINSURED_DOB_TZ = P1.BIRTH_TZ
	, qINSURED_ADDRESS = A1.STREET_ADDR
	, qINSURED_CITY = A1.CITY
	, qINSURED_STATE = A1.STATE_CD
	, qINSURED_ZIP = A1.ZIPCODE
 
FROM
	(DUMMYT D WITH SEQ = VALUE(DATA->CNT))
	, ENCNTR_PLAN_RELTN EPR1
	, HEALTH_PLAN HP1
	, ENCNTR_PERSON_RELTN EP1
	, PERSON P1
	, ADDRESS A1
 
PLAN D
 
JOIN EPR1
	WHERE EPR1.ENCNTR_ID = DATA->REC[D.SEQ].rENCNTR_ID
	AND EPR1.PRIORITY_SEQ IN (1, 2, 3)
	AND EPR1.ACTIVE_IND = 1
	AND EPR1.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
JOIN HP1
	WHERE HP1.HEALTH_PLAN_ID = EPR1.HEALTH_PLAN_ID
	AND HP1.ACTIVE_IND = 1
	AND HP1.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
JOIN EP1
	WHERE EP1.ENCNTR_ID = EPR1.ENCNTR_ID
	AND EP1.PERSON_RELTN_TYPE_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 351, "INSURED"))
	AND EP1.ACTIVE_IND = 1
	AND EP1.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
JOIN P1
	WHERE P1.PERSON_ID = EP1.RELATED_PERSON_ID
	AND P1.ACTIVE_IND = 1
	AND P1.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
JOIN A1
	WHERE A1.PARENT_ENTITY_ID = P1.PERSON_ID
	AND A1.PARENT_ENTITY_NAME = "PERSON"
	AND A1.ADDRESS_TYPE_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 212, "HOME"))
	AND A1.ACTIVE_IND = 1
	AND A1.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
DETAIL
 
	IF (EPR1.PRIORITY_SEQ = 1)
 
		DATA->REC[D.SEQ].rINSURANCE1 = qINSURANCE
		DATA->REC[D.SEQ].rSUBSCRIBER_NUMBER1 = qSUBSCRIBER_NUMBER
		DATA->REC[D.SEQ].rPOLICY_NUMBER1 = qPOLICY_NUMBER
		DATA->REC[D.SEQ].rINSURED_LAST_NAME1 = qINSURED_LAST_NAME
		DATA->REC[D.SEQ].rINSURED_FIRST_NAME1 = qINSURED_FIRST_NAME
		DATA->REC[D.SEQ].rRELATIONSHIP_TO_PATIENT1 = qRELATIONSHIP_TO_PATIENT
		DATA->REC[D.SEQ].rINSURED_DOB1 = qINSURED_DOB
		DATA->REC[D.SEQ].rINSURED_DOB_TZ1 = qINSURED_DOB_TZ
		DATA->REC[D.SEQ].rINSURED_ADDRESS1 = qINSURED_ADDRESS
		DATA->REC[D.SEQ].rINSURED_CITY1 = qINSURED_CITY
		DATA->REC[D.SEQ].rINSURED_STATE1 = qINSURED_STATE
		DATA->REC[D.SEQ].rINSURED_ZIP1 = qINSURED_ZIP
 
	ELSEIF (EPR1.PRIORITY_SEQ = 2)
 
		DATA->REC[D.SEQ].rINSURANCE2 = qINSURANCE
		DATA->REC[D.SEQ].rSUBSCRIBER_NUMBER2 = qSUBSCRIBER_NUMBER
		DATA->REC[D.SEQ].rPOLICY_NUMBER2 = qPOLICY_NUMBER
		DATA->REC[D.SEQ].rINSURED_LAST_NAME2 = qINSURED_LAST_NAME
		DATA->REC[D.SEQ].rINSURED_FIRST_NAME2 = qINSURED_FIRST_NAME
		DATA->REC[D.SEQ].rRELATIONSHIP_TO_PATIENT2 = qRELATIONSHIP_TO_PATIENT
		DATA->REC[D.SEQ].rINSURED_DOB2 = qINSURED_DOB
		DATA->REC[D.SEQ].rINSURED_DOB_TZ2 = qINSURED_DOB_TZ
		DATA->REC[D.SEQ].rINSURED_ADDRESS2 = qINSURED_ADDRESS
		DATA->REC[D.SEQ].rINSURED_CITY2 = qINSURED_CITY
		DATA->REC[D.SEQ].rINSURED_STATE2 = qINSURED_STATE
		DATA->REC[D.SEQ].rINSURED_ZIP2 = qINSURED_ZIP
 
	ELSEIF (EPR1.PRIORITY_SEQ = 3)
 
		DATA->REC[D.SEQ].rINSURANCE3 = qINSURANCE
		DATA->REC[D.SEQ].rSUBSCRIBER_NUMBER3 = qSUBSCRIBER_NUMBER
		DATA->REC[D.SEQ].rPOLICY_NUMBER3 = qPOLICY_NUMBER
		DATA->REC[D.SEQ].rINSURED_LAST_NAME3 = qINSURED_LAST_NAME
		DATA->REC[D.SEQ].rINSURED_FIRST_NAME3 = qINSURED_FIRST_NAME
		DATA->REC[D.SEQ].rRELATIONSHIP_TO_PATIENT3 = qRELATIONSHIP_TO_PATIENT
		DATA->REC[D.SEQ].rINSURED_DOB3 = qINSURED_DOB
		DATA->REC[D.SEQ].rINSURED_DOB_TZ3 = qINSURED_DOB_TZ
		DATA->REC[D.SEQ].rINSURED_ADDRESS3 = qINSURED_ADDRESS
		DATA->REC[D.SEQ].rINSURED_CITY3 = qINSURED_CITY
		DATA->REC[D.SEQ].rINSURED_STATE3 = qINSURED_STATE
		DATA->REC[D.SEQ].rINSURED_ZIP3 = qINSURED_ZIP
 
	ENDIF
 
/* If the report is known to run longer than 60 seconds, change the value below */
WITH  COUNTER, TIME = 60
 
/* Use to display data stored in the record structure if applicable */
;CALL ECHORECORD(DATA)
 
/*****************************************************************
CPT QUERY
 
This section queries for the CPT associated with the encounter.
******************************************************************/
 
;SELECT INTO "NL:"
;	qCPT = CM.FIELD6
;
;FROM
;	(DUMMYT D1 WITH SEQ = VALUE(DATA->CNT))
;	, (DUMMYT D2 WITH SEQ = 1)
;	, CHARGE_MOD CM
;
;PLAN D1
;	WHERE MAXREC(D2, SIZE(DATA->REC[D1.SEQ].CHGS, 5))
;
;JOIN D2
;
;JOIN CM
;	WHERE CM.CHARGE_ITEM_ID = DATA->REC[D1.SEQ]->CHGS[D2.SEQ].rCHARGE_ITEM_ID
;	AND CM.FIELD1_ID = 615214.0
;	AND CM.ACTIVE_IND = 1
;	AND CM.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
;
;DETAIL
;
;	DATA->REC[D1.SEQ]->CHGS[D2.SEQ].rCPT = qCPT
;
;/* If the report is known to run longer than 60 seconds, change the value below */
;WITH  COUNTER, TIME = 60
 
/* Use to display data stored in the record structure if applicable */
;CALL ECHORECORD(DATA)
 
/*****************************************************************
READING PHYSICAN QUERY
 
This section queries for the name of the reading physician.
*** NOTE: This section is not currently in use.
******************************************************************/
 
;SELECT INTO "NL:"
;	qREADING_PHYSICIAN = P.NAME_FULL_FORMATTED
;
;FROM
;	(DUMMYT D WITH SEQ = VALUE(DATA->CNT))
;	, CLINICAL_EVENT CE
;	, CE_EVENT_PRSNL CEP
;	, PERSON P
;
;PLAN D
;
;JOIN CE
;	WHERE CE.ENCNTR_ID = DATA->REC[D.SEQ].rENCNTR_ID
;	AND CE.VALID_UNTIL_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
;	AND CE.RESULT_STATUS_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 8, "TRANSCRIBED"))
;
;JOIN CEP
;	WHERE CEP.EVENT_ID = CE.EVENT_ID
;	AND CEP.ACTION_TYPE_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 21, "PERFORM"))
;
;JOIN P
;	WHERE P.PERSON_ID = CEP.ACTION_PRSNL_ID
;	AND P.ACTIVE_IND = 1
;	AND P.ACTIVE_STATUS_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 48, "ACTIVE"))
;	AND P.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
;
;DETAIL
;
;	DATA->REC[D.SEQ].rREADING_PHYSICIAN = qREADING_PHYSICIAN
;
;/* If the report is known to run longer than 60 seconds, change the value below */
;WITH  COUNTER, TIME = 60
 
/* Use to display data stored in the record structure if applicable */
;CALL ECHORECORD(DATA)
 
/*****************************************************************
ORDERING PHYSICIAN
 
This section queries for the ordering physician of the procedure.
******************************************************************/
 
SELECT INTO "NL:"
	qORDERING_PHYSICIAN = PE.NAME_FULL_FORMATTED
 
FROM
	(DUMMYT D WITH SEQ = VALUE(DATA->CNT))
	, ORDERS O
	, ORDER_ACTION OA
	, PRSNL P
	, PERSON PE
 
PLAN D
 
JOIN O
	WHERE O.ENCNTR_ID = DATA->REC[D.SEQ].rENCNTR_ID
	AND O.ACTIVE_IND = 1
 
JOIN OA
	WHERE OA.ORDER_ID = O.ORDER_ID
	AND OA.ACTION_SEQUENCE > 0
	AND OA.ORDER_PROVIDER_ID > 0.0
 
JOIN P
	WHERE P.PERSON_ID = OA.ORDER_PROVIDER_ID
	AND P.ACTIVE_IND = 1
	AND P.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
JOIN PE
	WHERE PE.PERSON_ID = P.PERSON_ID
	AND PE.ACTIVE_IND = 1
	AND PE.ACTIVE_STATUS_CD = VALUE(UAR_GET_CODE_BY("DISPLAYKEY", 48, "ACTIVE"))
	AND PE.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE, CURTIME3)
 
DETAIL
 
	DATA->REC[D.SEQ].rORDERING_PHYSICIAN = qORDERING_PHYSICIAN
 
/* If the report is known to run longer than 60 seconds, change the value below */
WITH  COUNTER, TIME = 200
 
/* Use to display data stored in the record structure if applicable */
CALL ECHORECORD(DATA)
CALL ECHOXML(DATA, "TEST_RECORD_OUT.DAT")
 
/*****************************************************************
REPORT OUTPUT
 
This section generates the output for the report.
******************************************************************/
 
IF (DEBUGGING_ON = TRUE)
 
	SELECT INTO $OUTDEV
		ACCOUNT_NUMBER = DATA->REC[D1.SEQ].rACCOUNT_NUMBER
		, PATIENTS_LAST_NAME = DATA->REC[D1.SEQ].rPATIENT_LAST_NAME
		, PATIENTS_FIRST_NAME = DATA->REC[D1.SEQ].rPATIENT_FIRST_NAME
		, DOB = DATETIMEZONEFORMAT(DATA->REC[D1.SEQ].RDOB, DATA->REC[D1.SEQ].rDOB_TZ, "DD-MMM-YYYY")
		, SSN = DATA->REC[D1.SEQ].rSSN
		, ADDRESS = DATA->REC[D1.SEQ].rSTREET_ADDR
		, CITY = DATA->REC[D1.SEQ].rCITY
		, STATE = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].rSTATE)
		, ZIP = DATA->REC[D1.SEQ].RZIP
		, PHONE = CNVTPHONE(DATA->REC[D1.SEQ].rPHONE, DATA->REC[D1.SEQ].rPHONE_FORMAT)
		, SEX = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].RSEX)
		, MARITAL_STATUS = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].rMARITAL_STATUS)
		, EMPLOYER = DATA->REC[D1.SEQ].rEMPLOYER
		, FACILITY = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].rFACILITY)
		, GUARANTOR_LAST_NAME = DATA->REC[D1.SEQ].rGUARANTOR_LAST_NAME
		, GUARANTOR_FIRST_NAME = DATA->REC[D1.SEQ].rGUARANTOR_FIRST_NAME
		, RELATION_TO_PATIENT = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].rRELATION_TO_PATIENT)
		, GUARANTOR_DOB = DATETIMEZONEFORMAT(DATA->REC[D1.SEQ].rGUARANTOR_DOB, DATA->REC[D1.SEQ].rGUARANTOR_DOB_TZ, "DD-MMM-YYYY")
		, GUARANTOR_ADDRESS = DATA->REC[D1.SEQ].rGUARANTOR_ADDRESS
		, GUARANTOR_CITY = DATA->REC[D1.SEQ].rGUARANTOR_CITY
		, GUARANTOR_STATE = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].rGUARANTOR_STATE)
		, GUARANTOR_ZIP = DATA->REC[D1.SEQ].rGUARANTOR_ZIP
		, GUARANTOR_PHONE = CNVTPHONE(DATA->REC[D1.SEQ].rGUARANTOR_PHONE, DATA->REC[D1.SEQ].rGUARANTOR_PHONE_FORMAT)
		, INSURANCE1 = DATA->REC[D1.SEQ].rINSURANCE1
		, POLICY_NUMBER1 = DATA->REC[D1.SEQ].rPOLICY_NUMBER1
		, INSURED_LAST_NAME1 = DATA->REC[D1.SEQ].rINSURED_LAST_NAME1
		, INSURED_FIRST_NAME1 = DATA->REC[D1.SEQ].rINSURED_FIRST_NAME1
		, RELATION_TO_PATIENT1 = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].rRELATIONSHIP_TO_PATIENT1)
		, INSURED_DOB1 = DATETIMEZONEFORMAT(DATA->REC[D1.SEQ].rINSURED_DOB1, DATA->REC[D1.SEQ].rINSURED_DOB_TZ1, "DD-MMM-YYYY")
		, INSURED_ADDRESS1 = DATA->REC[D1.SEQ].rINSURED_ADDRESS1
		, INSURED_CITY1 = DATA->REC[D1.SEQ].rINSURED_CITY1
		, INSURED_STATE1 = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].rINSURED_STATE1)
		, INSURED_ZIP1 = DATA->REC[D1.SEQ].rINSURED_ZIP1
		, INSURANCE2 = DATA->REC[D1.SEQ].rINSURANCE2
		, POLICY_NUMBER2 = DATA->REC[D1.SEQ].rPOLICY_NUMBER2
		, INSURED_LAST_NAME2 = DATA->REC[D1.SEQ].rINSURED_LAST_NAME2
		, INSURED_FIRST_NAME2 = DATA->REC[D1.SEQ].rINSURED_FIRST_NAME2
		, RELATION_TO_PATIENT2 = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].rRELATIONSHIP_TO_PATIENT2)
		, INSURED_DOB2 = DATETIMEZONEFORMAT(DATA->REC[D1.SEQ].rINSURED_DOB2, DATA->REC[D1.SEQ].rINSURED_DOB_TZ2, "DD-MMM-YYYY")
		, INSURED_ADDRESS2 = DATA->REC[D1.SEQ].rINSURED_ADDRESS2
		, INSURED_CITY2 = DATA->REC[D1.SEQ].rINSURED_CITY2
		, INSURED_STATE2 = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].rINSURED_STATE2)
		, INSURED_ZIP2 = DATA->REC[D1.SEQ].rINSURED_ZIP2
		, INSURANCE3 = DATA->REC[D1.SEQ].rINSURANCE3
		, POLICY_NUMBER3 = DATA->REC[D1.SEQ].rPOLICY_NUMBER3
		, INSURED_LAST_NAME3 = DATA->REC[D1.SEQ].rINSURED_LAST_NAME3
		, INSURED_FIRST_NAME3 = DATA->REC[D1.SEQ].rINSURED_FIRST_NAME3
		, RELATION_TO_PATIENT3 = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].rRELATIONSHIP_TO_PATIENT3)
		, INSURED_DOB3 = DATETIMEZONEFORMAT(DATA->REC[D1.SEQ].rINSURED_DOB3, DATA->REC[D1.SEQ].rINSURED_DOB_TZ3, "DD-MMM-YYYY")
		, INSURED_ADDRESS3 = DATA->REC[D1.SEQ].rINSURED_ADDRESS3
		, INSURED_CITY3 = DATA->REC[D1.SEQ].rINSURED_CITY3
		, INSURED_STATE3 = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].rINSURED_STATE3)
		, INSURED_ZIP3 = DATA->REC[D1.SEQ].rINSURED_ZIP3
		, PATIENT_TYPE = UAR_GET_CODE_DISPLAY(DATA->REC[D1.SEQ].rPATIENT_TYPE)
		, ADMIT_DATE = FORMAT(DATA->REC[D1.SEQ].rADMIT_DATE, "DD-MMM-YYYY;;D")
		, DISCHARGE_DATE = FORMAT(DATA->REC[D1.SEQ].rDISCHARGE_DATE, "DD-MMM-YYYY;;D")
		, DATE_OF_SERVICE = FORMAT(DATA->REC[D1.SEQ]->CHGS[D2.SEQ].rDATE_OF_SERVICE, "DD-MMM-YYYY;;D")
		, CPT = DATA->REC[D1.SEQ]->CHGS[D2.SEQ].rCPT
		, ORDERING_PHYSICIAN = DATA->REC[D1.SEQ].rORDERING_PHYSICIAN
 
	FROM
		(DUMMYT D1 WITH SEQ = VALUE(DATA->CNT))
		, (DUMMYT D2 WITH SEQ = 2)
 
	PLAN D1
		WHERE MAXREC(D2, SIZE(DATA->REC[D1.SEQ].CHGS, 5))
 
	JOIN D2
 
	WITH NOCOUNTER, FORMAT, SEPARATOR = " "
 
ELSE
 	
	EXECUTE MAUR_TN_CARD_PROFEE_LYT $OUTDEV
 
ENDIF
 
#END_REPORT
 
SET LAST_MOD = "000 - 31-OCT-2018 - Josh DeLeenheer"
 
END
GO
 
;MAUR_TN_CARD_PROFEE_DRV "NOFORMS" GO
 
